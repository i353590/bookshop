const _createLikeComparison = (excludingSearch, columns, searchString) => {
  const likeExpression = []

  columns.forEach((column, index, columns) => {
    // if negated search, we need to add is null check
    if (excludingSearch) {
      likeExpression.push('(', column, 'IS NULL', 'OR')
    }

    const searchStringEscaped = searchString.val.toLowerCase().replace(/(\^|_|%)/g, '^$1')

    likeExpression.push(
      'lower',
      '(',
      column,
      ')',
      excludingSearch ? 'NOT LIKE' : 'LIKE',
      { val: `%${searchStringEscaped}%` },
      'ESCAPE',
      "'^'"
    )

    if (excludingSearch) {
      likeExpression.push(')')
    }

    if (index !== columns.length - 1) {
      likeExpression.push(excludingSearch ? 'AND' : 'OR')
    }
  })

  return likeExpression
}

// Computes a LIKE expression for a search query.
const searchToLike = (cqnSearchPhrase, columns) => {
  const expression = []

  cqnSearchPhrase.forEach((element, index) => {
    if (element === 'not') return

    if (element === 'or' || element === 'and') {
      expression.push(element)
    } else {
      const likeComparison = _createLikeComparison(cqnSearchPhrase[index - 1] === 'not', columns, element)
      expression.push('(', ...likeComparison, ')')
    }
  })

  return expression
}

module.exports = searchToLike
