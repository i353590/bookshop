const { sourceOfEvent } = require('../common-utils/declaredEvents.js')

const getTopicFromDeclared = (declared, options, inbound) => {
  if (!declared['@type'] && !declared['@source']) return declared.name
  const source = sourceOfEvent(declared)
  const type = declared['@type'] || declared.name
  if (!source) return type
  const typeN = type.replace(/\./g, '/')
  let sourceN = source.replace(/^\//, '')
  if (sourceN.split('/').length === 2) sourceN = sourceN + '/-'
  return `${sourceN}/ce/${typeN}`
}

const normalizeTopic = (topic, inbound, options) => {
  const topicN = topic.replace(/^\//, '').replace(/\/\//g, '/') // no leading/double slashes
  if (!inbound) {
    const namespace = options.credentials && options.credentials.namespace
    const match = topicN.match(/\//g)
    if (namespace && (!match || match.length < 3)) {
      const newTopic = `${namespace}/ce/${topicN.replace(/\./g, '/')}` // cloud events per default
      return newTopic
    } else if (topicN.match(/^[^/]+\/[^/]+\/[^/]+\/ce\//)) {
      const newTopic = topicN.replace(/\./g, '/') // no dots in cloud event types
      return newTopic
    }
  }
  return topicN
}

const inboundTopics = (topic, options) => {
  const namespace = options.credentials && options.credentials.namespace
  const match = topic.match(/\//g)
  const topics = !match || match.length < 3 ? ['+/+/+/' + topic, '+/+/+/ce/' + topic] : [topic]
  return topics.map(topic => {
    const topicN = topic.match(/^[^/]+\/[^/]+\/[^/]+\/ce\//) ? topic.replace(/\./g, '/') : topic // for cloud events, replace dots with slashes
    // some service descriptor configurations don't allow '+/+/+/', use own namespace as fallback
    return topicN.startsWith('+/+/+/')
      ? {
          topic: topicN,
          alternative: topicN.replace(/^\+\/\+\/\+/, namespace)
        }
      : topicN
  })
}

module.exports = { getTopicFromDeclared, normalizeTopic, inboundTopics }
