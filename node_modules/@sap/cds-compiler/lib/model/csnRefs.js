// CSN functionality for resolving references
//
// The functions in this module expect a well-formed CSN with valid references.
// If that is not the case, it simply throws an error (which might even be a
// plain TypeError) without any claim for the error message to be
// user-friendly.  CSN processors can provide user-friendly error messages by
// calling the Core Compiler in that case.  For details, see
// internalDoc/CoreCompiler.md#use-of-the-core-compiler-for-csn-processors.
//
// For details about the name resolution in CSN, see
// internalDoc/CsnSyntax.md#helper-property-for-simplified-name-resolution
// and doc/NameResolution.md.
//
// Terminology used in this file:
//
// - ref (reference): a { ref: <path> } object (or sometimes also a string)
//   referring an artifact or member
// - path: an array of strings or { id: â€¦ } objects for the dot-connected names
//   used as reference
// - csnPath: an array of strings and numbers (e.g. ['definitions', 'S.E',
//   'query', 'SELECT', 'from', 'ref', 0]); they are the property names and
//   array indexes which navigate from the CSN root to the current node.

// TODO: think of using the term `query` for the thing inside SELECT/SET.

'use strict';

const BUILTIN_TYPE = {};
const { locationString } = require('../base/location');

// Properties in which artifact or members are defined - next property in the
// "csnPath" is the name or index of that property; 'args' (its value can be a
// dictionary) is handled extra here.
const artifactProperties = [ 'elements', 'columns', 'keys', 'mixin', 'enum',
  'params', 'actions', 'definitions', 'extensions' ];

/**
 * @param {CSN.Model} csn
 */
function csnRefs( csn ) {
  const cache = new WeakMap();

  // TODO: code cleanup after getting rid of $env
  resolveRef.expand = function resolveRefExpand( obj, ...args ) {
    return cached( obj, '_env', () => navigationEnv( resolveRef( obj, ...args ).art ) );
  }
  resolveRef.refWhere = function resolveRefWhere( refObj, obj, ...args ) {
    return cached( obj, '_env', () => {
      resolveRef( refObj, ...args ); // sets _env cache for non-string ref items
      return getCache( obj, '_env' );
    } );
  }
  return {
    effectiveType, artifactRef, inspectRef, queryOrMain,
  };

  /**
   * Return the type relevant for name resolution, i.e. the object which has a
   * `target`, `elements`, `enum` property, or no `type` property.  To avoid
   * confusion with the "base type", we do not use the term "final type".
   * (This function could be omitted if we would use JS prototypes for type refs.)
   *
   * @param {CSN.ArtifactWithRefs} art
   */
  function effectiveType( art ) {
    const cachedType = getCache( art, '_effectiveType' );
    if (cachedType !== undefined)
      return cachedType;
    else if (!art.type || art.elements || art.target || art.targetAspect || art.enum)
      return setCache( art, '_effectiveType', art );

    const chain = [];
    while (getCache( art, '_effectiveType' ) === undefined && art.type &&
           !art.elements && !art.target && !art.targetAspect && !art.enum) {
      chain.push( art );
      setCache( art, '_effectiveType', 0 ); // initial setting in case of cycles
      art = artifactRef( art.type, BUILTIN_TYPE );
    }
    if (getCache( art, '_effectiveType' ) === 0)
      throw new Error( 'Circular type reference');
    const type = getCache( art, '_effectiveType' ) || art;
    chain.forEach( a => setCache( a, '_effectiveType', type ) );
    return type;
  }

  /**
   * @param {CSN.Artifact} art
   */
  function navigationEnv( art ) {
    let type = effectiveType( art );
    // here, we do not care whether it is semantically ok to navigate into sub
    // elements of array items (that is the task of the core compiler /
    // semantic check)
    while (type.items)
      type = type.items;
    // cannot navigate along targetAspect!
    return (type.target) ? csn.definitions[type.target] : type;
  }

  /**
   * Return the object pointing to by the artifact reference (in 'type',
   * 'includes', 'target', raw 'from').
   *
   * @param {CSN.ArtifactReferencePath|string} ref
   * @param {any} [notFound] Value that is returned in case the artifact reference
   *                         could not be found.
   */
  function artifactRef( ref, notFound ) {
    const art = (typeof ref === 'string')
      ? csn.definitions[ref]
      : cached( ref, 'ref', artifactPathRef );
    if (art)
      return art;
    if (notFound !== undefined)
      return notFound;
    throw new Error( 'Undefined reference' );
  }

  function artifactPathRef( ref ) {
    const [ head, ...tail ] = ref.ref;
    let art = csn.definitions[pathId( head )];
    for (const elem of tail)
      art = navigationEnv( art ).elements[pathId( elem )];
    return art;
  }

  /**
   * Return the entity we select from
   *
   * @param {CSN.ArtifactReferencePath} ref
   * @returns {CSN.Definition}
   */
  function fromRef( ref ) {
    return navigationEnv( artifactRef( ref ));
  }

  /**
   * @param {CSN.Path} csnPath
   */
  function inspectRef( csnPath ) {
    return analyseCsnPath( csnPath, csn, resolveRef );
  }

  function resolveRef( obj, parent, query, scope, baseEnv, main ) {
    const queries = cached( main, '$queries', allQueries );

    const path = (typeof obj === 'string') ? [ obj ] : obj.ref;
    if (!Array.isArray( path ))
      throw new Error( 'Value references must look like {ref:[...]}' );
    let head = pathId( path[0] );

    // 1,2: with 'param' or 'global' property, in `keys`
    if (obj.param) {
      return expandRefPath( path, main.params[head], 'param' );
    }
    else if (obj.global || [ 'type', 'includes', 'target', 'from' ].includes( scope )) {
      return expandRefPath( path, csn.definitions[head], scope );
    }
    else if (scope === 'keys') {
      const target = csn.definitions[parent.target || parent.cast.target];
      return expandRefPath( path, target.elements[head], 'keys' );
    }
    // 3: $magic
    if (head.charAt(0) === '$') {
      if (head === '$self' || head === '$projection') {
        const self = query ? queryOrMain( query, main ) : main;
        return expandRefPath( path, self, '$self' );
      }

      return { scope: '$magic' };
    }
    // 4: where inside ref, expand, inline
    if (baseEnv) {
      return expandRefPath( path, baseEnv.elements[head], scope );
    }
    // 5,6,7: outside queries, in queries where inferred elements are referred to
    if (!query)
      return expandRefPath( path, (parent || main).elements[head], scope );
    const select = query.SELECT || query.projection;
    const obj$env = obj.$env;
    if (!select || obj$env === true)
      // TODO: do not do this if current query has a parent query (except with obj.$env)
      // TODO: also consider expand/inline
      return expandRefPath( path, queryOrMain( query, main ).elements[head] );

    // With explicitly provided $env:
    if (typeof obj$env === 'number') { // head is mixin or table alias name
      const s = (obj$env) ? queries[obj$env - 1] : select;
      const m = s.mixin && s.mixin[head];
      return expandRefPath( path, m || getCache( s, '_sources' )[head], (m ? 'mixin' : 'alias') );
    }
    else if (typeof obj$env === 'string') {
      const source = getCache( select, '_sources' )[obj$env];
      // Had a case where a obj.$env was the name of a mixin - TODO: should not be - example?
      if (source)
        return expandRefPath( path, source.elements[head], 'source' );
      else if (select.mixin && select.mixin[obj$env])
        return expandRefPath( path, select.mixin[head], 'source' );
      throw new Error('No source found!');
    }

    // ON ref is to be searched only in the query elements
    if (scope === 'on')         // TODO: ok with expand/inline?  Probably not with the latter
      return expandRefPath( path, queryOrMain( query, main ).elements[head], scope );

    // 8: try to search in MIXIN section (not in ON of JOINs)
    if (scope !== 'from-on' && scope !== 'orderBy' && select.mixin) {
      const art = select.mixin[head];
      if (art)
        return expandRefPath( path, art, 'mixin' );
    }
    // 9: try to search for table aliases (partially in ON of JOINs)
    const alias = getCache( select, '$alias' );
    if (path.length > 1 && (alias || scope !== 'from-on')) {
      const art = getCache( select, '_sources' )[head];
      if (art)
        return expandRefPath( path, art, 'alias' );
    }
    // ORDER BY ref might have been a table alias (CSN not always has an $env),
    // otherwise query elements
    if (scope === 'orderBy')
      return expandRefPath( path, queryOrMain( query, main ).elements[head], scope );

    // 10: search in elements of source entity
    // TODO: do not do this if current query has a parent query !!!
    if (typeof alias === 'string') { // with unique source
      const source = getCache( select, '_sources' )[alias];
      return expandRefPath( path, source.elements[head], 'source' );
    }
    throw new Error( `Missing helper property $env: ${ scope }` );
  }

  /**
   * @param {CSN.Path} path
   * @param {CSN.Artifact} art
   * @param {string | null} [scope]
   */
  function expandRefPath( path, art, scope = null ) {
    /** @type {{idx, art?, env?}[]} */
    const links = path.map( (_v, idx) => ({ idx }) );
    links[0].art = art;
    for (let i = 1; i < links.length; ++i) { // yes, starting at 1, links[0] is set above
      art = navigationEnv( art );
      links[i - 1].env = art;
      if (typeof path[i - 1] !== 'string')
        setCache( path[i - 1], '_env', art );
      art = art.elements[pathId( path[i] )];
      if (!art) {
        const env = links[i - 1].env;
        const loc = env.name && env.name.$location || env.$location;
        throw new Error ( `Path item ${ i }=${ pathId( path[i] ) } on ${ locationString( loc ) } refers to nothing` );
      }
      links[i].art = art;
    }
    const last = path[path.length - 1]
    if (scope === 'from' || typeof last !== 'string') {
      const env = navigationEnv( art );
      links[links.length - 1].env = env;
      if (scope === 'from')
        art = env;
      if (typeof last !== 'string')
        setCache( last, '_env', env )
    }
    return { links, art, scope };
  }

  /**
   * Get the array of all (sub-)queries (value of the `SELECT`/`projection`
   * property) inside the given `main` artifact (of `main.query`).
   *
   * @param {CSN.Definition} main
   * @returns {CSN.Query[]}
   */
  function allQueries( main ) {
    const all = [];
    const projection = main.query || main.projection && main;
    if (!projection)
      return all;
    traverseQuery( projection, null, function memorize( query, select ) {
      if (query.ref) {          // ref in from
        const as = query.as || implicitAs( query.ref );
        getCache( select, '_sources' )[as] = fromRef( query );
        const alias = getCache( select, '$alias' ) // alias of unique source
        setCache( select, '$alias', (alias != null) ? typeof alias === 'string' : as);
      }
      else if (select && query.as) { // sub query in FROM
        const { as } = query;
        getCache( select, '_sources' )[as] = queryOrMain( query, main );
        const alias = getCache( select, '$alias' ) // alias of unique source
        setCache( select, '$alias', (alias != null) ? typeof alias === 'string' : as);       }
      const proj = query.SELECT || query.projection;
      if (proj) {       // every SELECT query -- TODO: remember number?
        setCache( proj, '_sources', Object.create(null) );
        setCache( proj, '$alias', null );
        all.push( proj );
      }
    } );
    return all;
  }

  function setCache( obj, prop, val ) {
    let hidden = cache.get( obj );
    if (!hidden) {
      hidden = {};
      cache.set( obj, hidden );
    }
    hidden[prop] = val;
    return val;
  }

  function getCache( obj, prop ) {
    const hidden = cache.get( obj );
    return hidden && hidden[prop];
  }

  function cached( obj, prop, calc ) {
    let hidden = cache.get( obj );
    if (!hidden) {
      hidden = {};
      cache.set( obj, hidden );
    }
    else if (hidden[prop] !== undefined)
      return hidden[prop];
    const val = calc( obj );
    hidden[prop] = val;
    return val;
  }
}

// Return value of a query SELECT for the query, or the main artifact,
// i.e. a value with an `elements` property.
// TODO: avoid the term Query, use QuerySelect or QueryNode
/**
 * @param {CSN.Query} query
 * @param {CSN.Definition} main
 */
function queryOrMain( query, main ) {
  while (query.SET)
    query = query.SET.args[0];
  if (query.SELECT && query.SELECT.elements)
    return query.SELECT;
  let leading = main.query || main;
  while (leading.SET)
    leading = leading.SET.args[0];
  // If an entity has both a projection and query property, the param `query`
  // can be the entity itself (when inspect is called with a csnPath containing
  // 'projection'), but `leading` can be its `query` property:
  if ((leading === query || leading === query.query) && main.elements)
    return main;
  throw new Error( `Query elements not available: ${ Object.keys( query ).join('+') }`);
}

/**
 * @param {CSN.Query} query
 * @param {CSN.QuerySelect} select
 * @param {(query: CSN.Query&CSN.QueryFrom, select: CSN.QuerySelectEnriched) => void} callback
 */
function traverseQuery( query, select, callback ) {
  if (query.SELECT || query.projection) {
    callback( query, select );
    query = query.SELECT || query.projection;
    traverseFrom( query.from, query, callback );
  }
  else if (query.SET) {
    callback( query, select );
    query = query.SET;
  }
  for (const prop of [ 'args', 'xpr', 'columns', 'where', 'having' ]) {
    // all properties which could have sub queries (directly or indirectly)
    const expr = query[prop];
    if (expr && typeof expr === 'object') {
      const args = Array.isArray( expr ) ? expr : Object.values( expr );
      args.forEach( q => traverseQuery( q, null, callback ) );
    }
  }
}

/**
 * @param {CSN.QueryFrom} from
 * @param {CSN.QuerySelect} select
 * @param {(from: CSN.QueryFrom, select: CSN.QuerySelect) => void} callback
 */
function traverseFrom( from, select, callback ) {
  if (from.ref) {
    callback( from, select );
  }
  else if (from.args) {         // join
    from.args.forEach( arg => traverseFrom( arg, select, callback ) );
    if (from.on)           // join
      from.on.forEach( arg => traverseQuery( arg, select, callback ) );
  }
  else {                        // sub query in FROM
    traverseQuery( from, select, callback );
  }
}

function pathId( item ) {
  return (typeof item === 'string') ? item : item.id;
}

function implicitAs( ref ) {
  const id = pathId( ref[ref.length - 1] );
  return id.substring( id.lastIndexOf('.') + 1 );
}

/**
 * @param {CSN.Path} csnPath
 * @param {CSN.Model} csn
 */
function analyseCsnPath( csnPath, csn, resolve ) {
  if (csnPath[0] !== 'definitions')
    throw new Error( 'References outside definitions not supported yet');

  /** @type {object} */
  let obj = csn;
  let parent = null;
  let query = null;
  let scope = null;
  let art = null;
  /** @type {boolean|string|number} */
  let isName = false;
  let refObj = null;
  let baseEnv = null;

  for (let index = 0; index < csnPath.length; index++) {
    const prop = csnPath[index];
    // array item, name/index of artifact/member, (named) argument
    if (isName || Array.isArray( obj )) {
      if (typeof isName === 'string') {
        parent = art;
        art = obj[prop];
      }
      isName = false;
    }
    else if (artifactProperties.includes( String(prop) )) {
      isName = prop;
      scope = prop;
    }
    else if (prop === 'items' || prop === 'returns') {
      art = obj[prop];
    }
    else if (prop === 'args') {
      isName = true;            // for named arguments
      if (scope === 'orderBy')
        scope = 'orderBy-xpr';  // no need to extra 'orderBy-args'
    }
    else if (prop === 'SELECT' || prop === 'SET' || prop === 'projection') {
      query = obj;
      scope = prop;
    }
    else if (prop === 'where' && scope === 'ref') {
      if (resolve)
        baseEnv = resolve.refWhere( refObj, obj, parent, query, scope, baseEnv,
                                    csn.definitions[csnPath[1]] );
      scope = 'ref-where';
    }
    else if ((prop === 'expand' || prop === 'inline') && obj.ref) {
      if (obj.ref && resolve) {
        baseEnv = resolve.expand( obj, parent, query, scope, baseEnv,
                                  csn.definitions[csnPath[1]] );
      }
      scope = prop;
    }
    else if (prop === 'on') {
      if (scope === 'from')
        scope = 'from-on';
      else if (scope === 'mixin')
        scope = 'mixin-on';
      else
        scope = 'on';
    }
    else if (prop === 'ref') {
      refObj = obj;
      scope = prop;
    }
    else if (prop !== 'xpr') {
      scope = prop;
    }
    else if (scope === 'orderBy') {
      scope = 'orderBy-xpr';
    }

    obj = obj[prop];
    if (!obj && !resolve)
      // For the semantic location, use current object as best guess
      break;
  }
  // console.log( 'CPATH:', csnPath, scope, obj, parent.$location );
  if (!resolve)
    return { query };           // for constructSemanticLocationFromCsnPath
  return resolve( obj, parent, query, scope, baseEnv, csn.definitions[csnPath[1]] );
}

module.exports = {
  csnRefs,
  traverseQuery,
  artifactProperties,
  implicitAs,
  analyseCsnPath,
  pathId,
};
