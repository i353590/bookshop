/* eslint-disable */
// @ts-nocheck

// Generated from language.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var genericAntlrParser = require('./genericAntlrParser').genericAntlrParser;

var grammarFileName = "language.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u0092\u0c3f\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0003\u0002\u0007\u0002\u00e8\n\u0002\f\u0002",
    "\u000e\u0002\u00eb\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0007",
    "\u0002\u00f0\n\u0002\f\u0002\u000e\u0002\u00f3\u000b\u0002\u0003\u0002",
    "\u0003\u0002\u0003\u0002\u0007\u0002\u00f8\n\u0002\f\u0002\u000e\u0002",
    "\u00fb\u000b\u0002\u0005\u0002\u00fd\n\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006",
    "\u0118\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u011d",
    "\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0007\u0006\u0125\n\u0006\f\u0006\u000e\u0006\u0128\u000b",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u012e",
    "\n\u0006\u0005\u0006\u0130\n\u0006\u0003\u0006\u0003\u0006\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0005\u0007\u013b\n\u0007\u0003\b\u0003\b\u0003\t\u0003\t\u0005\t\u0141",
    "\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0148\n\t\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0007\n\u0150\n\n\f\n\u000e",
    "\n\u0153\u000b\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0005\u000b\u015c\n\u000b\u0003\u000b\u0003",
    "\u000b\u0005\u000b\u0160\n\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0005\f\u0167\n\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f",
    "\u016e\n\f\u0005\f\u0170\n\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r",
    "\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u017c\n\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u0186\n\r",
    "\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u018f",
    "\n\r\u0005\r\u0191\n\r\u0005\r\u0193\n\r\u0005\r\u0195\n\r\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0005\u000e\u019a\n\u000e\u0003\u000f\u0003",
    "\u000f\u0005\u000f\u019e\n\u000f\u0003\u0010\u0003\u0010\u0007\u0010",
    "\u01a2\n\u0010\f\u0010\u000e\u0010\u01a5\u000b\u0010\u0003\u0010\u0005",
    "\u0010\u01a8\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u01b2\n",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u01bc\n\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0005\u0010\u01c1\n\u0010\u0003\u0011\u0003",
    "\u0011\u0005\u0011\u01c5\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0007\u0011\u01ca\n\u0011\f\u0011\u000e\u0011\u01cd\u000b\u0011\u0003",
    "\u0011\u0003\u0011\u0007\u0011\u01d1\n\u0011\f\u0011\u000e\u0011\u01d4",
    "\u000b\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u01d9\n",
    "\u0011\u0003\u0012\u0003\u0012\u0005\u0012\u01dd\n\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u01e3\n\u0012\u0003",
    "\u0012\u0003\u0012\u0007\u0012\u01e7\n\u0012\f\u0012\u000e\u0012\u01ea",
    "\u000b\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u01ee\n\u0012\f\u0012",
    "\u000e\u0012\u01f1\u000b\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0005",
    "\u0012\u01f6\n\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0007\u0013\u01fc\n\u0013\f\u0013\u000e\u0013\u01ff\u000b\u0013\u0003",
    "\u0013\u0005\u0013\u0202\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0007\u0013\u0209\n\u0013\f\u0013\u000e\u0013",
    "\u020c\u000b\u0013\u0005\u0013\u020e\n\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0007\u0013\u0213\n\u0013\f\u0013\u000e\u0013\u0216\u000b",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u021c",
    "\n\u0013\f\u0013\u000e\u0013\u021f\u000b\u0013\u0003\u0013\u0005\u0013",
    "\u0222\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u022b\n\u0013\f\u0013\u000e",
    "\u0013\u022e\u000b\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013",
    "\u0233\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0007\u0013\u023b\n\u0013\f\u0013\u000e\u0013\u023e",
    "\u000b\u0013\u0003\u0013\u0005\u0013\u0241\n\u0013\u0003\u0013\u0003",
    "\u0013\u0005\u0013\u0245\n\u0013\u0005\u0013\u0247\n\u0013\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0005\u0014\u0250\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0005\u0014\u0256\n\u0014\u0003\u0014\u0005\u0014\u0259\n\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0007\u0014\u0261\n\u0014\f\u0014\u000e\u0014\u0264\u000b\u0014\u0003",
    "\u0014\u0003\u0014\u0005\u0014\u0268\n\u0014\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0005\u0015\u026e\n\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0007\u0015\u0278\n\u0015\f\u0015\u000e\u0015\u027b\u000b\u0015",
    "\u0005\u0015\u027d\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0005\u0015\u0283\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0005\u0015\u0288\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005",
    "\u0015\u028d\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0007\u0017",
    "\u0298\n\u0017\f\u0017\u000e\u0017\u029b\u000b\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u02a1\n\u0017\u0003\u0017",
    "\u0003\u0017\u0007\u0017\u02a5\n\u0017\f\u0017\u000e\u0017\u02a8\u000b",
    "\u0017\u0003\u0017\u0005\u0017\u02ab\n\u0017\u0003\u0018\u0003\u0018",
    "\u0007\u0018\u02af\n\u0018\f\u0018\u000e\u0018\u02b2\u000b\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u02b8\n\u0018",
    "\f\u0018\u000e\u0018\u02bb\u000b\u0018\u0003\u0018\u0005\u0018\u02be",
    "\n\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0007\u0018",
    "\u02c4\n\u0018\f\u0018\u000e\u0018\u02c7\u000b\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0005\u0018\u02cc\n\u0018\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u02d3\n\u0019\u0003",
    "\u0019\u0003\u0019\u0007\u0019\u02d7\n\u0019\f\u0019\u000e\u0019\u02da",
    "\u000b\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0007\u0019\u02e2\n\u0019\f\u0019\u000e\u0019\u02e5\u000b",
    "\u0019\u0005\u0019\u02e7\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0007\u0019\u02ed\n\u0019\f\u0019\u000e\u0019\u02f0\u000b",
    "\u0019\u0003\u0019\u0005\u0019\u02f3\n\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0007\u0019\u02f9\n\u0019\f\u0019\u000e\u0019",
    "\u02fc\u000b\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u0301",
    "\n\u0019\u0003\u001a\u0003\u001a\u0007\u001a\u0305\n\u001a\f\u001a\u000e",
    "\u001a\u0308\u000b\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0007\u001a\u030e\n\u001a\f\u001a\u000e\u001a\u0311\u000b\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u0316\n\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0007\u001a\u031c\n\u001a\f\u001a",
    "\u000e\u001a\u031f\u000b\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005",
    "\u001a\u0324\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0007\u001b\u032a\n\u001b\f\u001b\u000e\u001b\u032d\u000b\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u0332\n\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0007\u001b\u0338\n\u001b\f\u001b",
    "\u000e\u001b\u033b\u000b\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005",
    "\u001b\u0340\n\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0007\u001c\u0346\n\u001c\f\u001c\u000e\u001c\u0349\u000b\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0007\u001c\u0355\n\u001c",
    "\f\u001c\u000e\u001c\u0358\u000b\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0007\u001c\u035f\n\u001c\f\u001c\u000e",
    "\u001c\u0362\u000b\u001c\u0003\u001c\u0005\u001c\u0365\n\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0005\u001c\u036e\n\u001c\u0005\u001c\u0370\n\u001c\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0005\u001d\u0375\n\u001d\u0003\u001d\u0005",
    "\u001d\u0378\n\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0007\u001d",
    "\u037d\n\u001d\f\u001d\u000e\u001d\u0380\u000b\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u0387\n\u001d",
    "\f\u001d\u000e\u001d\u038a\u000b\u001d\u0005\u001d\u038c\n\u001d\u0005",
    "\u001d\u038e\n\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0007\u001d",
    "\u0393\n\u001d\f\u001d\u000e\u001d\u0396\u000b\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u039c\n\u001d\f\u001d\u000e",
    "\u001d\u039f\u000b\u001d\u0003\u001d\u0005\u001d\u03a2\n\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0007",
    "\u001e\u03aa\n\u001e\f\u001e\u000e\u001e\u03ad\u000b\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003 \u0003 \u0003 \u0003 \u0003 \u0003!\u0003!\u0003!\u0003!\u0007",
    "!\u03bf\n!\f!\u000e!\u03c2\u000b!\u0003!\u0003!\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003#\u0003#\u0003#\u0007#\u03cd\n#\f#\u000e#\u03d0\u000b",
    "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0007#\u03d7\n#\f#\u000e#\u03da",
    "\u000b#\u0003#\u0003#\u0003#\u0005#\u03df\n#\u0003#\u0003#\u0007#\u03e3",
    "\n#\f#\u000e#\u03e6\u000b#\u0003#\u0003#\u0007#\u03ea\n#\f#\u000e#\u03ed",
    "\u000b#\u0003#\u0003#\u0003#\u0005#\u03f2\n#\u0005#\u03f4\n#\u0003$",
    "\u0003$\u0003$\u0003$\u0005$\u03fa\n$\u0003$\u0003$\u0007$\u03fe\n$",
    "\f$\u000e$\u0401\u000b$\u0003$\u0003$\u0007$\u0405\n$\f$\u000e$\u0408",
    "\u000b$\u0003$\u0003$\u0003$\u0003$\u0007$\u040e\n$\f$\u000e$\u0411",
    "\u000b$\u0003$\u0005$\u0414\n$\u0003$\u0003$\u0003$\u0003$\u0007$\u041a",
    "\n$\f$\u000e$\u041d\u000b$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0007$\u0426\n$\f$\u000e$\u0429\u000b$\u0003$\u0003$\u0003",
    "$\u0003$\u0007$\u042f\n$\f$\u000e$\u0432\u000b$\u0003$\u0003$\u0003",
    "$\u0005$\u0437\n$\u0003$\u0003$\u0003$\u0007$\u043c\n$\f$\u000e$\u043f",
    "\u000b$\u0003$\u0003$\u0003$\u0005$\u0444\n$\u0003%\u0003%\u0007%\u0448",
    "\n%\f%\u000e%\u044b\u000b%\u0003%\u0003%\u0003%\u0007%\u0450\n%\f%\u000e",
    "%\u0453\u000b%\u0003%\u0003%\u0007%\u0457\n%\f%\u000e%\u045a\u000b%",
    "\u0003%\u0003%\u0003%\u0005%\u045f\n%\u0003&\u0003&\u0007&\u0463\n&",
    "\f&\u000e&\u0466\u000b&\u0003&\u0003&\u0003&\u0007&\u046b\n&\f&\u000e",
    "&\u046e\u000b&\u0003&\u0003&\u0003&\u0003&\u0003&\u0007&\u0475\n&\f",
    "&\u000e&\u0478\u000b&\u0003&\u0003&\u0005&\u047c\n&\u0003&\u0003&\u0003",
    "&\u0007&\u0481\n&\f&\u000e&\u0484\u000b&\u0003&\u0003&\u0003&\u0005",
    "&\u0489\n&\u0003\'\u0003\'\u0007\'\u048d\n\'\f\'\u000e\'\u0490\u000b",
    "\'\u0003\'\u0003\'\u0003\'\u0007\'\u0495\n\'\f\'\u000e\'\u0498\u000b",
    "\'\u0003(\u0003(\u0007(\u049c\n(\f(\u000e(\u049f\u000b(\u0003(\u0003",
    "(\u0003(\u0007(\u04a4\n(\f(\u000e(\u04a7\u000b(\u0003(\u0003(\u0003",
    "(\u0003(\u0003(\u0003(\u0003(\u0005(\u04b0\n(\u0003(\u0003(\u0005(\u04b4",
    "\n(\u0003(\u0007(\u04b7\n(\f(\u000e(\u04ba\u000b(\u0005(\u04bc\n(\u0003",
    "(\u0003(\u0003)\u0003)\u0007)\u04c2\n)\f)\u000e)\u04c5\u000b)\u0003",
    ")\u0003)\u0003)\u0005)\u04ca\n)\u0003*\u0003*\u0007*\u04ce\n*\f*\u000e",
    "*\u04d1\u000b*\u0003*\u0003*\u0003+\u0003+\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0005+\u04dc\n+\u0003+\u0005+\u04df\n+\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0005+\u04e6\n+\u0005+\u04e8\n+\u0003+\u0003+\u0003",
    "+\u0003+\u0005+\u04ee\n+\u0003+\u0003+\u0003,\u0006,\u04f3\n,\r,\u000e",
    ",\u04f4\u0003,\u0003,\u0003-\u0003-\u0005-\u04fb\n-\u0003-\u0005-\u04fe",
    "\n-\u0003-\u0005-\u0501\n-\u0003-\u0005-\u0504\n-\u0003-\u0003-\u0003",
    "-\u0007-\u0509\n-\f-\u000e-\u050c\u000b-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0005-\u0513\n-\u0003-\u0003-\u0003-\u0005-\u0518\n-\u0003",
    "-\u0005-\u051b\n-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u0536\n-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0005-\u053d\n-\u0003-\u0003-\u0005-\u0541",
    "\n-\u0003-\u0005-\u0544\n-\u0003-\u0003-\u0005-\u0548\n-\u0003-\u0003",
    "-\u0007-\u054c\n-\f-\u000e-\u054f\u000b-\u0003-\u0003-\u0005-\u0553",
    "\n-\u0003-\u0003-\u0007-\u0557\n-\f-\u000e-\u055a\u000b-\u0003-\u0003",
    "-\u0003-\u0003-\u0007-\u0560\n-\f-\u000e-\u0563\u000b-\u0003-\u0003",
    "-\u0005-\u0567\n-\u0005-\u0569\n-\u0005-\u056b\n-\u0003-\u0003-\u0003",
    "-\u0003-\u0005-\u0571\n-\u0003-\u0003-\u0007-\u0575\n-\f-\u000e-\u0578",
    "\u000b-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0007-\u0581",
    "\n-\f-\u000e-\u0584\u000b-\u0003-\u0003-\u0003-\u0007-\u0589\n-\f-\u000e",
    "-\u058c\u000b-\u0005-\u058e\n-\u0003-\u0003-\u0003-\u0003-\u0003-\u0007",
    "-\u0595\n-\f-\u000e-\u0598\u000b-\u0003-\u0003-\u0003-\u0003-\u0007",
    "-\u059e\n-\f-\u000e-\u05a1\u000b-\u0003-\u0003-\u0005-\u05a5\n-\u0003",
    "-\u0005-\u05a8\n-\u0003-\u0003-\u0003-\u0007-\u05ad\n-\f-\u000e-\u05b0",
    "\u000b-\u0005-\u05b2\n-\u0003-\u0003-\u0005-\u05b6\n-\u0003-\u0003-",
    "\u0003-\u0003-\u0003-\u0007-\u05bd\n-\f-\u000e-\u05c0\u000b-\u0003-",
    "\u0003-\u0005-\u05c4\n-\u0003.\u0005.\u05c7\n.\u0003.\u0003.\u0003.",
    "\u0003.\u0003/\u0003/\u0003/\u0003/\u0003/\u0005/\u05d2\n/\u0003/\u0003",
    "/\u0003/\u0007/\u05d7\n/\f/\u000e/\u05da\u000b/\u0005/\u05dc\n/\u0003",
    "/\u0003/\u00030\u00030\u00070\u05e2\n0\f0\u000e0\u05e5\u000b0\u0003",
    "0\u00030\u00050\u05e9\n0\u00030\u00050\u05ec\n0\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00050\u05f8\n0\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00050\u0600\n0\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00050\u060b\n0\u00050\u060d",
    "\n0\u00030\u00030\u00070\u0611\n0\f0\u000e0\u0614\u000b0\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00070\u061e\n0\f0\u000e",
    "0\u0621\u000b0\u00050\u0623\n0\u00030\u00030\u00030\u00070\u0628\n0",
    "\f0\u000e0\u062b\u000b0\u00030\u00030\u00030\u00070\u0630\n0\f0\u000e",
    "0\u0633\u000b0\u00050\u0635\n0\u00050\u0637\n0\u00031\u00031\u00031",
    "\u00031\u00031\u00071\u063e\n1\f1\u000e1\u0641\u000b1\u00051\u0643\n",
    "1\u00031\u00031\u00032\u00032\u00072\u0649\n2\f2\u000e2\u064c\u000b",
    "2\u00032\u00032\u00032\u00072\u0651\n2\f2\u000e2\u0654\u000b2\u0003",
    "2\u00032\u00072\u0658\n2\f2\u000e2\u065b\u000b2\u00033\u00033\u0003",
    "3\u00033\u00033\u00073\u0662\n3\f3\u000e3\u0665\u000b3\u00053\u0667",
    "\n3\u00033\u00033\u00034\u00034\u00074\u066d\n4\f4\u000e4\u0670\u000b",
    "4\u00034\u00034\u00034\u00074\u0675\n4\f4\u000e4\u0678\u000b4\u0003",
    "4\u00034\u00034\u00034\u00034\u00054\u067f\n4\u00035\u00035\u00035\u0003",
    "5\u00035\u00055\u0686\n5\u00036\u00036\u00036\u00036\u00036\u00056\u068d",
    "\n6\u00036\u00036\u00036\u00036\u00036\u00056\u0694\n6\u00036\u0003",
    "6\u00036\u00056\u0699\n6\u00037\u00037\u00037\u00037\u00077\u069f\n",
    "7\f7\u000e7\u06a2\u000b7\u00037\u00037\u00037\u00037\u00037\u00037\u0007",
    "7\u06aa\n7\f7\u000e7\u06ad\u000b7\u00057\u06af\n7\u00037\u00037\u0003",
    "7\u00037\u00037\u00038\u00038\u00038\u00039\u00039\u00039\u00039\u0005",
    "9\u06bd\n9\u00039\u00039\u00039\u00059\u06c2\n9\u00039\u00039\u0005",
    "9\u06c6\n9\u00039\u00039\u00039\u00039\u00079\u06cc\n9\f9\u000e9\u06cf",
    "\u000b9\u00039\u00059\u06d2\n9\u00059\u06d4\n9\u00059\u06d6\n9\u0003",
    ":\u0003:\u0003:\u0003:\u0005:\u06dc\n:\u0003:\u0003:\u0003:\u0005:\u06e1",
    "\n:\u0003:\u0003:\u0005:\u06e5\n:\u0003:\u0003:\u0003:\u0003:\u0007",
    ":\u06eb\n:\f:\u000e:\u06ee\u000b:\u0003:\u0003:\u0005:\u06f2\n:\u0005",
    ":\u06f4\n:\u0003:\u0003:\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0005;\u0703\n;\u0003;\u0005;\u0706\n",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0005;\u070f\n;\u0003",
    ";\u0003;\u0005;\u0713\n;\u0003;\u0003;\u0003;\u0003;\u0005;\u0719\n",
    ";\u0003;\u0003;\u0007;\u071d\n;\f;\u000e;\u0720\u000b;\u0003;\u0003",
    ";\u0003;\u0003;\u0005;\u0726\n;\u0003;\u0003;\u0007;\u072a\n;\f;\u000e",
    ";\u072d\u000b;\u0003;\u0003;\u0003;\u0003;\u0007;\u0733\n;\f;\u000e",
    ";\u0736\u000b;\u0003;\u0003;\u0003;\u0005;\u073b\n;\u0005;\u073d\n;",
    "\u0003;\u0003;\u0003;\u0007;\u0742\n;\f;\u000e;\u0745\u000b;\u0003;",
    "\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0007;\u074e\n;\f;\u000e",
    ";\u0751\u000b;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0007;\u075e\n;\f;\u000e;\u0761\u000b;\u0003",
    ";\u0003;\u0003;\u0007;\u0766\n;\f;\u000e;\u0769\u000b;\u0003;\u0003",
    ";\u0003;\u0003;\u0007;\u076f\n;\f;\u000e;\u0772\u000b;\u0003;\u0003",
    ";\u0003;\u0005;\u0777\n;\u0003;\u0003;\u0003;\u0003;\u0003;\u0007;\u077e",
    "\n;\f;\u000e;\u0781\u000b;\u0003;\u0003;\u0003;\u0003;\u0007;\u0787",
    "\n;\f;\u000e;\u078a\u000b;\u0003;\u0003;\u0003;\u0005;\u078f\n;\u0003",
    ";\u0003;\u0007;\u0793\n;\f;\u000e;\u0796\u000b;\u0003;\u0003;\u0003",
    ";\u0003;\u0007;\u079c\n;\f;\u000e;\u079f\u000b;\u0003;\u0003;\u0003",
    ";\u0005;\u07a4\n;\u0003;\u0003;\u0003;\u0003;\u0007;\u07aa\n;\f;\u000e",
    ";\u07ad\u000b;\u0003;\u0003;\u0003;\u0005;\u07b2\n;\u0005;\u07b4\n;",
    "\u0005;\u07b6\n;\u0003<\u0003<\u0003<\u0007<\u07bb\n<\f<\u000e<\u07be",
    "\u000b<\u0003<\u0003<\u0003=\u0003=\u0003=\u0007=\u07c5\n=\f=\u000e",
    "=\u07c8\u000b=\u0003=\u0003=\u0003>\u0003>\u0003>\u0003>\u0003>\u0005",
    ">\u07d1\n>\u0003>\u0003>\u0005>\u07d5\n>\u0003>\u0003>\u0005>\u07d9",
    "\n>\u0003>\u0003>\u0005>\u07dd\n>\u0003>\u0003>\u0003>\u0003>\u0007",
    ">\u07e3\n>\f>\u000e>\u07e6\u000b>\u0003>\u0005>\u07e9\n>\u0005>\u07eb",
    "\n>\u0003?\u0003?\u0005?\u07ef\n?\u0003?\u0003?\u0003?\u0003?\u0005",
    "?\u07f5\n?\u0003?\u0003?\u0005?\u07f9\n?\u0003?\u0003?\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0007@\u0803\n@\f@\u000e@\u0806\u000b",
    "@\u0005@\u0808\n@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u080f\n",
    "@\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0007A\u0817\nA\fA\u000e",
    "A\u081a\u000bA\u0005A\u081c\nA\u0003A\u0003A\u0005A\u0820\nA\u0003A",
    "\u0003A\u0003A\u0003A\u0003A\u0005A\u0827\nA\u0003A\u0003A\u0007A\u082b",
    "\nA\fA\u000eA\u082e\u000bA\u0003A\u0003A\u0003B\u0003B\u0003B\u0003",
    "B\u0003C\u0003C\u0003C\u0003C\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0005D\u0842\nD\u0003D\u0003D\u0003D\u0005D\u0847\n",
    "D\u0003D\u0003D\u0003D\u0003D\u0005D\u084d\nD\u0005D\u084f\nD\u0003",
    "D\u0003D\u0003E\u0003E\u0003E\u0005E\u0856\nE\u0003E\u0003E\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0005F\u0861\nF\u0003G\u0003G\u0003",
    "G\u0003G\u0003G\u0003G\u0003G\u0003G\u0007G\u086b\nG\fG\u000eG\u086e",
    "\u000bG\u0003G\u0003G\u0003G\u0003G\u0005G\u0874\nG\u0003H\u0003H\u0003",
    "H\u0003H\u0005H\u087a\nH\u0003H\u0003H\u0005H\u087e\nH\u0003H\u0003",
    "H\u0005H\u0882\nH\u0005H\u0884\nH\u0003H\u0003H\u0003H\u0007H\u0889",
    "\nH\fH\u000eH\u088c\u000bH\u0003H\u0003H\u0003H\u0005H\u0891\nH\u0003",
    "H\u0003H\u0003H\u0005H\u0896\nH\u0003I\u0003I\u0003I\u0003I\u0003I\u0003",
    "I\u0003I\u0003I\u0003I\u0007I\u08a1\nI\fI\u000eI\u08a4\u000bI\u0003",
    "J\u0003J\u0003J\u0003J\u0003J\u0003J\u0005J\u08ac\nJ\u0003J\u0003J\u0003",
    "J\u0005J\u08b1\nJ\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0005K\u08b9",
    "\nK\u0003K\u0003K\u0003K\u0005K\u08be\nK\u0003L\u0003L\u0003L\u0003",
    "L\u0005L\u08c4\nL\u0003L\u0003L\u0003L\u0007L\u08c9\nL\fL\u000eL\u08cc",
    "\u000bL\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003",
    "M\u0003M\u0003M\u0003M\u0007M\u08da\nM\fM\u000eM\u08dd\u000bM\u0003",
    "M\u0003M\u0005M\u08e1\nM\u0003M\u0003M\u0005M\u08e5\nM\u0003M\u0005",
    "M\u08e8\nM\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0007M\u08f0\n",
    "M\fM\u000eM\u08f3\u000bM\u0003M\u0003M\u0005M\u08f7\nM\u0003M\u0003",
    "M\u0005M\u08fb\nM\u0003M\u0003M\u0003M\u0003M\u0005M\u0901\nM\u0003",
    "M\u0003M\u0003M\u0007M\u0906\nM\fM\u000eM\u0909\u000bM\u0003M\u0003",
    "M\u0005M\u090d\nM\u0003M\u0003M\u0003M\u0003M\u0005M\u0913\nM\u0003",
    "M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0007M\u091d\nM\f",
    "M\u000eM\u0920\u000bM\u0005M\u0922\nM\u0003M\u0003M\u0003M\u0003M\u0005",
    "M\u0928\nM\u0005M\u092a\nM\u0003N\u0003N\u0003N\u0003N\u0003N\u0003",
    "N\u0003N\u0006N\u0933\nN\rN\u000eN\u0934\u0005N\u0937\nN\u0003O\u0003",
    "O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003",
    "O\u0003O\u0003O\u0003O\u0007O\u0948\nO\fO\u000eO\u094b\u000bO\u0003",
    "P\u0003P\u0003P\u0003P\u0005P\u0951\nP\u0003P\u0003P\u0003P\u0003P\u0005",
    "P\u0957\nP\u0003P\u0005P\u095a\nP\u0003P\u0003P\u0003P\u0003P\u0005",
    "P\u0960\nP\u0003P\u0005P\u0963\nP\u0003P\u0003P\u0003P\u0003P\u0005",
    "P\u0969\nP\u0003P\u0005P\u096c\nP\u0003P\u0003P\u0005P\u0970\nP\u0003",
    "P\u0003P\u0003Q\u0005Q\u0975\nQ\u0003Q\u0003Q\u0003Q\u0003Q\u0005Q\u097b",
    "\nQ\u0003Q\u0003Q\u0005Q\u097f\nQ\u0003Q\u0003Q\u0003Q\u0003Q\u0005",
    "Q\u0985\nQ\u0003R\u0003R\u0003R\u0003R\u0003R\u0005R\u098c\nR\u0003",
    "R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0005R\u0995\nR\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0005",
    "R\u09a2\nR\u0003R\u0003R\u0003R\u0003R\u0005R\u09a8\nR\u0005R\u09aa",
    "\nR\u0003S\u0003S\u0003S\u0003S\u0005S\u09b0\nS\u0003S\u0005S\u09b3",
    "\nS\u0003S\u0003S\u0003S\u0003S\u0003S\u0005S\u09ba\nS\u0003S\u0005",
    "S\u09bd\nS\u0007S\u09bf\nS\fS\u000eS\u09c2\u000bS\u0003T\u0003T\u0003",
    "T\u0003T\u0003T\u0003T\u0007T\u09ca\nT\fT\u000eT\u09cd\u000bT\u0003",
    "U\u0003U\u0003U\u0003U\u0003U\u0003U\u0007U\u09d5\nU\fU\u000eU\u09d8",
    "\u000bU\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003",
    "V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0005V\u09e9\nV\u0003V\u0003",
    "V\u0003V\u0003V\u0003V\u0005V\u09f0\nV\u0003V\u0003V\u0003V\u0003V\u0003",
    "V\u0003V\u0003V\u0005V\u09f9\nV\u0003V\u0003V\u0003V\u0003V\u0003V\u0003",
    "V\u0005V\u0a01\nV\u0005V\u0a03\nV\u0003W\u0003W\u0003W\u0003W\u0003",
    "W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003",
    "W\u0003W\u0003W\u0003W\u0005W\u0a17\nW\u0005W\u0a19\nW\u0003X\u0003",
    "X\u0003X\u0003X\u0003X\u0003X\u0007X\u0a21\nX\fX\u000eX\u0a24\u000b",
    "X\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0007Y\u0a2c\nY\fY\u000e",
    "Y\u0a2f\u000bY\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0007Z\u0a37",
    "\nZ\fZ\u000eZ\u0a3a\u000bZ\u0003[\u0003[\u0003[\u0003[\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0003[\u0006[\u0a50\n[\r[\u000e[\u0a51\u0003",
    "[\u0003[\u0003[\u0003[\u0003[\u0003[\u0006[\u0a5a\n[\r[\u000e[\u0a5b",
    "\u0005[\u0a5e\n[\u0003[\u0003[\u0003[\u0003[\u0005[\u0a64\n[\u0003[",
    "\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0003[\u0005[\u0a75\n[\u0003[\u0003[\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003",
    "[\u0007[\u0a85\n[\f[\u000e[\u0a88\u000b[\u0003[\u0003[\u0003[\u0005",
    "[\u0a8d\n[\u0005[\u0a8f\n[\u0005[\u0a91\n[\u0003\\\u0003\\\u0003\\\u0003",
    "\\\u0003\\\u0003\\\u0003\\\u0003\\\u0005\\\u0a9b\n\\\u0003\\\u0003\\",
    "\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003",
    "\\\u0005\\\u0aa8\n\\\u0005\\\u0aaa\n\\\u0003\\\u0003\\\u0003\\\u0003",
    "\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003",
    "\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0005\\\u0ac0",
    "\n\\\u0003]\u0003]\u0003]\u0003]\u0005]\u0ac6\n]\u0003]\u0005]\u0ac9",
    "\n]\u0003]\u0003]\u0003]\u0003]\u0003]\u0005]\u0ad0\n]\u0003]\u0005",
    "]\u0ad3\n]\u0007]\u0ad5\n]\f]\u000e]\u0ad8\u000b]\u0003^\u0003^\u0003",
    "^\u0003^\u0003^\u0007^\u0adf\n^\f^\u000e^\u0ae2\u000b^\u0003^\u0003",
    "^\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0007_\u0aec\n_\f_\u000e",
    "_\u0aef\u000b_\u0003_\u0003_\u0003_\u0003_\u0003_\u0007_\u0af6\n_\f",
    "_\u000e_\u0af9\u000b_\u0003_\u0003_\u0003_\u0003_\u0003_\u0007_\u0b00",
    "\n_\f_\u000e_\u0b03\u000b_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003",
    "_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0007_\u0b12\n_\f",
    "_\u000e_\u0b15\u000b_\u0003_\u0003_\u0003_\u0005_\u0b1a\n_\u0003_\u0003",
    "_\u0003`\u0003`\u0003`\u0003`\u0003`\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0003b\u0003b\u0003b\u0003b\u0003b\u0005b\u0b2d\nb\u0003c\u0003c\u0005",
    "c\u0b31\nc\u0003c\u0003c\u0003c\u0003c\u0003c\u0003d\u0003d\u0003d\u0003",
    "d\u0003d\u0003e\u0003e\u0003e\u0003f\u0003f\u0003f\u0003f\u0003f\u0005",
    "f\u0b45\nf\u0003f\u0003f\u0003f\u0007f\u0b4a\nf\ff\u000ef\u0b4d\u000b",
    "f\u0005f\u0b4f\nf\u0003f\u0003f\u0003g\u0003g\u0007g\u0b55\ng\fg\u000e",
    "g\u0b58\u000bg\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003",
    "g\u0003g\u0003g\u0005g\u0b64\ng\u0003g\u0003g\u0003g\u0005g\u0b69\n",
    "g\u0003g\u0003g\u0007g\u0b6d\ng\fg\u000eg\u0b70\u000bg\u0003g\u0003",
    "g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0005g\u0b7b\ng\u0005",
    "g\u0b7d\ng\u0003h\u0003h\u0003h\u0005h\u0b82\nh\u0003i\u0003i\u0003",
    "i\u0003i\u0003i\u0003i\u0003i\u0007i\u0b8b\ni\fi\u000ei\u0b8e\u000b",
    "i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003",
    "i\u0003i\u0007i\u0b9b\ni\fi\u000ei\u0b9e\u000bi\u0005i\u0ba0\ni\u0003",
    "i\u0003i\u0003i\u0003i\u0003i\u0003i\u0005i\u0ba8\ni\u0003i\u0003i\u0005",
    "i\u0bac\ni\u0003j\u0003j\u0003j\u0003j\u0003j\u0005j\u0bb3\nj\u0003",
    "j\u0003j\u0005j\u0bb7\nj\u0005j\u0bb9\nj\u0003k\u0005k\u0bbc\nk\u0003",
    "k\u0003k\u0003k\u0003k\u0003k\u0003k\u0005k\u0bc4\nk\u0003k\u0003k\u0003",
    "k\u0005k\u0bc9\nk\u0003k\u0003k\u0003l\u0003l\u0003l\u0003l\u0003l\u0003",
    "l\u0003l\u0007l\u0bd4\nl\fl\u000el\u0bd7\u000bl\u0003l\u0003l\u0003",
    "l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0007l\u0be4",
    "\nl\fl\u000el\u0be7\u000bl\u0005l\u0be9\nl\u0003l\u0003l\u0003l\u0003",
    "l\u0003l\u0003l\u0005l\u0bf1\nl\u0003l\u0003l\u0003l\u0003l\u0005l\u0bf7",
    "\nl\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0005l\u0bff\nl\u0005",
    "l\u0c01\nl\u0003m\u0005m\u0c04\nm\u0003m\u0003m\u0003m\u0005m\u0c09",
    "\nm\u0003m\u0003m\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003",
    "n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0005n\u0c1b\nn\u0003o\u0003",
    "o\u0003o\u0003o\u0003o\u0003o\u0007o\u0c23\no\fo\u000eo\u0c26\u000b",
    "o\u0003p\u0003p\u0003p\u0003p\u0005p\u0c2c\np\u0003p\u0003p\u0003p\u0007",
    "p\u0c31\np\fp\u000ep\u0c34\u000bp\u0003q\u0003q\u0003q\u0003q\u0003",
    "q\u0003r\u0003r\u0003s\u0003s\u0003s\u0002\u0002t\u0002\u0004\u0006",
    "\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*",
    ",.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086",
    "\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e",
    "\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6",
    "\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce",
    "\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u0002",
    "\r\u0004\u0002==\u008f\u008f\u0004\u0002\'\'--\u0004\u0002]]hh\u0004",
    "\u0002\u0013\u0013\u008f\u008f\u0004\u0002\u000b\u000b\u0014\u0019\u0004",
    "\u0002\'(99\u0003\u0002\f\r\u0004\u0002\u000e\u000e\u001b\u001b\u0005",
    "\u0002JJii\u0083\u0083\b\u0002NNbbqqss\u0080\u0080\u0089\u0089\u0003",
    "\u0002?\u008a\u0002\u0dcc\u0002\u00e9\u0003\u0002\u0002\u0002\u0004",
    "\u0100\u0003\u0002\u0002\u0002\u0006\u0104\u0003\u0002\u0002\u0002\b",
    "\u0108\u0003\u0002\u0002\u0002\n\u010c\u0003\u0002\u0002\u0002\f\u0133",
    "\u0003\u0002\u0002\u0002\u000e\u013c\u0003\u0002\u0002\u0002\u0010\u013e",
    "\u0003\u0002\u0002\u0002\u0012\u0149\u0003\u0002\u0002\u0002\u0014\u0156",
    "\u0003\u0002\u0002\u0002\u0016\u0161\u0003\u0002\u0002\u0002\u0018\u0171",
    "\u0003\u0002\u0002\u0002\u001a\u0199\u0003\u0002\u0002\u0002\u001c\u019b",
    "\u0003\u0002\u0002\u0002\u001e\u019f\u0003\u0002\u0002\u0002 \u01c4",
    "\u0003\u0002\u0002\u0002\"\u01dc\u0003\u0002\u0002\u0002$\u01f7\u0003",
    "\u0002\u0002\u0002&\u0248\u0003\u0002\u0002\u0002(\u026d\u0003\u0002",
    "\u0002\u0002*\u028e\u0003\u0002\u0002\u0002,\u0291\u0003\u0002\u0002",
    "\u0002.\u02cb\u0003\u0002\u0002\u00020\u02cd\u0003\u0002\u0002\u0002",
    "2\u0302\u0003\u0002\u0002\u00024\u033f\u0003\u0002\u0002\u00026\u0341",
    "\u0003\u0002\u0002\u00028\u0377\u0003\u0002\u0002\u0002:\u03a5\u0003",
    "\u0002\u0002\u0002<\u03b0\u0003\u0002\u0002\u0002>\u03b5\u0003\u0002",
    "\u0002\u0002@\u03ba\u0003\u0002\u0002\u0002B\u03c5\u0003\u0002\u0002",
    "\u0002D\u03f3\u0003\u0002\u0002\u0002F\u03f5\u0003\u0002\u0002\u0002",
    "H\u0445\u0003\u0002\u0002\u0002J\u0460\u0003\u0002\u0002\u0002L\u048a",
    "\u0003\u0002\u0002\u0002N\u0499\u0003\u0002\u0002\u0002P\u04bf\u0003",
    "\u0002\u0002\u0002R\u04cb\u0003\u0002\u0002\u0002T\u04d4\u0003\u0002",
    "\u0002\u0002V\u04f2\u0003\u0002\u0002\u0002X\u04f8\u0003\u0002\u0002",
    "\u0002Z\u05c6\u0003\u0002\u0002\u0002\\\u05cc\u0003\u0002\u0002\u0002",
    "^\u05df\u0003\u0002\u0002\u0002`\u0638\u0003\u0002\u0002\u0002b\u0646",
    "\u0003\u0002\u0002\u0002d\u065c\u0003\u0002\u0002\u0002f\u066a\u0003",
    "\u0002\u0002\u0002h\u0685\u0003\u0002\u0002\u0002j\u0698\u0003\u0002",
    "\u0002\u0002l\u069a\u0003\u0002\u0002\u0002n\u06b5\u0003\u0002\u0002",
    "\u0002p\u06d5\u0003\u0002\u0002\u0002r\u06d7\u0003\u0002\u0002\u0002",
    "t\u07b5\u0003\u0002\u0002\u0002v\u07b7\u0003\u0002\u0002\u0002x\u07c1",
    "\u0003\u0002\u0002\u0002z\u07d0\u0003\u0002\u0002\u0002|\u07f8\u0003",
    "\u0002\u0002\u0002~\u080e\u0003\u0002\u0002\u0002\u0080\u0826\u0003",
    "\u0002\u0002\u0002\u0082\u0831\u0003\u0002\u0002\u0002\u0084\u0835\u0003",
    "\u0002\u0002\u0002\u0086\u0839\u0003\u0002\u0002\u0002\u0088\u0852\u0003",
    "\u0002\u0002\u0002\u008a\u0859\u0003\u0002\u0002\u0002\u008c\u0862\u0003",
    "\u0002\u0002\u0002\u008e\u0875\u0003\u0002\u0002\u0002\u0090\u0897\u0003",
    "\u0002\u0002\u0002\u0092\u08a5\u0003\u0002\u0002\u0002\u0094\u08b2\u0003",
    "\u0002\u0002\u0002\u0096\u08bf\u0003\u0002\u0002\u0002\u0098\u0929\u0003",
    "\u0002\u0002\u0002\u009a\u092b\u0003\u0002\u0002\u0002\u009c\u0938\u0003",
    "\u0002\u0002\u0002\u009e\u096f\u0003\u0002\u0002\u0002\u00a0\u097a\u0003",
    "\u0002\u0002\u0002\u00a2\u09a9\u0003\u0002\u0002\u0002\u00a4\u09ab\u0003",
    "\u0002\u0002\u0002\u00a6\u09c3\u0003\u0002\u0002\u0002\u00a8\u09ce\u0003",
    "\u0002\u0002\u0002\u00aa\u0a02\u0003\u0002\u0002\u0002\u00ac\u0a18\u0003",
    "\u0002\u0002\u0002\u00ae\u0a1a\u0003\u0002\u0002\u0002\u00b0\u0a25\u0003",
    "\u0002\u0002\u0002\u00b2\u0a30\u0003\u0002\u0002\u0002\u00b4\u0a90\u0003",
    "\u0002\u0002\u0002\u00b6\u0abf\u0003\u0002\u0002\u0002\u00b8\u0ac1\u0003",
    "\u0002\u0002\u0002\u00ba\u0ad9\u0003\u0002\u0002\u0002\u00bc\u0ae5\u0003",
    "\u0002\u0002\u0002\u00be\u0b1d\u0003\u0002\u0002\u0002\u00c0\u0b22\u0003",
    "\u0002\u0002\u0002\u00c2\u0b2c\u0003\u0002\u0002\u0002\u00c4\u0b2e\u0003",
    "\u0002\u0002\u0002\u00c6\u0b37\u0003\u0002\u0002\u0002\u00c8\u0b3c\u0003",
    "\u0002\u0002\u0002\u00ca\u0b3f\u0003\u0002\u0002\u0002\u00cc\u0b52\u0003",
    "\u0002\u0002\u0002\u00ce\u0b81\u0003\u0002\u0002\u0002\u00d0\u0bab\u0003",
    "\u0002\u0002\u0002\u00d2\u0bb8\u0003\u0002\u0002\u0002\u00d4\u0bbb\u0003",
    "\u0002\u0002\u0002\u00d6\u0c00\u0003\u0002\u0002\u0002\u00d8\u0c03\u0003",
    "\u0002\u0002\u0002\u00da\u0c1a\u0003\u0002\u0002\u0002\u00dc\u0c1c\u0003",
    "\u0002\u0002\u0002\u00de\u0c27\u0003\u0002\u0002\u0002\u00e0\u0c35\u0003",
    "\u0002\u0002\u0002\u00e2\u0c3a\u0003\u0002\u0002\u0002\u00e4\u0c3c\u0003",
    "\u0002\u0002\u0002\u00e6\u00e8\u0005\n\u0006\u0002\u00e7\u00e6\u0003",
    "\u0002\u0002\u0002\u00e8\u00eb\u0003\u0002\u0002\u0002\u00e9\u00e7\u0003",
    "\u0002\u0002\u0002\u00e9\u00ea\u0003\u0002\u0002\u0002\u00ea\u00fc\u0003",
    "\u0002\u0002\u0002\u00eb\u00e9\u0003\u0002\u0002\u0002\u00ec\u00f1\u0005",
    "\b\u0005\u0002\u00ed\u00f0\u0005\n\u0006\u0002\u00ee\u00f0\u0005\u001e",
    "\u0010\u0002\u00ef\u00ed\u0003\u0002\u0002\u0002\u00ef\u00ee\u0003\u0002",
    "\u0002\u0002\u00f0\u00f3\u0003\u0002\u0002\u0002\u00f1\u00ef\u0003\u0002",
    "\u0002\u0002\u00f1\u00f2\u0003\u0002\u0002\u0002\u00f2\u00fd\u0003\u0002",
    "\u0002\u0002\u00f3\u00f1\u0003\u0002\u0002\u0002\u00f4\u00f9\u0005\u001e",
    "\u0010\u0002\u00f5\u00f8\u0005\n\u0006\u0002\u00f6\u00f8\u0005\u001e",
    "\u0010\u0002\u00f7\u00f5\u0003\u0002\u0002\u0002\u00f7\u00f6\u0003\u0002",
    "\u0002\u0002\u00f8\u00fb\u0003\u0002\u0002\u0002\u00f9\u00f7\u0003\u0002",
    "\u0002\u0002\u00f9\u00fa\u0003\u0002\u0002\u0002\u00fa\u00fd\u0003\u0002",
    "\u0002\u0002\u00fb\u00f9\u0003\u0002\u0002\u0002\u00fc\u00ec\u0003\u0002",
    "\u0002\u0002\u00fc\u00f4\u0003\u0002\u0002\u0002\u00fc\u00fd\u0003\u0002",
    "\u0002\u0002\u00fd\u00fe\u0003\u0002\u0002\u0002\u00fe\u00ff\u0007\u0002",
    "\u0002\u0003\u00ff\u0003\u0003\u0002\u0002\u0002\u0100\u0101\u0005\u008e",
    "H\u0002\u0101\u0102\b\u0003\u0001\u0002\u0102\u0103\u0007\u0002\u0002",
    "\u0003\u0103\u0005\u0003\u0002\u0002\u0002\u0104\u0105\u0005\u00a6T",
    "\u0002\u0105\u0106\b\u0004\u0001\u0002\u0106\u0107\u0007\u0002\u0002",
    "\u0003\u0107\u0007\u0003\u0002\u0002\u0002\u0108\u0109\u0007t\u0002",
    "\u0002\u0109\u010a\u0005\u00dco\u0002\u010a\u010b\u0007\u0003\u0002",
    "\u0002\u010b\t\u0003\u0002\u0002\u0002\u010c\u012f\u0007\u0087\u0002",
    "\u0002\u010d\u010e\u00070\u0002\u0002\u010e\u010f\u0007\"\u0002\u0002",
    "\u010f\u0130\b\u0006\u0001\u0002\u0110\u0111\u0005\u000e\b\u0002\u0111",
    "\u0117\b\u0006\u0001\u0002\u0112\u0113\u0007)\u0002\u0002\u0113\u0114",
    "\u0005\u00e4s\u0002\u0114\u0115\b\u0006\u0001\u0002\u0115\u0118\u0003",
    "\u0002\u0002\u0002\u0116\u0118\b\u0006\u0001\u0002\u0117\u0112\u0003",
    "\u0002\u0002\u0002\u0117\u0116\u0003\u0002\u0002\u0002\u0118\u011c\u0003",
    "\u0002\u0002\u0002\u0119\u011a\u00070\u0002\u0002\u011a\u011b\u0007",
    "\"\u0002\u0002\u011b\u011d\b\u0006\u0001\u0002\u011c\u0119\u0003\u0002",
    "\u0002\u0002\u011c\u011d\u0003\u0002\u0002\u0002\u011d\u0130\u0003\u0002",
    "\u0002\u0002\u011e\u011f\b\u0006\u0001\u0002\u011f\u0120\u0007\u0004",
    "\u0002\u0002\u0120\u0126\u0005\f\u0007\u0002\u0121\u0122\u0007\u0005",
    "\u0002\u0002\u0122\u0123\b\u0006\u0001\u0002\u0123\u0125\u0005\f\u0007",
    "\u0002\u0124\u0121\u0003\u0002\u0002\u0002\u0125\u0128\u0003\u0002\u0002",
    "\u0002\u0126\u0124\u0003\u0002\u0002\u0002\u0126\u0127\u0003\u0002\u0002",
    "\u0002\u0127\u0129\u0003\u0002\u0002\u0002\u0128\u0126\u0003\u0002\u0002",
    "\u0002\u0129\u012d\u0007\u0006\u0002\u0002\u012a\u012b\u00070\u0002",
    "\u0002\u012b\u012c\u0007\"\u0002\u0002\u012c\u012e\b\u0006\u0001\u0002",
    "\u012d\u012a\u0003\u0002\u0002\u0002\u012d\u012e\u0003\u0002\u0002\u0002",
    "\u012e\u0130\u0003\u0002\u0002\u0002\u012f\u010d\u0003\u0002\u0002\u0002",
    "\u012f\u0110\u0003\u0002\u0002\u0002\u012f\u011e\u0003\u0002\u0002\u0002",
    "\u0130\u0131\u0003\u0002\u0002\u0002\u0131\u0132\u0007\u0003\u0002\u0002",
    "\u0132\u000b\u0003\u0002\u0002\u0002\u0133\u0134\u0005\u000e\b\u0002",
    "\u0134\u013a\b\u0007\u0001\u0002\u0135\u0136\u0007)\u0002\u0002\u0136",
    "\u0137\u0005\u00e4s\u0002\u0137\u0138\b\u0007\u0001\u0002\u0138\u013b",
    "\u0003\u0002\u0002\u0002\u0139\u013b\b\u0007\u0001\u0002\u013a\u0135",
    "\u0003\u0002\u0002\u0002\u013a\u0139\u0003\u0002\u0002\u0002\u013b\r",
    "\u0003\u0002\u0002\u0002\u013c\u013d\u0005\u00dco\u0002\u013d\u000f",
    "\u0003\u0002\u0002\u0002\u013e\u0140\u0005\u00dep\u0002\u013f\u0141",
    "\u0005\u00e0q\u0002\u0140\u013f\u0003\u0002\u0002\u0002\u0140\u0141",
    "\u0003\u0002\u0002\u0002\u0141\u0147\u0003\u0002\u0002\u0002\u0142\u0143",
    "\u0007\u0007\u0002\u0002\u0143\u0144\b\t\u0001\u0002\u0144\u0145\u0005",
    "\u00d2j\u0002\u0145\u0146\b\t\u0001\u0002\u0146\u0148\u0003\u0002\u0002",
    "\u0002\u0147\u0142\u0003\u0002\u0002\u0002\u0147\u0148\u0003\u0002\u0002",
    "\u0002\u0148\u0011\u0003\u0002\u0002\u0002\u0149\u014a\u0007\b\u0002",
    "\u0002\u014a\u014b\b\n\u0001\u0002\u014b\u0151\u0005\u0010\t\u0002\u014c",
    "\u014d\u0007\u0005\u0002\u0002\u014d\u014e\b\n\u0001\u0002\u014e\u0150",
    "\u0005\u0010\t\u0002\u014f\u014c\u0003\u0002\u0002\u0002\u0150\u0153",
    "\u0003\u0002\u0002\u0002\u0151\u014f\u0003\u0002\u0002\u0002\u0151\u0152",
    "\u0003\u0002\u0002\u0002\u0152\u0154\u0003\u0002\u0002\u0002\u0153\u0151",
    "\u0003\u0002\u0002\u0002\u0154\u0155\u0007\t\u0002\u0002\u0155\u0013",
    "\u0003\u0002\u0002\u0002\u0156\u015f\u0007\n\u0002\u0002\u0157\u0160",
    "\u0005\u0012\n\u0002\u0158\u0159\b\u000b\u0001\u0002\u0159\u015b\u0005",
    "\u00dep\u0002\u015a\u015c\u0005\u00e0q\u0002\u015b\u015a\u0003\u0002",
    "\u0002\u0002\u015b\u015c\u0003\u0002\u0002\u0002\u015c\u015d\u0003\u0002",
    "\u0002\u0002\u015d\u015e\b\u000b\u0001\u0002\u015e\u0160\u0003\u0002",
    "\u0002\u0002\u015f\u0157\u0003\u0002\u0002\u0002\u015f\u0158\u0003\u0002",
    "\u0002\u0002\u0160\u0015\u0003\u0002\u0002\u0002\u0161\u016f\u0007\n",
    "\u0002\u0002\u0162\u0170\u0005\u0012\n\u0002\u0163\u0164\b\f\u0001\u0002",
    "\u0164\u0166\u0005\u00dep\u0002\u0165\u0167\u0005\u00e0q\u0002\u0166",
    "\u0165\u0003\u0002\u0002\u0002\u0166\u0167\u0003\u0002\u0002\u0002\u0167",
    "\u016d\u0003\u0002\u0002\u0002\u0168\u0169\u0007\u0007\u0002\u0002\u0169",
    "\u016a\b\f\u0001\u0002\u016a\u016b\u0005\u00d2j\u0002\u016b\u016c\b",
    "\f\u0001\u0002\u016c\u016e\u0003\u0002\u0002\u0002\u016d\u0168\u0003",
    "\u0002\u0002\u0002\u016d\u016e\u0003\u0002\u0002\u0002\u016e\u0170\u0003",
    "\u0002\u0002\u0002\u016f\u0162\u0003\u0002\u0002\u0002\u016f\u0163\u0003",
    "\u0002\u0002\u0002\u0170\u0017\u0003\u0002\u0002\u0002\u0171\u0194\u0007",
    "\n\u0002\u0002\u0172\u0195\u0005\u0012\n\u0002\u0173\u0174\b\r\u0001",
    "\u0002\u0174\u0175\u0005\u00dep\u0002\u0175\u017b\b\r\u0001\u0002\u0176",
    "\u0177\u0007\u008d\u0002\u0002\u0177\u0178\b\r\u0001\u0002\u0178\u0179",
    "\u0005\u00e4s\u0002\u0179\u017a\b\r\u0001\u0002\u017a\u017c\u0003\u0002",
    "\u0002\u0002\u017b\u0176\u0003\u0002\u0002\u0002\u017b\u017c\u0003\u0002",
    "\u0002\u0002\u017c\u017d\u0003\u0002\u0002\u0002\u017d\u0192\b\r\u0001",
    "\u0002\u017e\u017f\u0007\u008e\u0002\u0002\u017f\u0190\b\r\u0001\u0002",
    "\u0180\u0181\u0005\u00d0i\u0002\u0181\u0182\b\r\u0001\u0002\u0182\u0191",
    "\u0003\u0002\u0002\u0002\u0183\u0185\b\r\u0001\u0002\u0184\u0186\u0007",
    "\n\u0002\u0002\u0185\u0184\u0003\u0002\u0002\u0002\u0185\u0186\u0003",
    "\u0002\u0002\u0002\u0186\u0187\u0003\u0002\u0002\u0002\u0187\u0188\u0005",
    "\u00dep\u0002\u0188\u018e\b\r\u0001\u0002\u0189\u018a\u0007\u008d\u0002",
    "\u0002\u018a\u018b\b\r\u0001\u0002\u018b\u018c\u0005\u00e4s\u0002\u018c",
    "\u018d\b\r\u0001\u0002\u018d\u018f\u0003\u0002\u0002\u0002\u018e\u0189",
    "\u0003\u0002\u0002\u0002\u018e\u018f\u0003\u0002\u0002\u0002\u018f\u0191",
    "\u0003\u0002\u0002\u0002\u0190\u0180\u0003\u0002\u0002\u0002\u0190\u0183",
    "\u0003\u0002\u0002\u0002\u0191\u0193\u0003\u0002\u0002\u0002\u0192\u017e",
    "\u0003\u0002\u0002\u0002\u0192\u0193\u0003\u0002\u0002\u0002\u0193\u0195",
    "\u0003\u0002\u0002\u0002\u0194\u0172\u0003\u0002\u0002\u0002\u0194\u0173",
    "\u0003\u0002\u0002\u0002\u0195\u0019\u0003\u0002\u0002\u0002\u0196\u019a",
    "\u0007\u0003\u0002\u0002\u0197\u0198\b\u000e\u0001\u0002\u0198\u019a",
    "\u0007\u0006\u0002\u0002\u0199\u0196\u0003\u0002\u0002\u0002\u0199\u0197",
    "\u0003\u0002\u0002\u0002\u019a\u001b\u0003\u0002\u0002\u0002\u019b\u019d",
    "\b\u000f\u0001\u0002\u019c\u019e\u0007\u0003\u0002\u0002\u019d\u019c",
    "\u0003\u0002\u0002\u0002\u019d\u019e\u0003\u0002\u0002\u0002\u019e\u001d",
    "\u0003\u0002\u0002\u0002\u019f\u01a3\b\u0010\u0001\u0002\u01a0\u01a2",
    "\u0005\u0016\f\u0002\u01a1\u01a0\u0003\u0002\u0002\u0002\u01a2\u01a5",
    "\u0003\u0002\u0002\u0002\u01a3\u01a1\u0003\u0002\u0002\u0002\u01a3\u01a4",
    "\u0003\u0002\u0002\u0002\u01a4\u01c0\u0003\u0002\u0002\u0002\u01a5\u01a3",
    "\u0003\u0002\u0002\u0002\u01a6\u01a8\u0007P\u0002\u0002\u01a7\u01a6",
    "\u0003\u0002\u0002\u0002\u01a7\u01a8\u0003\u0002\u0002\u0002\u01a8\u01b1",
    "\u0003\u0002\u0002\u0002\u01a9\u01b2\u0005 \u0011\u0002\u01aa\u01b2",
    "\u0005$\u0013\u0002\u01ab\u01b2\u0005:\u001e\u0002\u01ac\u01b2\u0005",
    "8\u001d\u0002\u01ad\u01b2\u0005@!\u0002\u01ae\u01b2\u0005l7\u0002\u01af",
    "\u01b2\u00056\u001c\u0002\u01b0\u01b2\u00054\u001b\u0002\u01b1\u01a9",
    "\u0003\u0002\u0002\u0002\u01b1\u01aa\u0003\u0002\u0002\u0002\u01b1\u01ab",
    "\u0003\u0002\u0002\u0002\u01b1\u01ac\u0003\u0002\u0002\u0002\u01b1\u01ad",
    "\u0003\u0002\u0002\u0002\u01b1\u01ae\u0003\u0002\u0002\u0002\u01b1\u01af",
    "\u0003\u0002\u0002\u0002\u01b1\u01b0\u0003\u0002\u0002\u0002\u01b2\u01c1",
    "\u0003\u0002\u0002\u0002\u01b3\u01b4\u0007\\\u0002\u0002\u01b4\u01bb",
    "\b\u0010\u0001\u0002\u01b5\u01bc\u0005\"\u0012\u0002\u01b6\u01bc\u0005",
    ",\u0017\u0002\u01b7\u01bc\u00050\u0019\u0002\u01b8\u01bc\u0005<\u001f",
    "\u0002\u01b9\u01bc\u0005> \u0002\u01ba\u01bc\u0005B\"\u0002\u01bb\u01b5",
    "\u0003\u0002\u0002\u0002\u01bb\u01b6\u0003\u0002\u0002\u0002\u01bb\u01b7",
    "\u0003\u0002\u0002\u0002\u01bb\u01b8\u0003\u0002\u0002\u0002\u01bb\u01b9",
    "\u0003\u0002\u0002\u0002\u01bb\u01ba\u0003\u0002\u0002\u0002\u01bc\u01c1",
    "\u0003\u0002\u0002\u0002\u01bd\u01be\u0007C\u0002\u0002\u01be\u01bf",
    "\b\u0010\u0001\u0002\u01bf\u01c1\u0005F$\u0002\u01c0\u01a7\u0003\u0002",
    "\u0002\u0002\u01c0\u01b3\u0003\u0002\u0002\u0002\u01c0\u01bd\u0003\u0002",
    "\u0002\u0002\u01c1\u001f\u0003\u0002\u0002\u0002\u01c2\u01c5\u0007L",
    "\u0002\u0002\u01c3\u01c5\u0007\u0081\u0002\u0002\u01c4\u01c2\u0003\u0002",
    "\u0002\u0002\u01c4\u01c3\u0003\u0002\u0002\u0002\u01c5\u01c6\u0003\u0002",
    "\u0002\u0002\u01c6\u01c7\u0005\u00dco\u0002\u01c7\u01cb\b\u0011\u0001",
    "\u0002\u01c8\u01ca\u0005\u0014\u000b\u0002\u01c9\u01c8\u0003\u0002\u0002",
    "\u0002\u01ca\u01cd\u0003\u0002\u0002\u0002\u01cb\u01c9\u0003\u0002\u0002",
    "\u0002\u01cb\u01cc\u0003\u0002\u0002\u0002\u01cc\u01d8\u0003\u0002\u0002",
    "\u0002\u01cd\u01cb\u0003\u0002\u0002\u0002\u01ce\u01d2\u0007\u0004\u0002",
    "\u0002\u01cf\u01d1\u0005\u001e\u0010\u0002\u01d0\u01cf\u0003\u0002\u0002",
    "\u0002\u01d1\u01d4\u0003\u0002\u0002\u0002\u01d2\u01d0\u0003\u0002\u0002",
    "\u0002\u01d2\u01d3\u0003\u0002\u0002\u0002\u01d3\u01d5\u0003\u0002\u0002",
    "\u0002\u01d4\u01d2\u0003\u0002\u0002\u0002\u01d5\u01d6\u0007\u0006\u0002",
    "\u0002\u01d6\u01d9\u0005\u001c\u000f\u0002\u01d7\u01d9\u0005\u001a\u000e",
    "\u0002\u01d8\u01ce\u0003\u0002\u0002\u0002\u01d8\u01d7\u0003\u0002\u0002",
    "\u0002\u01d9!\u0003\u0002\u0002\u0002\u01da\u01dd\u0007L\u0002\u0002",
    "\u01db\u01dd\u0007\u0081\u0002\u0002\u01dc\u01da\u0003\u0002\u0002\u0002",
    "\u01dc\u01db\u0003\u0002\u0002\u0002\u01dd\u01de\u0003\u0002\u0002\u0002",
    "\u01de\u01df\u0005\u00dco\u0002\u01df\u01e2\b\u0012\u0001\u0002\u01e0",
    "\u01e1\u0007=\u0002\u0002\u01e1\u01e3\b\u0012\u0001\u0002\u01e2\u01e0",
    "\u0003\u0002\u0002\u0002\u01e2\u01e3\u0003\u0002\u0002\u0002\u01e3\u01e4",
    "\u0003\u0002\u0002\u0002\u01e4\u01e8\b\u0012\u0001\u0002\u01e5\u01e7",
    "\u0005\u0016\f\u0002\u01e6\u01e5\u0003\u0002\u0002\u0002\u01e7\u01ea",
    "\u0003\u0002\u0002\u0002\u01e8\u01e6\u0003\u0002\u0002\u0002\u01e8\u01e9",
    "\u0003\u0002\u0002\u0002\u01e9\u01f5\u0003\u0002\u0002\u0002\u01ea\u01e8",
    "\u0003\u0002\u0002\u0002\u01eb\u01ef\u0007\u0004\u0002\u0002\u01ec\u01ee",
    "\u0005\u001e\u0010\u0002\u01ed\u01ec\u0003\u0002\u0002\u0002\u01ee\u01f1",
    "\u0003\u0002\u0002\u0002\u01ef\u01ed\u0003\u0002\u0002\u0002\u01ef\u01f0",
    "\u0003\u0002\u0002\u0002\u01f0\u01f2\u0003\u0002\u0002\u0002\u01f1\u01ef",
    "\u0003\u0002\u0002\u0002\u01f2\u01f3\u0007\u0006\u0002\u0002\u01f3\u01f6",
    "\u0005\u001c\u000f\u0002\u01f4\u01f6\u0005\u001a\u000e\u0002\u01f5\u01eb",
    "\u0003\u0002\u0002\u0002\u01f5\u01f4\u0003\u0002\u0002\u0002\u01f6#",
    "\u0003\u0002\u0002\u0002\u01f7\u01f8\u0007U\u0002\u0002\u01f8\u01f9",
    "\u0005\u00dco\u0002\u01f9\u01fd\b\u0013\u0001\u0002\u01fa\u01fc\u0005",
    "\u0014\u000b\u0002\u01fb\u01fa\u0003\u0002\u0002\u0002\u01fc\u01ff\u0003",
    "\u0002\u0002\u0002\u01fd\u01fb\u0003\u0002\u0002\u0002\u01fd\u01fe\u0003",
    "\u0002\u0002\u0002\u01fe\u0201\u0003\u0002\u0002\u0002\u01ff\u01fd\u0003",
    "\u0002\u0002\u0002\u0200\u0202\u0005d3\u0002\u0201\u0200\u0003\u0002",
    "\u0002\u0002\u0201\u0202\u0003\u0002\u0002\u0002\u0202\u0246\u0003\u0002",
    "\u0002\u0002\u0203\u0204\u0007\u0007\u0002\u0002\u0204\u020a\u0005n",
    "8\u0002\u0205\u0206\u0007\u0005\u0002\u0002\u0206\u0207\b\u0013\u0001",
    "\u0002\u0207\u0209\u0005n8\u0002\u0208\u0205\u0003\u0002\u0002\u0002",
    "\u0209\u020c\u0003\u0002\u0002\u0002\u020a\u0208\u0003\u0002\u0002\u0002",
    "\u020a\u020b\u0003\u0002\u0002\u0002\u020b\u020e\u0003\u0002\u0002\u0002",
    "\u020c\u020a\u0003\u0002\u0002\u0002\u020d\u0203\u0003\u0002\u0002\u0002",
    "\u020d\u020e\u0003\u0002\u0002\u0002\u020e\u020f\u0003\u0002\u0002\u0002",
    "\u020f\u0210\u0007\u0004\u0002\u0002\u0210\u0214\b\u0013\u0001\u0002",
    "\u0211\u0213\u0005R*\u0002\u0212\u0211\u0003\u0002\u0002\u0002\u0213",
    "\u0216\u0003\u0002\u0002\u0002\u0214\u0212\u0003\u0002\u0002\u0002\u0214",
    "\u0215\u0003\u0002\u0002\u0002\u0215\u0217\u0003\u0002\u0002\u0002\u0216",
    "\u0214\u0003\u0002\u0002\u0002\u0217\u0221\u0007\u0006\u0002\u0002\u0218",
    "\u0219\u0007A\u0002\u0002\u0219\u021d\u0007\u0004\u0002\u0002\u021a",
    "\u021c\u00052\u001a\u0002\u021b\u021a\u0003\u0002\u0002\u0002\u021c",
    "\u021f\u0003\u0002\u0002\u0002\u021d\u021b\u0003\u0002\u0002\u0002\u021d",
    "\u021e\u0003\u0002\u0002\u0002\u021e\u0220\u0003\u0002\u0002\u0002\u021f",
    "\u021d\u0003\u0002\u0002\u0002\u0220\u0222\u0007\u0006\u0002\u0002\u0221",
    "\u0218\u0003\u0002\u0002\u0002\u0221\u0222\u0003\u0002\u0002\u0002\u0222",
    "\u0223\u0003\u0002\u0002\u0002\u0223\u0247\u0005\u001c\u000f\u0002\u0224",
    "\u0244\u0007)\u0002\u0002\u0225\u0226\u0005\u008eH\u0002\u0226\u0232",
    "\b\u0013\u0001\u0002\u0227\u0228\u0007A\u0002\u0002\u0228\u022c\u0007",
    "\u0004\u0002\u0002\u0229\u022b\u00052\u001a\u0002\u022a\u0229\u0003",
    "\u0002\u0002\u0002\u022b\u022e\u0003\u0002\u0002\u0002\u022c\u022a\u0003",
    "\u0002\u0002\u0002\u022c\u022d\u0003\u0002\u0002\u0002\u022d\u022f\u0003",
    "\u0002\u0002\u0002\u022e\u022c\u0003\u0002\u0002\u0002\u022f\u0230\u0007",
    "\u0006\u0002\u0002\u0230\u0233\u0005\u001c\u000f\u0002\u0231\u0233\u0005",
    "\u001a\u000e\u0002\u0232\u0227\u0003\u0002\u0002\u0002\u0232\u0231\u0003",
    "\u0002\u0002\u0002\u0233\u0245\u0003\u0002\u0002\u0002\u0234\u0235\u0005",
    "&\u0014\u0002\u0235\u0236\b\u0013\u0001\u0002\u0236\u0240\u0005(\u0015",
    "\u0002\u0237\u0238\u0007A\u0002\u0002\u0238\u023c\u0007\u0004\u0002",
    "\u0002\u0239\u023b\u00052\u001a\u0002\u023a\u0239\u0003\u0002\u0002",
    "\u0002\u023b\u023e\u0003\u0002\u0002\u0002\u023c\u023a\u0003\u0002\u0002",
    "\u0002\u023c\u023d\u0003\u0002\u0002\u0002\u023d\u023f\u0003\u0002\u0002",
    "\u0002\u023e\u023c\u0003\u0002\u0002\u0002\u023f\u0241\u0007\u0006\u0002",
    "\u0002\u0240\u0237\u0003\u0002\u0002\u0002\u0240\u0241\u0003\u0002\u0002",
    "\u0002\u0241\u0242\u0003\u0002\u0002\u0002\u0242\u0243\u0005\u001c\u000f",
    "\u0002\u0243\u0245\u0003\u0002\u0002\u0002\u0244\u0225\u0003\u0002\u0002",
    "\u0002\u0244\u0234\u0003\u0002\u0002\u0002\u0245\u0247\u0003\u0002\u0002",
    "\u0002\u0246\u020d\u0003\u0002\u0002\u0002\u0246\u0224\u0003\u0002\u0002",
    "\u0002\u0247%\u0003\u0002\u0002\u0002\u0248\u0249\u0007|\u0002\u0002",
    "\u0249\u024a\u00077\u0002\u0002\u024a\u024b\b\u0014\u0001\u0002\u024b",
    "\u024f\u0005\u00a4S\u0002\u024c\u024d\u0007\u0007\u0002\u0002\u024d",
    "\u024e\b\u0014\u0001\u0002\u024e\u0250\u0005\u00a4S\u0002\u024f\u024c",
    "\u0003\u0002\u0002\u0002\u024f\u0250\u0003\u0002\u0002\u0002\u0250\u0255",
    "\u0003\u0002\u0002\u0002\u0251\u0252\u0007)\u0002\u0002\u0252\u0253",
    "\u0005\u00e4s\u0002\u0253\u0254\b\u0014\u0001\u0002\u0254\u0256\u0003",
    "\u0002\u0002\u0002\u0255\u0251\u0003\u0002\u0002\u0002\u0255\u0256\u0003",
    "\u0002\u0002\u0002\u0256\u0258\u0003\u0002\u0002\u0002\u0257\u0259\u0005",
    "\\/\u0002\u0258\u0257\u0003\u0002\u0002\u0002\u0258\u0259\u0003\u0002",
    "\u0002\u0002\u0259\u0267\u0003\u0002\u0002\u0002\u025a\u025b\u0007[",
    "\u0002\u0002\u025b\u025c\u0007\u0004\u0002\u0002\u025c\u0262\u0005*",
    "\u0016\u0002\u025d\u025e\u0007\u0005\u0002\u0002\u025e\u025f\b\u0014",
    "\u0001\u0002\u025f\u0261\u0005*\u0016\u0002\u0260\u025d\u0003\u0002",
    "\u0002\u0002\u0261\u0264\u0003\u0002\u0002\u0002\u0262\u0260\u0003\u0002",
    "\u0002\u0002\u0262\u0263\u0003\u0002\u0002\u0002\u0263\u0265\u0003\u0002",
    "\u0002\u0002\u0264\u0262\u0003\u0002\u0002\u0002\u0265\u0266\u0007\u0006",
    "\u0002\u0002\u0266\u0268\u0003\u0002\u0002\u0002\u0267\u025a\u0003\u0002",
    "\u0002\u0002\u0267\u0268\u0003\u0002\u0002\u0002\u0268\'\u0003\u0002",
    "\u0002\u0002\u0269\u026a\u0007<\u0002\u0002\u026a\u026b\u0005\u00a6",
    "T\u0002\u026b\u026c\b\u0015\u0001\u0002\u026c\u026e\u0003\u0002\u0002",
    "\u0002\u026d\u0269\u0003\u0002\u0002\u0002\u026d\u026e\u0003\u0002\u0002",
    "\u0002\u026e\u027c\u0003\u0002\u0002\u0002\u026f\u0270\u0007`\u0002",
    "\u0002\u0270\u0271\u0007*\u0002\u0002\u0271\u0272\u0005\u00aeX\u0002",
    "\u0272\u0279\b\u0015\u0001\u0002\u0273\u0274\u0007\u0005\u0002\u0002",
    "\u0274\u0275\u0005\u00aeX\u0002\u0275\u0276\b\u0015\u0001\u0002\u0276",
    "\u0278\u0003\u0002\u0002\u0002\u0277\u0273\u0003\u0002\u0002\u0002\u0278",
    "\u027b\u0003\u0002\u0002\u0002\u0279\u0277\u0003\u0002\u0002\u0002\u0279",
    "\u027a\u0003\u0002\u0002\u0002\u027a\u027d\u0003\u0002\u0002\u0002\u027b",
    "\u0279\u0003\u0002\u0002\u0002\u027c\u026f\u0003\u0002\u0002\u0002\u027c",
    "\u027d\u0003\u0002\u0002\u0002\u027d\u0282\u0003\u0002\u0002\u0002\u027e",
    "\u027f\u0007a\u0002\u0002\u027f\u0280\u0005\u00a6T\u0002\u0280\u0281",
    "\b\u0015\u0001\u0002\u0281\u0283\u0003\u0002\u0002\u0002\u0282\u027e",
    "\u0003\u0002\u0002\u0002\u0282\u0283\u0003\u0002\u0002\u0002\u0283\u0287",
    "\u0003\u0002\u0002\u0002\u0284\u0285\u0005\u0090I\u0002\u0285\u0286",
    "\b\u0015\u0001\u0002\u0286\u0288\u0003\u0002\u0002\u0002\u0287\u0284",
    "\u0003\u0002\u0002\u0002\u0287\u0288\u0003\u0002\u0002\u0002\u0288\u028c",
    "\u0003\u0002\u0002\u0002\u0289\u028a\u0005\u0092J\u0002\u028a\u028b",
    "\b\u0015\u0001\u0002\u028b\u028d\u0003\u0002\u0002\u0002\u028c\u0289",
    "\u0003\u0002\u0002\u0002\u028c\u028d\u0003\u0002\u0002\u0002\u028d)",
    "\u0003\u0002\u0002\u0002\u028e\u028f\u0005\u00e4s\u0002\u028f\u0290",
    "\b\u0016\u0001\u0002\u0290+\u0003\u0002\u0002\u0002\u0291\u0292\u0007",
    "U\u0002\u0002\u0292\u0293\u0005\u00dco\u0002\u0293\u02aa\b\u0017\u0001",
    "\u0002\u0294\u0295\u0007=\u0002\u0002\u0295\u0299\b\u0017\u0001\u0002",
    "\u0296\u0298\u0005\u0016\f\u0002\u0297\u0296\u0003\u0002\u0002\u0002",
    "\u0298\u029b\u0003\u0002\u0002\u0002\u0299\u0297\u0003\u0002\u0002\u0002",
    "\u0299\u029a\u0003\u0002\u0002\u0002\u029a\u02a0\u0003\u0002\u0002\u0002",
    "\u029b\u0299\u0003\u0002\u0002\u0002\u029c\u029d\u0005n8\u0002\u029d",
    "\u029e\u0005\u001a\u000e\u0002\u029e\u02a1\u0003\u0002\u0002\u0002\u029f",
    "\u02a1\u0005.\u0018\u0002\u02a0\u029c\u0003\u0002\u0002\u0002\u02a0",
    "\u029f\u0003\u0002\u0002\u0002\u02a1\u02ab\u0003\u0002\u0002\u0002\u02a2",
    "\u02a6\b\u0017\u0001\u0002\u02a3\u02a5\u0005\u0016\f\u0002\u02a4\u02a3",
    "\u0003\u0002\u0002\u0002\u02a5\u02a8\u0003\u0002\u0002\u0002\u02a6\u02a4",
    "\u0003\u0002\u0002\u0002\u02a6\u02a7\u0003\u0002\u0002\u0002\u02a7\u02a9",
    "\u0003\u0002\u0002\u0002\u02a8\u02a6\u0003\u0002\u0002\u0002\u02a9\u02ab",
    "\u0005.\u0018\u0002\u02aa\u0294\u0003\u0002\u0002\u0002\u02aa\u02a2",
    "\u0003\u0002\u0002\u0002\u02ab-\u0003\u0002\u0002\u0002\u02ac\u02b0",
    "\u0007\u0004\u0002\u0002\u02ad\u02af\u0005P)\u0002\u02ae\u02ad\u0003",
    "\u0002\u0002\u0002\u02af\u02b2\u0003\u0002\u0002\u0002\u02b0\u02ae\u0003",
    "\u0002\u0002\u0002\u02b0\u02b1\u0003\u0002\u0002\u0002\u02b1\u02b3\u0003",
    "\u0002\u0002\u0002\u02b2\u02b0\u0003\u0002\u0002\u0002\u02b3\u02bd\u0007",
    "\u0006\u0002\u0002\u02b4\u02b5\u0007A\u0002\u0002\u02b5\u02b9\u0007",
    "\u0004\u0002\u0002\u02b6\u02b8\u00052\u001a\u0002\u02b7\u02b6\u0003",
    "\u0002\u0002\u0002\u02b8\u02bb\u0003\u0002\u0002\u0002\u02b9\u02b7\u0003",
    "\u0002\u0002\u0002\u02b9\u02ba\u0003\u0002\u0002\u0002\u02ba\u02bc\u0003",
    "\u0002\u0002\u0002\u02bb\u02b9\u0003\u0002\u0002\u0002\u02bc\u02be\u0007",
    "\u0006\u0002\u0002\u02bd\u02b4\u0003\u0002\u0002\u0002\u02bd\u02be\u0003",
    "\u0002\u0002\u0002\u02be\u02bf\u0003\u0002\u0002\u0002\u02bf\u02cc\u0005",
    "\u001c\u000f\u0002\u02c0\u02c1\u0007A\u0002\u0002\u02c1\u02c5\u0007",
    "\u0004\u0002\u0002\u02c2\u02c4\u00052\u001a\u0002\u02c3\u02c2\u0003",
    "\u0002\u0002\u0002\u02c4\u02c7\u0003\u0002\u0002\u0002\u02c5\u02c3\u0003",
    "\u0002\u0002\u0002\u02c5\u02c6\u0003\u0002\u0002\u0002\u02c6\u02c8\u0003",
    "\u0002\u0002\u0002\u02c7\u02c5\u0003\u0002\u0002\u0002\u02c8\u02c9\u0007",
    "\u0006\u0002\u0002\u02c9\u02cc\u0005\u001c\u000f\u0002\u02ca\u02cc\u0005",
    "\u001a\u000e\u0002\u02cb\u02ac\u0003\u0002\u0002\u0002\u02cb\u02c0\u0003",
    "\u0002\u0002\u0002\u02cb\u02ca\u0003\u0002\u0002\u0002\u02cc/\u0003",
    "\u0002\u0002\u0002\u02cd\u02ce\u0007|\u0002\u0002\u02ce\u02cf\u0005",
    "\u00dco\u0002\u02cf\u02d2\b\u0019\u0001\u0002\u02d0\u02d1\u0007=\u0002",
    "\u0002\u02d1\u02d3\b\u0019\u0001\u0002\u02d2\u02d0\u0003\u0002\u0002",
    "\u0002\u02d2\u02d3\u0003\u0002\u0002\u0002\u02d3\u02d4\u0003\u0002\u0002",
    "\u0002\u02d4\u02d8\b\u0019\u0001\u0002\u02d5\u02d7\u0005\u0016\f\u0002",
    "\u02d6\u02d5\u0003\u0002\u0002\u0002\u02d7\u02da\u0003\u0002\u0002\u0002",
    "\u02d8\u02d6\u0003\u0002\u0002\u0002\u02d8\u02d9\u0003\u0002\u0002\u0002",
    "\u02d9\u0300\u0003\u0002\u0002\u0002\u02da\u02d8\u0003\u0002\u0002\u0002",
    "\u02db\u02dc\u0007\u0004\u0002\u0002\u02dc\u02e6\b\u0019\u0001\u0002",
    "\u02dd\u02e3\u0005^0\u0002\u02de\u02df\u0007\u0005\u0002\u0002\u02df",
    "\u02e0\b\u0019\u0001\u0002\u02e0\u02e2\u0005^0\u0002\u02e1\u02de\u0003",
    "\u0002\u0002\u0002\u02e2\u02e5\u0003\u0002\u0002\u0002\u02e3\u02e1\u0003",
    "\u0002\u0002\u0002\u02e3\u02e4\u0003\u0002\u0002\u0002\u02e4\u02e7\u0003",
    "\u0002\u0002\u0002\u02e5\u02e3\u0003\u0002\u0002\u0002\u02e6\u02dd\u0003",
    "\u0002\u0002\u0002\u02e6\u02e7\u0003\u0002\u0002\u0002\u02e7\u02e8\u0003",
    "\u0002\u0002\u0002\u02e8\u02f2\u0007\u0006\u0002\u0002\u02e9\u02ea\u0007",
    "A\u0002\u0002\u02ea\u02ee\u0007\u0004\u0002\u0002\u02eb\u02ed\u0005",
    "2\u001a\u0002\u02ec\u02eb\u0003\u0002\u0002\u0002\u02ed\u02f0\u0003",
    "\u0002\u0002\u0002\u02ee\u02ec\u0003\u0002\u0002\u0002\u02ee\u02ef\u0003",
    "\u0002\u0002\u0002\u02ef\u02f1\u0003\u0002\u0002\u0002\u02f0\u02ee\u0003",
    "\u0002\u0002\u0002\u02f1\u02f3\u0007\u0006\u0002\u0002\u02f2\u02e9\u0003",
    "\u0002\u0002\u0002\u02f2\u02f3\u0003\u0002\u0002\u0002\u02f3\u02f4\u0003",
    "\u0002\u0002\u0002\u02f4\u0301\u0005\u001c\u000f\u0002\u02f5\u02f6\u0007",
    "A\u0002\u0002\u02f6\u02fa\u0007\u0004\u0002\u0002\u02f7\u02f9\u0005",
    "2\u001a\u0002\u02f8\u02f7\u0003\u0002\u0002\u0002\u02f9\u02fc\u0003",
    "\u0002\u0002\u0002\u02fa\u02f8\u0003\u0002\u0002\u0002\u02fa\u02fb\u0003",
    "\u0002\u0002\u0002\u02fb\u02fd\u0003\u0002\u0002\u0002\u02fc\u02fa\u0003",
    "\u0002\u0002\u0002\u02fd\u02fe\u0007\u0006\u0002\u0002\u02fe\u0301\u0005",
    "\u001c\u000f\u0002\u02ff\u0301\u0005\u001a\u000e\u0002\u0300\u02db\u0003",
    "\u0002\u0002\u0002\u0300\u02f5\u0003\u0002\u0002\u0002\u0300\u02ff\u0003",
    "\u0002\u0002\u0002\u03011\u0003\u0002\u0002\u0002\u0302\u0306\b\u001a",
    "\u0001\u0002\u0303\u0305\u0005\u0016\f\u0002\u0304\u0303\u0003\u0002",
    "\u0002\u0002\u0305\u0308\u0003\u0002\u0002\u0002\u0306\u0304\u0003\u0002",
    "\u0002\u0002\u0306\u0307\u0003\u0002\u0002\u0002\u0307\u0323\u0003\u0002",
    "\u0002\u0002\u0308\u0306\u0003\u0002\u0002\u0002\u0309\u030a\u0007@",
    "\u0002\u0002\u030a\u030b\u0005\u00e4s\u0002\u030b\u030f\b\u001a\u0001",
    "\u0002\u030c\u030e\u0005\u0014\u000b\u0002\u030d\u030c\u0003\u0002\u0002",
    "\u0002\u030e\u0311\u0003\u0002\u0002\u0002\u030f\u030d\u0003\u0002\u0002",
    "\u0002\u030f\u0310\u0003\u0002\u0002\u0002\u0310\u0312\u0003\u0002\u0002",
    "\u0002\u0311\u030f\u0003\u0002\u0002\u0002\u0312\u0315\u0005`1\u0002",
    "\u0313\u0316\u0005r:\u0002\u0314\u0316\u0005\u001a\u000e\u0002\u0315",
    "\u0313\u0003\u0002\u0002\u0002\u0315\u0314\u0003\u0002\u0002\u0002\u0316",
    "\u0324\u0003\u0002\u0002\u0002\u0317\u0318\u0007_\u0002\u0002\u0318",
    "\u0319\u0005\u00e4s\u0002\u0319\u031d\b\u001a\u0001\u0002\u031a\u031c",
    "\u0005\u0014\u000b\u0002\u031b\u031a\u0003\u0002\u0002\u0002\u031c\u031f",
    "\u0003\u0002\u0002\u0002\u031d\u031b\u0003\u0002\u0002\u0002\u031d\u031e",
    "\u0003\u0002\u0002\u0002\u031e\u0320\u0003\u0002\u0002\u0002\u031f\u031d",
    "\u0003\u0002\u0002\u0002\u0320\u0321\u0005`1\u0002\u0321\u0322\u0005",
    "r:\u0002\u0322\u0324\u0003\u0002\u0002\u0002\u0323\u0309\u0003\u0002",
    "\u0002\u0002\u0323\u0317\u0003\u0002\u0002\u0002\u03243\u0003\u0002",
    "\u0002\u0002\u0325\u0326\u0007@\u0002\u0002\u0326\u0327\u0005\u00dc",
    "o\u0002\u0327\u032b\b\u001b\u0001\u0002\u0328\u032a\u0005\u0014\u000b",
    "\u0002\u0329\u0328\u0003\u0002\u0002\u0002\u032a\u032d\u0003\u0002\u0002",
    "\u0002\u032b\u0329\u0003\u0002\u0002\u0002\u032b\u032c\u0003\u0002\u0002",
    "\u0002\u032c\u032e\u0003\u0002\u0002\u0002\u032d\u032b\u0003\u0002\u0002",
    "\u0002\u032e\u0331\u0005`1\u0002\u032f\u0332\u0005r:\u0002\u0330\u0332",
    "\u0005\u001a\u000e\u0002\u0331\u032f\u0003\u0002\u0002\u0002\u0331\u0330",
    "\u0003\u0002\u0002\u0002\u0332\u0340\u0003\u0002\u0002\u0002\u0333\u0334",
    "\u0007_\u0002\u0002\u0334\u0335\u0005\u00dco\u0002\u0335\u0339\b\u001b",
    "\u0001\u0002\u0336\u0338\u0005\u0014\u000b\u0002\u0337\u0336\u0003\u0002",
    "\u0002\u0002\u0338\u033b\u0003\u0002\u0002\u0002\u0339\u0337\u0003\u0002",
    "\u0002\u0002\u0339\u033a\u0003\u0002\u0002\u0002\u033a\u033c\u0003\u0002",
    "\u0002\u0002\u033b\u0339\u0003\u0002\u0002\u0002\u033c\u033d\u0005`",
    "1\u0002\u033d\u033e\u0005r:\u0002\u033e\u0340\u0003\u0002\u0002\u0002",
    "\u033f\u0325\u0003\u0002\u0002\u0002\u033f\u0333\u0003\u0002\u0002\u0002",
    "\u03405\u0003\u0002\u0002\u0002\u0341\u0342\u0007W\u0002\u0002\u0342",
    "\u0343\u0005\u00dco\u0002\u0343\u0347\b\u001c\u0001\u0002\u0344\u0346",
    "\u0005\u0014\u000b\u0002\u0345\u0344\u0003\u0002\u0002\u0002\u0346\u0349",
    "\u0003\u0002\u0002\u0002\u0347\u0345\u0003\u0002\u0002\u0002\u0347\u0348",
    "\u0003\u0002\u0002\u0002\u0348\u036f\u0003\u0002\u0002\u0002\u0349\u0347",
    "\u0003\u0002\u0002\u0002\u034a\u034b\u0005v<\u0002\u034b\u034c\u0005",
    "\u001c\u000f\u0002\u034c\u0370\u0003\u0002\u0002\u0002\u034d\u036d\u0007",
    "\u0007\u0002\u0002\u034e\u034f\b\u001c\u0001\u0002\u034f\u0364\u0005",
    "\u00dco\u0002\u0350\u0356\b\u001c\u0001\u0002\u0351\u0352\u0007\u0005",
    "\u0002\u0002\u0352\u0353\b\u001c\u0001\u0002\u0353\u0355\u0005n8\u0002",
    "\u0354\u0351\u0003\u0002\u0002\u0002\u0355\u0358\u0003\u0002\u0002\u0002",
    "\u0356\u0354\u0003\u0002\u0002\u0002\u0356\u0357\u0003\u0002\u0002\u0002",
    "\u0357\u0359\u0003\u0002\u0002\u0002\u0358\u0356\u0003\u0002\u0002\u0002",
    "\u0359\u035a\u0005v<\u0002\u035a\u035b\u0005\u001c\u000f\u0002\u035b",
    "\u0365\u0003\u0002\u0002\u0002\u035c\u0360\b\u001c\u0001\u0002\u035d",
    "\u035f\u0005\u0016\f\u0002\u035e\u035d\u0003\u0002\u0002\u0002\u035f",
    "\u0362\u0003\u0002\u0002\u0002\u0360\u035e\u0003\u0002\u0002\u0002\u0360",
    "\u0361\u0003\u0002\u0002\u0002\u0361\u0363\u0003\u0002\u0002\u0002\u0362",
    "\u0360\u0003\u0002\u0002\u0002\u0363\u0365\u0005\u001a\u000e\u0002\u0364",
    "\u0350\u0003\u0002\u0002\u0002\u0364\u035c\u0003\u0002\u0002\u0002\u0365",
    "\u036e\u0003\u0002\u0002\u0002\u0366\u0367\u0005v<\u0002\u0367\u0368",
    "\u0005\u001c\u000f\u0002\u0368\u036e\u0003\u0002\u0002\u0002\u0369\u036a",
    "\u0005&\u0014\u0002\u036a\u036b\b\u001c\u0001\u0002\u036b\u036c\u0005",
    "\u001c\u000f\u0002\u036c\u036e\u0003\u0002\u0002\u0002\u036d\u034e\u0003",
    "\u0002\u0002\u0002\u036d\u0366\u0003\u0002\u0002\u0002\u036d\u0369\u0003",
    "\u0002\u0002\u0002\u036e\u0370\u0003\u0002\u0002\u0002\u036f\u034a\u0003",
    "\u0002\u0002\u0002\u036f\u034d\u0003\u0002\u0002\u0002\u03707\u0003",
    "\u0002\u0002\u0002\u0371\u0378\u0007G\u0002\u0002\u0372\u0375\u0007",
    "?\u0002\u0002\u0373\u0375\u0007\u008f\u0002\u0002\u0374\u0372\u0003",
    "\u0002\u0002\u0002\u0374\u0373\u0003\u0002\u0002\u0002\u0375\u0376\u0003",
    "\u0002\u0002\u0002\u0376\u0378\u0007U\u0002\u0002\u0377\u0371\u0003",
    "\u0002\u0002\u0002\u0377\u0374\u0003\u0002\u0002\u0002\u0378\u0379\u0003",
    "\u0002\u0002\u0002\u0379\u037a\u0005\u00dco\u0002\u037a\u037e\b\u001d",
    "\u0001\u0002\u037b\u037d\u0005\u0014\u000b\u0002\u037c\u037b\u0003\u0002",
    "\u0002\u0002\u037d\u0380\u0003\u0002\u0002\u0002\u037e\u037c\u0003\u0002",
    "\u0002\u0002\u037e\u037f\u0003\u0002\u0002\u0002\u037f\u038d\u0003\u0002",
    "\u0002\u0002\u0380\u037e\u0003\u0002\u0002\u0002\u0381\u038b\u0007\u0007",
    "\u0002\u0002\u0382\u0388\u0005n8\u0002\u0383\u0384\u0007\u0005\u0002",
    "\u0002\u0384\u0385\b\u001d\u0001\u0002\u0385\u0387\u0005n8\u0002\u0386",
    "\u0383\u0003\u0002\u0002\u0002\u0387\u038a\u0003\u0002\u0002\u0002\u0388",
    "\u0386\u0003\u0002\u0002\u0002\u0388\u0389\u0003\u0002\u0002\u0002\u0389",
    "\u038c\u0003\u0002\u0002\u0002\u038a\u0388\u0003\u0002\u0002\u0002\u038b",
    "\u0382\u0003\u0002\u0002\u0002\u038b\u038c\u0003\u0002\u0002\u0002\u038c",
    "\u038e\u0003\u0002\u0002\u0002\u038d\u0381\u0003\u0002\u0002\u0002\u038d",
    "\u038e\u0003\u0002\u0002\u0002\u038e\u038f\u0003\u0002\u0002\u0002\u038f",
    "\u0390\u0007\u0004\u0002\u0002\u0390\u0394\b\u001d\u0001\u0002\u0391",
    "\u0393\u0005R*\u0002\u0392\u0391\u0003\u0002\u0002\u0002\u0393\u0396",
    "\u0003\u0002\u0002\u0002\u0394\u0392\u0003\u0002\u0002\u0002\u0394\u0395",
    "\u0003\u0002\u0002\u0002\u0395\u0397\u0003\u0002\u0002\u0002\u0396\u0394",
    "\u0003\u0002\u0002\u0002\u0397\u03a1\u0007\u0006\u0002\u0002\u0398\u0399",
    "\u0007A\u0002\u0002\u0399\u039d\u0007\u0004\u0002\u0002\u039a\u039c",
    "\u00052\u001a\u0002\u039b\u039a\u0003\u0002\u0002\u0002\u039c\u039f",
    "\u0003\u0002\u0002\u0002\u039d\u039b\u0003\u0002\u0002\u0002\u039d\u039e",
    "\u0003\u0002\u0002\u0002\u039e\u03a0\u0003\u0002\u0002\u0002\u039f\u039d",
    "\u0003\u0002\u0002\u0002\u03a0\u03a2\u0007\u0006\u0002\u0002\u03a1\u0398",
    "\u0003\u0002\u0002\u0002\u03a1\u03a2\u0003\u0002\u0002\u0002\u03a2\u03a3",
    "\u0003\u0002\u0002\u0002\u03a3\u03a4\u0005\u001c\u000f\u0002\u03a49",
    "\u0003\u0002\u0002\u0002\u03a5\u03a6\u0007\u0085\u0002\u0002\u03a6\u03a7",
    "\u0005\u00dco\u0002\u03a7\u03ab\b\u001e\u0001\u0002\u03a8\u03aa\u0005",
    "\u0014\u000b\u0002\u03a9\u03a8\u0003\u0002\u0002\u0002\u03aa\u03ad\u0003",
    "\u0002\u0002\u0002\u03ab\u03a9\u0003\u0002\u0002\u0002\u03ab\u03ac\u0003",
    "\u0002\u0002\u0002\u03ac\u03ae\u0003\u0002\u0002\u0002\u03ad\u03ab\u0003",
    "\u0002\u0002\u0002\u03ae\u03af\u0005t;\u0002\u03af;\u0003\u0002\u0002",
    "\u0002\u03b0\u03b1\u0007\u0085\u0002\u0002\u03b1\u03b2\u0005\u00dco",
    "\u0002\u03b2\u03b3\b\u001f\u0001\u0002\u03b3\u03b4\u0005D#\u0002\u03b4",
    "=\u0003\u0002\u0002\u0002\u03b5\u03b6\u0007G\u0002\u0002\u03b6\u03b7",
    "\u0005\u00dco\u0002\u03b7\u03b8\b \u0001\u0002\u03b8\u03b9\u0005D#\u0002",
    "\u03b9?\u0003\u0002\u0002\u0002\u03ba\u03bb\u0007D\u0002\u0002\u03bb",
    "\u03bc\u0005\u00dco\u0002\u03bc\u03c0\b!\u0001\u0002\u03bd\u03bf\u0005",
    "\u0014\u000b\u0002\u03be\u03bd\u0003\u0002\u0002\u0002\u03bf\u03c2\u0003",
    "\u0002\u0002\u0002\u03c0\u03be\u0003\u0002\u0002\u0002\u03c0\u03c1\u0003",
    "\u0002\u0002\u0002\u03c1\u03c3\u0003\u0002\u0002\u0002\u03c2\u03c0\u0003",
    "\u0002\u0002\u0002\u03c3\u03c4\u0005t;\u0002\u03c4A\u0003\u0002\u0002",
    "\u0002\u03c5\u03c6\u0005\u00dco\u0002\u03c6\u03c7\b\"\u0001\u0002\u03c7",
    "\u03c8\u0005D#\u0002\u03c8C\u0003\u0002\u0002\u0002\u03c9\u03ca\u0007",
    "=\u0002\u0002\u03ca\u03ce\b#\u0001\u0002\u03cb\u03cd\u0005\u0016\f\u0002",
    "\u03cc\u03cb\u0003\u0002\u0002\u0002\u03cd\u03d0\u0003\u0002\u0002\u0002",
    "\u03ce\u03cc\u0003\u0002\u0002\u0002\u03ce\u03cf\u0003\u0002\u0002\u0002",
    "\u03cf\u03de\u0003\u0002\u0002\u0002\u03d0\u03ce\u0003\u0002\u0002\u0002",
    "\u03d1\u03d2\u0005n8\u0002\u03d2\u03d3\u0005\u001a\u000e\u0002\u03d3",
    "\u03df\u0003\u0002\u0002\u0002\u03d4\u03d8\u0007\u0004\u0002\u0002\u03d5",
    "\u03d7\u0005P)\u0002\u03d6\u03d5\u0003\u0002\u0002\u0002\u03d7\u03da",
    "\u0003\u0002\u0002\u0002\u03d8\u03d6\u0003\u0002\u0002\u0002\u03d8\u03d9",
    "\u0003\u0002\u0002\u0002\u03d9\u03db\u0003\u0002\u0002\u0002\u03da\u03d8",
    "\u0003\u0002\u0002\u0002\u03db\u03dc\u0007\u0006\u0002\u0002\u03dc\u03df",
    "\u0005\u001c\u000f\u0002\u03dd\u03df\u0005\u001a\u000e\u0002\u03de\u03d1",
    "\u0003\u0002\u0002\u0002\u03de\u03d4\u0003\u0002\u0002\u0002\u03de\u03dd",
    "\u0003\u0002\u0002\u0002\u03df\u03f4\u0003\u0002\u0002\u0002\u03e0\u03e4",
    "\b#\u0001\u0002\u03e1\u03e3\u0005\u0016\f\u0002\u03e2\u03e1\u0003\u0002",
    "\u0002\u0002\u03e3\u03e6\u0003\u0002\u0002\u0002\u03e4\u03e2\u0003\u0002",
    "\u0002\u0002\u03e4\u03e5\u0003\u0002\u0002\u0002\u03e5\u03f1\u0003\u0002",
    "\u0002\u0002\u03e6\u03e4\u0003\u0002\u0002\u0002\u03e7\u03eb\u0007\u0004",
    "\u0002\u0002\u03e8\u03ea\u0005P)\u0002\u03e9\u03e8\u0003\u0002\u0002",
    "\u0002\u03ea\u03ed\u0003\u0002\u0002\u0002\u03eb\u03e9\u0003\u0002\u0002",
    "\u0002\u03eb\u03ec\u0003\u0002\u0002\u0002\u03ec\u03ee\u0003\u0002\u0002",
    "\u0002\u03ed\u03eb\u0003\u0002\u0002\u0002\u03ee\u03ef\u0007\u0006\u0002",
    "\u0002\u03ef\u03f2\u0005\u001c\u000f\u0002\u03f0\u03f2\u0005\u001a\u000e",
    "\u0002\u03f1\u03e7\u0003\u0002\u0002\u0002\u03f1\u03f0\u0003\u0002\u0002",
    "\u0002\u03f2\u03f4\u0003\u0002\u0002\u0002\u03f3\u03c9\u0003\u0002\u0002",
    "\u0002\u03f3\u03e0\u0003\u0002\u0002\u0002\u03f4E\u0003\u0002\u0002",
    "\u0002\u03f5\u03f6\u0005\u00dco\u0002\u03f6\u03f9\b$\u0001\u0002\u03f7",
    "\u03f8\u0007=\u0002\u0002\u03f8\u03fa\b$\u0001\u0002\u03f9\u03f7\u0003",
    "\u0002\u0002\u0002\u03f9\u03fa\u0003\u0002\u0002\u0002\u03fa\u03fb\u0003",
    "\u0002\u0002\u0002\u03fb\u03ff\b$\u0001\u0002\u03fc\u03fe\u0005\u0016",
    "\f\u0002\u03fd\u03fc\u0003\u0002\u0002\u0002\u03fe\u0401\u0003\u0002",
    "\u0002\u0002\u03ff\u03fd\u0003\u0002\u0002\u0002\u03ff\u0400\u0003\u0002",
    "\u0002\u0002\u0400\u0443\u0003\u0002\u0002\u0002\u0401\u03ff\u0003\u0002",
    "\u0002\u0002\u0402\u0406\u0007\u0004\u0002\u0002\u0403\u0405\u0005H",
    "%\u0002\u0404\u0403\u0003\u0002\u0002\u0002\u0405\u0408\u0003\u0002",
    "\u0002\u0002\u0406\u0404\u0003\u0002\u0002\u0002\u0406\u0407\u0003\u0002",
    "\u0002\u0002\u0407\u0409\u0003\u0002\u0002\u0002\u0408\u0406\u0003\u0002",
    "\u0002\u0002\u0409\u0413\u0007\u0006\u0002\u0002\u040a\u040b\u0007A",
    "\u0002\u0002\u040b\u040f\u0007\u0004\u0002\u0002\u040c\u040e\u0005J",
    "&\u0002\u040d\u040c\u0003\u0002\u0002\u0002\u040e\u0411\u0003\u0002",
    "\u0002\u0002\u040f\u040d\u0003\u0002\u0002\u0002\u040f\u0410\u0003\u0002",
    "\u0002\u0002\u0410\u0412\u0003\u0002\u0002\u0002\u0411\u040f\u0003\u0002",
    "\u0002\u0002\u0412\u0414\u0007\u0006\u0002\u0002\u0413\u040a\u0003\u0002",
    "\u0002\u0002\u0413\u0414\u0003\u0002\u0002\u0002\u0414\u0415\u0003\u0002",
    "\u0002\u0002\u0415\u0444\u0005\u001c\u000f\u0002\u0416\u0417\u0007A",
    "\u0002\u0002\u0417\u041b\u0007\u0004\u0002\u0002\u0418\u041a\u0005J",
    "&\u0002\u0419\u0418\u0003\u0002\u0002\u0002\u041a\u041d\u0003\u0002",
    "\u0002\u0002\u041b\u0419\u0003\u0002\u0002\u0002\u041b\u041c\u0003\u0002",
    "\u0002\u0002\u041c\u041e\u0003\u0002\u0002\u0002\u041d\u041b\u0003\u0002",
    "\u0002\u0002\u041e\u041f\u0007\u0006\u0002\u0002\u041f\u0444\u0005\u001c",
    "\u000f\u0002\u0420\u0421\u0007\b\u0002\u0002\u0421\u0427\u0005L\'\u0002",
    "\u0422\u0423\u0007\u0005\u0002\u0002\u0423\u0424\b$\u0001\u0002\u0424",
    "\u0426\u0005L\'\u0002\u0425\u0422\u0003\u0002\u0002\u0002\u0426\u0429",
    "\u0003\u0002\u0002\u0002\u0427\u0425\u0003\u0002\u0002\u0002\u0427\u0428",
    "\u0003\u0002\u0002\u0002\u0428\u042a\u0003\u0002\u0002\u0002\u0429\u0427",
    "\u0003\u0002\u0002\u0002\u042a\u0436\u0007\t\u0002\u0002\u042b\u042c",
    "\u0007~\u0002\u0002\u042c\u0430\u0007\u0004\u0002\u0002\u042d\u042f",
    "\u0005H%\u0002\u042e\u042d\u0003\u0002\u0002\u0002\u042f\u0432\u0003",
    "\u0002\u0002\u0002\u0430\u042e\u0003\u0002\u0002\u0002\u0430\u0431\u0003",
    "\u0002\u0002\u0002\u0431\u0433\u0003\u0002\u0002\u0002\u0432\u0430\u0003",
    "\u0002\u0002\u0002\u0433\u0434\u0007\u0006\u0002\u0002\u0434\u0437\u0005",
    "\u001c\u000f\u0002\u0435\u0437\u0005\u001a\u000e\u0002\u0436\u042b\u0003",
    "\u0002\u0002\u0002\u0436\u0435\u0003\u0002\u0002\u0002\u0437\u0444\u0003",
    "\u0002\u0002\u0002\u0438\u0439\u0007~\u0002\u0002\u0439\u043d\u0007",
    "\u0004\u0002\u0002\u043a\u043c\u0005H%\u0002\u043b\u043a\u0003\u0002",
    "\u0002\u0002\u043c\u043f\u0003\u0002\u0002\u0002\u043d\u043b\u0003\u0002",
    "\u0002\u0002\u043d\u043e\u0003\u0002\u0002\u0002\u043e\u0440\u0003\u0002",
    "\u0002\u0002\u043f\u043d\u0003\u0002\u0002\u0002\u0440\u0441\u0007\u0006",
    "\u0002\u0002\u0441\u0444\u0005\u001c\u000f\u0002\u0442\u0444\u0005\u001a",
    "\u000e\u0002\u0443\u0402\u0003\u0002\u0002\u0002\u0443\u0416\u0003\u0002",
    "\u0002\u0002\u0443\u0420\u0003\u0002\u0002\u0002\u0443\u0438\u0003\u0002",
    "\u0002\u0002\u0443\u0442\u0003\u0002\u0002\u0002\u0444G\u0003\u0002",
    "\u0002\u0002\u0445\u0449\b%\u0001\u0002\u0446\u0448\u0005\u0016\f\u0002",
    "\u0447\u0446\u0003\u0002\u0002\u0002\u0448\u044b\u0003\u0002\u0002\u0002",
    "\u0449\u0447\u0003\u0002\u0002\u0002\u0449\u044a\u0003\u0002\u0002\u0002",
    "\u044a\u044c\u0003\u0002\u0002\u0002\u044b\u0449\u0003\u0002\u0002\u0002",
    "\u044c\u044d\u0005\u00e4s\u0002\u044d\u0451\b%\u0001\u0002\u044e\u0450",
    "\u0005\u0016\f\u0002\u044f\u044e\u0003\u0002\u0002\u0002\u0450\u0453",
    "\u0003\u0002\u0002\u0002\u0451\u044f\u0003\u0002\u0002\u0002\u0451\u0452",
    "\u0003\u0002\u0002\u0002\u0452\u045e\u0003\u0002\u0002\u0002\u0453\u0451",
    "\u0003\u0002\u0002\u0002\u0454\u0458\u0007\u0004\u0002\u0002\u0455\u0457",
    "\u0005H%\u0002\u0456\u0455\u0003\u0002\u0002\u0002\u0457\u045a\u0003",
    "\u0002\u0002\u0002\u0458\u0456\u0003\u0002\u0002\u0002\u0458\u0459\u0003",
    "\u0002\u0002\u0002\u0459\u045b\u0003\u0002\u0002\u0002\u045a\u0458\u0003",
    "\u0002\u0002\u0002\u045b\u045c\u0007\u0006\u0002\u0002\u045c\u045f\u0005",
    "\u001c\u000f\u0002\u045d\u045f\u0005\u001a\u000e\u0002\u045e\u0454\u0003",
    "\u0002\u0002\u0002\u045e\u045d\u0003\u0002\u0002\u0002\u045fI\u0003",
    "\u0002\u0002\u0002\u0460\u0464\b&\u0001\u0002\u0461\u0463\u0005\u0016",
    "\f\u0002\u0462\u0461\u0003\u0002\u0002\u0002\u0463\u0466\u0003\u0002",
    "\u0002\u0002\u0464\u0462\u0003\u0002\u0002\u0002\u0464\u0465\u0003\u0002",
    "\u0002\u0002\u0465\u0467\u0003\u0002\u0002\u0002\u0466\u0464\u0003\u0002",
    "\u0002\u0002\u0467\u0468\u0005\u00e4s\u0002\u0468\u046c\b&\u0001\u0002",
    "\u0469\u046b\u0005\u0016\f\u0002\u046a\u0469\u0003\u0002\u0002\u0002",
    "\u046b\u046e\u0003\u0002\u0002\u0002\u046c\u046a\u0003\u0002\u0002\u0002",
    "\u046c\u046d\u0003\u0002\u0002\u0002\u046d\u047b\u0003\u0002\u0002\u0002",
    "\u046e\u046c\u0003\u0002\u0002\u0002\u046f\u0470\u0007\b\u0002\u0002",
    "\u0470\u0476\u0005L\'\u0002\u0471\u0472\u0007\u0005\u0002\u0002\u0472",
    "\u0473\b&\u0001\u0002\u0473\u0475\u0005L\'\u0002\u0474\u0471\u0003\u0002",
    "\u0002\u0002\u0475\u0478\u0003\u0002\u0002\u0002\u0476\u0474\u0003\u0002",
    "\u0002\u0002\u0476\u0477\u0003\u0002\u0002\u0002\u0477\u0479\u0003\u0002",
    "\u0002\u0002\u0478\u0476\u0003\u0002\u0002\u0002\u0479\u047a\u0007\t",
    "\u0002\u0002\u047a\u047c\u0003\u0002\u0002\u0002\u047b\u046f\u0003\u0002",
    "\u0002\u0002\u047b\u047c\u0003\u0002\u0002\u0002\u047c\u0488\u0003\u0002",
    "\u0002\u0002\u047d\u047e\u0007~\u0002\u0002\u047e\u0482\u0007\u0004",
    "\u0002\u0002\u047f\u0481\u0005H%\u0002\u0480\u047f\u0003\u0002\u0002",
    "\u0002\u0481\u0484\u0003\u0002\u0002\u0002\u0482\u0480\u0003\u0002\u0002",
    "\u0002\u0482\u0483\u0003\u0002\u0002\u0002\u0483\u0485\u0003\u0002\u0002",
    "\u0002\u0484\u0482\u0003\u0002\u0002\u0002\u0485\u0486\u0007\u0006\u0002",
    "\u0002\u0486\u0489\u0005\u001c\u000f\u0002\u0487\u0489\u0005\u001a\u000e",
    "\u0002\u0488\u047d\u0003\u0002\u0002\u0002\u0488\u0487\u0003\u0002\u0002",
    "\u0002\u0489K\u0003\u0002\u0002\u0002\u048a\u048e\b\'\u0001\u0002\u048b",
    "\u048d\u0005\u0016\f\u0002\u048c\u048b\u0003\u0002\u0002\u0002\u048d",
    "\u0490\u0003\u0002\u0002\u0002\u048e\u048c\u0003\u0002\u0002\u0002\u048e",
    "\u048f\u0003\u0002\u0002\u0002\u048f\u0491\u0003\u0002\u0002\u0002\u0490",
    "\u048e\u0003\u0002\u0002\u0002\u0491\u0492\u0005\u00e4s\u0002\u0492",
    "\u0496\b\'\u0001\u0002\u0493\u0495\u0005\u0016\f\u0002\u0494\u0493\u0003",
    "\u0002\u0002\u0002\u0495\u0498\u0003\u0002\u0002\u0002\u0496\u0494\u0003",
    "\u0002\u0002\u0002\u0496\u0497\u0003\u0002\u0002\u0002\u0497M\u0003",
    "\u0002\u0002\u0002\u0498\u0496\u0003\u0002\u0002\u0002\u0499\u049d\b",
    "(\u0001\u0002\u049a\u049c\u0005\u0016\f\u0002\u049b\u049a\u0003\u0002",
    "\u0002\u0002\u049c\u049f\u0003\u0002\u0002\u0002\u049d\u049b\u0003\u0002",
    "\u0002\u0002\u049d\u049e\u0003\u0002\u0002\u0002\u049e\u04a0\u0003\u0002",
    "\u0002\u0002\u049f\u049d\u0003\u0002\u0002\u0002\u04a0\u04a1\u0005\u00e4",
    "s\u0002\u04a1\u04a5\b(\u0001\u0002\u04a2\u04a4\u0005\u0016\f\u0002\u04a3",
    "\u04a2\u0003\u0002\u0002\u0002\u04a4\u04a7\u0003\u0002\u0002\u0002\u04a5",
    "\u04a3\u0003\u0002\u0002\u0002\u04a5\u04a6\u0003\u0002\u0002\u0002\u04a6",
    "\u04bb\u0003\u0002\u0002\u0002\u04a7\u04a5\u0003\u0002\u0002\u0002\u04a8",
    "\u04a9\u0007\u000b\u0002\u0002\u04a9\u04b3\b(\u0001\u0002\u04aa\u04ab",
    "\u0005\u00dan\u0002\u04ab\u04ac\b(\u0001\u0002\u04ac\u04b4\u0003\u0002",
    "\u0002\u0002\u04ad\u04b0\u0007\f\u0002\u0002\u04ae\u04b0\u0007\r\u0002",
    "\u0002\u04af\u04ad\u0003\u0002\u0002\u0002\u04af\u04ae\u0003\u0002\u0002",
    "\u0002\u04b0\u04b1\u0003\u0002\u0002\u0002\u04b1\u04b2\u0007>\u0002",
    "\u0002\u04b2\u04b4\b(\u0001\u0002\u04b3\u04aa\u0003\u0002\u0002\u0002",
    "\u04b3\u04af\u0003\u0002\u0002\u0002\u04b4\u04b8\u0003\u0002\u0002\u0002",
    "\u04b5\u04b7\u0005\u0016\f\u0002\u04b6\u04b5\u0003\u0002\u0002\u0002",
    "\u04b7\u04ba\u0003\u0002\u0002\u0002\u04b8\u04b6\u0003\u0002\u0002\u0002",
    "\u04b8\u04b9\u0003\u0002\u0002\u0002\u04b9\u04bc\u0003\u0002\u0002\u0002",
    "\u04ba\u04b8\u0003\u0002\u0002\u0002\u04bb\u04a8\u0003\u0002\u0002\u0002",
    "\u04bb\u04bc\u0003\u0002\u0002\u0002\u04bc\u04bd\u0003\u0002\u0002\u0002",
    "\u04bd\u04be\u0005\u001a\u000e\u0002\u04beO\u0003\u0002\u0002\u0002",
    "\u04bf\u04c3\b)\u0001\u0002\u04c0\u04c2\u0005\u0016\f\u0002\u04c1\u04c0",
    "\u0003\u0002\u0002\u0002\u04c2\u04c5\u0003\u0002\u0002\u0002\u04c3\u04c1",
    "\u0003\u0002\u0002\u0002\u04c3\u04c4\u0003\u0002\u0002\u0002\u04c4\u04c9",
    "\u0003\u0002\u0002\u0002\u04c5\u04c3\u0003\u0002\u0002\u0002\u04c6\u04c7",
    "\u0007\\\u0002\u0002\u04c7\u04ca\u0005Z.\u0002\u04c8\u04ca\u0005X-\u0002",
    "\u04c9\u04c6\u0003\u0002\u0002\u0002\u04c9\u04c8\u0003\u0002\u0002\u0002",
    "\u04caQ\u0003\u0002\u0002\u0002\u04cb\u04cf\b*\u0001\u0002\u04cc\u04ce",
    "\u0005\u0016\f\u0002\u04cd\u04cc\u0003\u0002\u0002\u0002\u04ce\u04d1",
    "\u0003\u0002\u0002\u0002\u04cf\u04cd\u0003\u0002\u0002\u0002\u04cf\u04d0",
    "\u0003\u0002\u0002\u0002\u04d0\u04d2\u0003\u0002\u0002\u0002\u04d1\u04cf",
    "\u0003\u0002\u0002\u0002\u04d2\u04d3\u0005X-\u0002\u04d3S\u0003\u0002",
    "\u0002\u0002\u04d4\u04d5\u0005\u00e4s\u0002\u04d5\u04ed\b+\u0001\u0002",
    "\u04d6\u04e7\u0007\u0007\u0002\u0002\u04d7\u04db\u0005|?\u0002\u04d8",
    "\u04dc\u0005\u0084C\u0002\u04d9\u04dc\u0005\u0082B\u0002\u04da\u04dc",
    "\u0005\u00dco\u0002\u04db\u04d8\u0003\u0002\u0002\u0002\u04db\u04d9",
    "\u0003\u0002\u0002\u0002\u04db\u04da\u0003\u0002\u0002\u0002\u04dc\u04de",
    "\u0003\u0002\u0002\u0002\u04dd\u04df\u0005~@\u0002\u04de\u04dd\u0003",
    "\u0002\u0002\u0002\u04de\u04df\u0003\u0002\u0002\u0002\u04df\u04e8\u0003",
    "\u0002\u0002\u0002\u04e0\u04e5\u0005\u008cG\u0002\u04e1\u04e2\u0007",
    "\u000b\u0002\u0002\u04e2\u04e3\u0005\u00aeX\u0002\u04e3\u04e4\b+\u0001",
    "\u0002\u04e4\u04e6\u0003\u0002\u0002\u0002\u04e5\u04e1\u0003\u0002\u0002",
    "\u0002\u04e5\u04e6\u0003\u0002\u0002\u0002\u04e6\u04e8\u0003\u0002\u0002",
    "\u0002\u04e7\u04d7\u0003\u0002\u0002\u0002\u04e7\u04e0\u0003\u0002\u0002",
    "\u0002\u04e8\u04ee\u0003\u0002\u0002\u0002\u04e9\u04ea\u0007\u000b\u0002",
    "\u0002\u04ea\u04eb\u0005\u00aeX\u0002\u04eb\u04ec\b+\u0001\u0002\u04ec",
    "\u04ee\u0003\u0002\u0002\u0002\u04ed\u04d6\u0003\u0002\u0002\u0002\u04ed",
    "\u04e9\u0003\u0002\u0002\u0002\u04ee\u04ef\u0003\u0002\u0002\u0002\u04ef",
    "\u04f0\u0005\u001a\u000e\u0002\u04f0U\u0003\u0002\u0002\u0002\u04f1",
    "\u04f3\u0005\u0016\f\u0002\u04f2\u04f1\u0003\u0002\u0002\u0002\u04f3",
    "\u04f4\u0003\u0002\u0002\u0002\u04f4\u04f2\u0003\u0002\u0002\u0002\u04f4",
    "\u04f5\u0003\u0002\u0002\u0002\u04f5\u04f6\u0003\u0002\u0002\u0002\u04f6",
    "\u04f7\b,\u0001\u0002\u04f7W\u0003\u0002\u0002\u0002\u04f8\u04fa\b-",
    "\u0001\u0002\u04f9\u04fb\u0007\u008c\u0002\u0002\u04fa\u04f9\u0003\u0002",
    "\u0002\u0002\u04fa\u04fb\u0003\u0002\u0002\u0002\u04fb\u04fd\u0003\u0002",
    "\u0002\u0002\u04fc\u04fe\u00072\u0002\u0002\u04fd\u04fc\u0003\u0002",
    "\u0002\u0002\u04fd\u04fe\u0003\u0002\u0002\u0002\u04fe\u0500\u0003\u0002",
    "\u0002\u0002\u04ff\u0501\u0007o\u0002\u0002\u0500\u04ff\u0003\u0002",
    "\u0002\u0002\u0500\u0501\u0003\u0002\u0002\u0002\u0501\u0503\u0003\u0002",
    "\u0002\u0002\u0502\u0504\u0007R\u0002\u0002\u0503\u0502\u0003\u0002",
    "\u0002\u0002\u0503\u0504\u0003\u0002\u0002\u0002\u0504\u0505\u0003\u0002",
    "\u0002\u0002\u0505\u0506\u0005\u00e4s\u0002\u0506\u050a\b-\u0001\u0002",
    "\u0507\u0509\u0005\u0014\u000b\u0002\u0508\u0507\u0003\u0002\u0002\u0002",
    "\u0509\u050c\u0003\u0002\u0002\u0002\u050a\u0508\u0003\u0002\u0002\u0002",
    "\u050a\u050b\u0003\u0002\u0002\u0002\u050b\u05c3\u0003\u0002\u0002\u0002",
    "\u050c\u050a\u0003\u0002\u0002\u0002\u050d\u0512\u0005v<\u0002\u050e",
    "\u050f\u0005h5\u0002\u050f\u0510\u0005\u001a\u000e\u0002\u0510\u0513",
    "\u0003\u0002\u0002\u0002\u0511\u0513\u0005\u001c\u000f\u0002\u0512\u050e",
    "\u0003\u0002\u0002\u0002\u0512\u0511\u0003\u0002\u0002\u0002\u0513\u05c4",
    "\u0003\u0002\u0002\u0002\u0514\u05b5\u0007\u0007\u0002\u0002\u0515\u0517",
    "\u0005v<\u0002\u0516\u0518\u0005h5\u0002\u0517\u0516\u0003\u0002\u0002",
    "\u0002\u0517\u0518\u0003\u0002\u0002\u0002\u0518\u051a\u0003\u0002\u0002",
    "\u0002\u0519\u051b\u0005V,\u0002\u051a\u0519\u0003\u0002\u0002\u0002",
    "\u051a\u051b\u0003\u0002\u0002\u0002\u051b\u051c\u0003\u0002\u0002\u0002",
    "\u051c\u051d\u0005\u001a\u000e\u0002\u051d\u05b6\u0003\u0002\u0002\u0002",
    "\u051e\u0535\u0005|?\u0002\u051f\u0520\u0005v<\u0002\u0520\u0521\u0005",
    "\u001c\u000f\u0002\u0521\u0536\u0003\u0002\u0002\u0002\u0522\u0523\u0007",
    "w\u0002\u0002\u0523\u0524\b-\u0001\u0002\u0524\u0525\u0005x=\u0002\u0525",
    "\u0526\u0005\u001c\u000f\u0002\u0526\u0536\u0003\u0002\u0002\u0002\u0527",
    "\u0528\u0007n\u0002\u0002\u0528\u0529\b-\u0001\u0002\u0529\u052a\u0005",
    "x=\u0002\u052a\u052b\u0005\u001c\u000f\u0002\u052b\u0536\u0003\u0002",
    "\u0002\u0002\u052c\u052d\u0005\u0084C\u0002\u052d\u052e\u0005\u0080",
    "A\u0002\u052e\u0536\u0003\u0002\u0002\u0002\u052f\u0530\u0005\u0082",
    "B\u0002\u0530\u0531\u0005\u0080A\u0002\u0531\u0536\u0003\u0002\u0002",
    "\u0002\u0532\u0533\u0005\u00dco\u0002\u0533\u0534\u0005\u0080A\u0002",
    "\u0534\u0536\u0003\u0002\u0002\u0002\u0535\u051f\u0003\u0002\u0002\u0002",
    "\u0535\u0522\u0003\u0002\u0002\u0002\u0535\u0527\u0003\u0002\u0002\u0002",
    "\u0535\u052c\u0003\u0002\u0002\u0002\u0535\u052f\u0003\u0002\u0002\u0002",
    "\u0535\u0532\u0003\u0002\u0002\u0002\u0536\u05b6\u0003\u0002\u0002\u0002",
    "\u0537\u0538\u0007E\u0002\u0002\u0538\u0539\u00076\u0002\u0002\u0539",
    "\u053d\b-\u0001\u0002\u053a\u053b\u0007n\u0002\u0002\u053b\u053d\b-",
    "\u0001\u0002\u053c\u0537\u0003\u0002\u0002\u0002\u053c\u053a\u0003\u0002",
    "\u0002\u0002\u053d\u056a\u0003\u0002\u0002\u0002\u053e\u0540\u0005v",
    "<\u0002\u053f\u0541\u0005h5\u0002\u0540\u053f\u0003\u0002\u0002\u0002",
    "\u0540\u0541\u0003\u0002\u0002\u0002\u0541\u0543\u0003\u0002\u0002\u0002",
    "\u0542\u0544\u0005V,\u0002\u0543\u0542\u0003\u0002\u0002\u0002\u0543",
    "\u0544\u0003\u0002\u0002\u0002\u0544\u056b\u0003\u0002\u0002\u0002\u0545",
    "\u0547\u0005\u008aF\u0002\u0546\u0548\u0005h5\u0002\u0547\u0546\u0003",
    "\u0002\u0002\u0002\u0547\u0548\u0003\u0002\u0002\u0002\u0548\u0549\u0003",
    "\u0002\u0002\u0002\u0549\u054d\b-\u0001\u0002\u054a\u054c\u0005\u0016",
    "\f\u0002\u054b\u054a\u0003\u0002\u0002\u0002\u054c\u054f\u0003\u0002",
    "\u0002\u0002\u054d\u054b\u0003\u0002\u0002\u0002\u054d\u054e\u0003\u0002",
    "\u0002\u0002\u054e\u056b\u0003\u0002\u0002\u0002\u054f\u054d\u0003\u0002",
    "\u0002\u0002\u0550\u0552\u0005\u008cG\u0002\u0551\u0553\u0005h5\u0002",
    "\u0552\u0551\u0003\u0002\u0002\u0002\u0552\u0553\u0003\u0002\u0002\u0002",
    "\u0553\u0554\u0003\u0002\u0002\u0002\u0554\u0558\b-\u0001\u0002\u0555",
    "\u0557\u0005\u0016\f\u0002\u0556\u0555\u0003\u0002\u0002\u0002\u0557",
    "\u055a\u0003\u0002\u0002\u0002\u0558\u0556\u0003\u0002\u0002\u0002\u0558",
    "\u0559\u0003\u0002\u0002\u0002\u0559\u0568\u0003\u0002\u0002\u0002\u055a",
    "\u0558\u0003\u0002\u0002\u0002\u055b\u055c\u0007V\u0002\u0002\u055c",
    "\u055d\u0007\u0004\u0002\u0002\u055d\u0561\b-\u0001\u0002\u055e\u0560",
    "\u0005N(\u0002\u055f\u055e\u0003\u0002\u0002\u0002\u0560\u0563\u0003",
    "\u0002\u0002\u0002\u0561\u055f\u0003\u0002\u0002\u0002\u0561\u0562\u0003",
    "\u0002\u0002\u0002\u0562\u0564\u0003\u0002\u0002\u0002\u0563\u0561\u0003",
    "\u0002\u0002\u0002\u0564\u0566\u0007\u0006\u0002\u0002\u0565\u0567\u0005",
    "V,\u0002\u0566\u0565\u0003\u0002\u0002\u0002\u0566\u0567\u0003\u0002",
    "\u0002\u0002\u0567\u0569\u0003\u0002\u0002\u0002\u0568\u055b\u0003\u0002",
    "\u0002\u0002\u0568\u0569\u0003\u0002\u0002\u0002\u0569\u056b\u0003\u0002",
    "\u0002\u0002\u056a\u053e\u0003\u0002\u0002\u0002\u056a\u0545\u0003\u0002",
    "\u0002\u0002\u056a\u0550\u0003\u0002\u0002\u0002\u056b\u056c\u0003\u0002",
    "\u0002\u0002\u056c\u056d\u0005\u001a\u000e\u0002\u056d\u05b6\u0003\u0002",
    "\u0002\u0002\u056e\u0570\u0005\u008aF\u0002\u056f\u0571\u0005j6\u0002",
    "\u0570\u056f\u0003\u0002\u0002\u0002\u0570\u0571\u0003\u0002\u0002\u0002",
    "\u0571\u0572\u0003\u0002\u0002\u0002\u0572\u0576\b-\u0001\u0002\u0573",
    "\u0575\u0005\u0016\f\u0002\u0574\u0573\u0003\u0002\u0002\u0002\u0575",
    "\u0578\u0003\u0002\u0002\u0002\u0576\u0574\u0003\u0002\u0002\u0002\u0576",
    "\u0577\u0003\u0002\u0002\u0002\u0577\u0579\u0003\u0002\u0002\u0002\u0578",
    "\u0576\u0003\u0002\u0002\u0002\u0579\u057a\u0005\u001a\u000e\u0002\u057a",
    "\u05b6\u0003\u0002\u0002\u0002\u057b\u057c\u0007m\u0002\u0002\u057c",
    "\u057d\b-\u0001\u0002\u057d\u057e\u0005\u008cG\u0002\u057e\u0582\b-",
    "\u0001\u0002\u057f\u0581\u0005\u0016\f\u0002\u0580\u057f\u0003\u0002",
    "\u0002\u0002\u0581\u0584\u0003\u0002\u0002\u0002\u0582\u0580\u0003\u0002",
    "\u0002\u0002\u0582\u0583\u0003\u0002\u0002\u0002\u0583\u058d\u0003\u0002",
    "\u0002\u0002\u0584\u0582\u0003\u0002\u0002\u0002\u0585\u0586\u0005j",
    "6\u0002\u0586\u058a\b-\u0001\u0002\u0587\u0589\u0005\u0016\f\u0002\u0588",
    "\u0587\u0003\u0002\u0002\u0002\u0589\u058c\u0003\u0002\u0002\u0002\u058a",
    "\u0588\u0003\u0002\u0002\u0002\u058a\u058b\u0003\u0002\u0002\u0002\u058b",
    "\u058e\u0003\u0002\u0002\u0002\u058c\u058a\u0003\u0002\u0002\u0002\u058d",
    "\u0585\u0003\u0002\u0002\u0002\u058d\u058e\u0003\u0002\u0002\u0002\u058e",
    "\u058f\u0003\u0002\u0002\u0002\u058f\u0590\u0005\u001a\u000e\u0002\u0590",
    "\u05b6\u0003\u0002\u0002\u0002\u0591\u0592\u0005\u008cG\u0002\u0592",
    "\u0596\b-\u0001\u0002\u0593\u0595\u0005\u0016\f\u0002\u0594\u0593\u0003",
    "\u0002\u0002\u0002\u0595\u0598\u0003\u0002\u0002\u0002\u0596\u0594\u0003",
    "\u0002\u0002\u0002\u0596\u0597\u0003\u0002\u0002\u0002\u0597\u05b1\u0003",
    "\u0002\u0002\u0002\u0598\u0596\u0003\u0002\u0002\u0002\u0599\u059a\u0007",
    "V\u0002\u0002\u059a\u059b\u0007\u0004\u0002\u0002\u059b\u059f\b-\u0001",
    "\u0002\u059c\u059e\u0005N(\u0002\u059d\u059c\u0003\u0002\u0002\u0002",
    "\u059e\u05a1\u0003\u0002\u0002\u0002\u059f\u059d\u0003\u0002\u0002\u0002",
    "\u059f\u05a0\u0003\u0002\u0002\u0002\u05a0\u05a2\u0003\u0002\u0002\u0002",
    "\u05a1\u059f\u0003\u0002\u0002\u0002\u05a2\u05a4\u0007\u0006\u0002\u0002",
    "\u05a3\u05a5\u0005j6\u0002\u05a4\u05a3\u0003\u0002\u0002\u0002\u05a4",
    "\u05a5\u0003\u0002\u0002\u0002\u05a5\u05a7\u0003\u0002\u0002\u0002\u05a6",
    "\u05a8\u0005V,\u0002\u05a7\u05a6\u0003\u0002\u0002\u0002\u05a7\u05a8",
    "\u0003\u0002\u0002\u0002\u05a8\u05b2\u0003\u0002\u0002\u0002\u05a9\u05aa",
    "\u0005j6\u0002\u05aa\u05ae\b-\u0001\u0002\u05ab\u05ad\u0005\u0016\f",
    "\u0002\u05ac\u05ab\u0003\u0002\u0002\u0002\u05ad\u05b0\u0003\u0002\u0002",
    "\u0002\u05ae\u05ac\u0003\u0002\u0002\u0002\u05ae\u05af\u0003\u0002\u0002",
    "\u0002\u05af\u05b2\u0003\u0002\u0002\u0002\u05b0\u05ae\u0003\u0002\u0002",
    "\u0002\u05b1\u0599\u0003\u0002\u0002\u0002\u05b1\u05a9\u0003\u0002\u0002",
    "\u0002\u05b1\u05b2\u0003\u0002\u0002\u0002\u05b2\u05b3\u0003\u0002\u0002",
    "\u0002\u05b3\u05b4\u0005\u001a\u000e\u0002\u05b4\u05b6\u0003\u0002\u0002",
    "\u0002\u05b5\u0515\u0003\u0002\u0002\u0002\u05b5\u051e\u0003\u0002\u0002",
    "\u0002\u05b5\u053c\u0003\u0002\u0002\u0002\u05b5\u056e\u0003\u0002\u0002",
    "\u0002\u05b5\u057b\u0003\u0002\u0002\u0002\u05b5\u0591\u0003\u0002\u0002",
    "\u0002\u05b6\u05c4\u0003\u0002\u0002\u0002\u05b7\u05b8\u0007\u000b\u0002",
    "\u0002\u05b8\u05b9\u0005\u00aeX\u0002\u05b9\u05ba\b-\u0001\u0002\u05ba",
    "\u05be\b-\u0001\u0002\u05bb\u05bd\u0005\u0016\f\u0002\u05bc\u05bb\u0003",
    "\u0002\u0002\u0002\u05bd\u05c0\u0003\u0002\u0002\u0002\u05be\u05bc\u0003",
    "\u0002\u0002\u0002\u05be\u05bf\u0003\u0002\u0002\u0002\u05bf\u05c1\u0003",
    "\u0002\u0002\u0002\u05c0\u05be\u0003\u0002\u0002\u0002\u05c1\u05c2\u0005",
    "\u001a\u000e\u0002\u05c2\u05c4\u0003\u0002\u0002\u0002\u05c3\u050d\u0003",
    "\u0002\u0002\u0002\u05c3\u0514\u0003\u0002\u0002\u0002\u05c3\u05b7\u0003",
    "\u0002\u0002\u0002\u05c4Y\u0003\u0002\u0002\u0002\u05c5\u05c7\u0007",
    "R\u0002\u0002\u05c6\u05c5\u0003\u0002\u0002\u0002\u05c6\u05c7\u0003",
    "\u0002\u0002\u0002\u05c7\u05c8\u0003\u0002\u0002\u0002\u05c8\u05c9\u0005",
    "\u00e4s\u0002\u05c9\u05ca\b.\u0001\u0002\u05ca\u05cb\u0005D#\u0002\u05cb",
    "[\u0003\u0002\u0002\u0002\u05cc\u05cd\u0007\u0004\u0002\u0002\u05cd",
    "\u05db\b/\u0001\u0002\u05ce\u05cf\u0007\u000e\u0002\u0002\u05cf\u05d2",
    "\b/\u0001\u0002\u05d0\u05d2\u0005^0\u0002\u05d1\u05ce\u0003\u0002\u0002",
    "\u0002\u05d1\u05d0\u0003\u0002\u0002\u0002\u05d2\u05d8\u0003\u0002\u0002",
    "\u0002\u05d3\u05d4\u0007\u0005\u0002\u0002\u05d4\u05d5\b/\u0001\u0002",
    "\u05d5\u05d7\u0005^0\u0002\u05d6\u05d3\u0003\u0002\u0002\u0002\u05d7",
    "\u05da\u0003\u0002\u0002\u0002\u05d8\u05d6\u0003\u0002\u0002\u0002\u05d8",
    "\u05d9\u0003\u0002\u0002\u0002\u05d9\u05dc\u0003\u0002\u0002\u0002\u05da",
    "\u05d8\u0003\u0002\u0002\u0002\u05db\u05d1\u0003\u0002\u0002\u0002\u05db",
    "\u05dc\u0003\u0002\u0002\u0002\u05dc\u05dd\u0003\u0002\u0002\u0002\u05dd",
    "\u05de\u0007\u0006\u0002\u0002\u05de]\u0003\u0002\u0002\u0002\u05df",
    "\u05e3\b0\u0001\u0002\u05e0\u05e2\u0005\u0018\r\u0002\u05e1\u05e0\u0003",
    "\u0002\u0002\u0002\u05e2\u05e5\u0003\u0002\u0002\u0002\u05e3\u05e1\u0003",
    "\u0002\u0002\u0002\u05e3\u05e4\u0003\u0002\u0002\u0002\u05e4\u05e6\u0003",
    "\u0002\u0002\u0002\u05e5\u05e3\u0003\u0002\u0002\u0002\u05e6\u05e8\b",
    "0\u0001\u0002\u05e7\u05e9\u0007\u008c\u0002\u0002\u05e8\u05e7\u0003",
    "\u0002\u0002\u0002\u05e8\u05e9\u0003\u0002\u0002\u0002\u05e9\u05eb\u0003",
    "\u0002\u0002\u0002\u05ea\u05ec\u00072\u0002\u0002\u05eb\u05ea\u0003",
    "\u0002\u0002\u0002\u05eb\u05ec\u0003\u0002\u0002\u0002\u05ec\u060c\u0003",
    "\u0002\u0002\u0002\u05ed\u05ee\u0005\u00aeX\u0002\u05ee\u05f7\b0\u0001",
    "\u0002\u05ef\u05f0\u0007)\u0002\u0002\u05f0\u05f1\u0005\u00e4s\u0002",
    "\u05f1\u05f2\b0\u0001\u0002\u05f2\u05f8\u0003\u0002\u0002\u0002\u05f3",
    "\u05f4\u0005\u00e4s\u0002\u05f4\u05f5\b0\u0001\u0002\u05f5\u05f8\u0003",
    "\u0002\u0002\u0002\u05f6\u05f8\b0\u0001\u0002\u05f7\u05ef\u0003\u0002",
    "\u0002\u0002\u05f7\u05f3\u0003\u0002\u0002\u0002\u05f7\u05f6\u0003\u0002",
    "\u0002\u0002\u05f8\u05f9\u0003\u0002\u0002\u0002\u05f9\u05ff\b0\u0001",
    "\u0002\u05fa\u05fb\b0\u0001\u0002\u05fb\u0600\u0005\u00caf\u0002\u05fc",
    "\u05fd\b0\u0001\u0002\u05fd\u05fe\u0007\u0091\u0002\u0002\u05fe\u0600",
    "\u0005\u00ceh\u0002\u05ff\u05fa\u0003\u0002\u0002\u0002\u05ff\u05fc",
    "\u0003\u0002\u0002\u0002\u05ff\u0600\u0003\u0002\u0002\u0002\u0600\u060d",
    "\u0003\u0002\u0002\u0002\u0601\u0602\b0\u0001\u0002\u0602\u060a\u0005",
    "\u00caf\u0002\u0603\u0604\u0007)\u0002\u0002\u0604\u0605\u0005\u00e4",
    "s\u0002\u0605\u0606\b0\u0001\u0002\u0606\u060b\u0003\u0002\u0002\u0002",
    "\u0607\u0608\u0005\u00e4s\u0002\u0608\u0609\b0\u0001\u0002\u0609\u060b",
    "\u0003\u0002\u0002\u0002\u060a\u0603\u0003\u0002\u0002\u0002\u060a\u0607",
    "\u0003\u0002\u0002\u0002\u060b\u060d\u0003\u0002\u0002\u0002\u060c\u05ed",
    "\u0003\u0002\u0002\u0002\u060c\u0601\u0003\u0002\u0002\u0002\u060d\u060e",
    "\u0003\u0002\u0002\u0002\u060e\u0612\b0\u0001\u0002\u060f\u0611\u0005",
    "\u0014\u000b\u0002\u0610\u060f\u0003\u0002\u0002\u0002\u0611\u0614\u0003",
    "\u0002\u0002\u0002\u0612\u0610\u0003\u0002\u0002\u0002\u0612\u0613\u0003",
    "\u0002\u0002\u0002\u0613\u0636\u0003\u0002\u0002\u0002\u0614\u0612\u0003",
    "\u0002\u0002\u0002\u0615\u0634\u0007\u0007\u0002\u0002\u0616\u0617\u0007",
    "}\u0002\u0002\u0617\u0618\u0007\u0084\u0002\u0002\u0618\u0619\b0\u0001",
    "\u0002\u0619\u0622\u0005\u00dco\u0002\u061a\u0623\u0005~@\u0002\u061b",
    "\u061f\b0\u0001\u0002\u061c\u061e\u0005\u0016\f\u0002\u061d\u061c\u0003",
    "\u0002\u0002\u0002\u061e\u0621\u0003\u0002\u0002\u0002\u061f\u061d\u0003",
    "\u0002\u0002\u0002\u061f\u0620\u0003\u0002\u0002\u0002\u0620\u0623\u0003",
    "\u0002\u0002\u0002\u0621\u061f\u0003\u0002\u0002\u0002\u0622\u061a\u0003",
    "\u0002\u0002\u0002\u0622\u061b\u0003\u0002\u0002\u0002\u0623\u0635\u0003",
    "\u0002\u0002\u0002\u0624\u0625\u0005\u008aF\u0002\u0625\u0629\b0\u0001",
    "\u0002\u0626\u0628\u0005\u0016\f\u0002\u0627\u0626\u0003\u0002\u0002",
    "\u0002\u0628\u062b\u0003\u0002\u0002\u0002\u0629\u0627\u0003\u0002\u0002",
    "\u0002\u0629\u062a\u0003\u0002\u0002\u0002\u062a\u0635\u0003\u0002\u0002",
    "\u0002\u062b\u0629\u0003\u0002\u0002\u0002\u062c\u062d\u0005\u008cG",
    "\u0002\u062d\u0631\b0\u0001\u0002\u062e\u0630\u0005\u0016\f\u0002\u062f",
    "\u062e\u0003\u0002\u0002\u0002\u0630\u0633\u0003\u0002\u0002\u0002\u0631",
    "\u062f\u0003\u0002\u0002\u0002\u0631\u0632\u0003\u0002\u0002\u0002\u0632",
    "\u0635\u0003\u0002\u0002\u0002\u0633\u0631\u0003\u0002\u0002\u0002\u0634",
    "\u0616\u0003\u0002\u0002\u0002\u0634\u0624\u0003\u0002\u0002\u0002\u0634",
    "\u062c\u0003\u0002\u0002\u0002\u0635\u0637\u0003\u0002\u0002\u0002\u0636",
    "\u0615\u0003\u0002\u0002\u0002\u0636\u0637\u0003\u0002\u0002\u0002\u0637",
    "_\u0003\u0002\u0002\u0002\u0638\u0642\u0007\b\u0002\u0002\u0639\u063f",
    "\u0005b2\u0002\u063a\u063b\u0007\u0005\u0002\u0002\u063b\u063c\b1\u0001",
    "\u0002\u063c\u063e\u0005b2\u0002\u063d\u063a\u0003\u0002\u0002\u0002",
    "\u063e\u0641\u0003\u0002\u0002\u0002\u063f\u063d\u0003\u0002\u0002\u0002",
    "\u063f\u0640\u0003\u0002\u0002\u0002\u0640\u0643\u0003\u0002\u0002\u0002",
    "\u0641\u063f\u0003\u0002\u0002\u0002\u0642\u0639\u0003\u0002\u0002\u0002",
    "\u0642\u0643\u0003\u0002\u0002\u0002\u0643\u0644\u0003\u0002\u0002\u0002",
    "\u0644\u0645\u0007\t\u0002\u0002\u0645a\u0003\u0002\u0002\u0002\u0646",
    "\u064a\b2\u0001\u0002\u0647\u0649\u0005\u0016\f\u0002\u0648\u0647\u0003",
    "\u0002\u0002\u0002\u0649\u064c\u0003\u0002\u0002\u0002\u064a\u0648\u0003",
    "\u0002\u0002\u0002\u064a\u064b\u0003\u0002\u0002\u0002\u064b\u064d\u0003",
    "\u0002\u0002\u0002\u064c\u064a\u0003\u0002\u0002\u0002\u064d\u064e\u0005",
    "\u00e4s\u0002\u064e\u0652\b2\u0001\u0002\u064f\u0651\u0005\u0014\u000b",
    "\u0002\u0650\u064f\u0003\u0002\u0002\u0002\u0651\u0654\u0003\u0002\u0002",
    "\u0002\u0652\u0650\u0003\u0002\u0002\u0002\u0652\u0653\u0003\u0002\u0002",
    "\u0002\u0653\u0655\u0003\u0002\u0002\u0002\u0654\u0652\u0003\u0002\u0002",
    "\u0002\u0655\u0659\u0005p9\u0002\u0656\u0658\u0005\u0016\f\u0002\u0657",
    "\u0656\u0003\u0002\u0002\u0002\u0658\u065b\u0003\u0002\u0002\u0002\u0659",
    "\u0657\u0003\u0002\u0002\u0002\u0659\u065a\u0003\u0002\u0002\u0002\u065a",
    "c\u0003\u0002\u0002\u0002\u065b\u0659\u0003\u0002\u0002\u0002\u065c",
    "\u0666\u0007\b\u0002\u0002\u065d\u0663\u0005f4\u0002\u065e\u065f\u0007",
    "\u0005\u0002\u0002\u065f\u0660\b3\u0001\u0002\u0660\u0662\u0005f4\u0002",
    "\u0661\u065e\u0003\u0002\u0002\u0002\u0662\u0665\u0003\u0002\u0002\u0002",
    "\u0663\u0661\u0003\u0002\u0002\u0002\u0663\u0664\u0003\u0002\u0002\u0002",
    "\u0664\u0667\u0003\u0002\u0002\u0002\u0665\u0663\u0003\u0002\u0002\u0002",
    "\u0666\u065d\u0003\u0002\u0002\u0002\u0666\u0667\u0003\u0002\u0002\u0002",
    "\u0667\u0668\u0003\u0002\u0002\u0002\u0668\u0669\u0007\t\u0002\u0002",
    "\u0669e\u0003\u0002\u0002\u0002\u066a\u066e\b4\u0001\u0002\u066b\u066d",
    "\u0005\u0016\f\u0002\u066c\u066b\u0003\u0002\u0002\u0002\u066d\u0670",
    "\u0003\u0002\u0002\u0002\u066e\u066c\u0003\u0002\u0002\u0002\u066e\u066f",
    "\u0003\u0002\u0002\u0002\u066f\u0671\u0003\u0002\u0002\u0002\u0670\u066e",
    "\u0003\u0002\u0002\u0002\u0671\u0672\u0005\u00e4s\u0002\u0672\u0676",
    "\b4\u0001\u0002\u0673\u0675\u0005\u0014\u000b\u0002\u0674\u0673\u0003",
    "\u0002\u0002\u0002\u0675\u0678\u0003\u0002\u0002\u0002\u0676\u0674\u0003",
    "\u0002\u0002\u0002\u0676\u0677\u0003\u0002\u0002\u0002\u0677\u0679\u0003",
    "\u0002\u0002\u0002\u0678\u0676\u0003\u0002\u0002\u0002\u0679\u067e\u0005",
    "p9\u0002\u067a\u067b\u0007O\u0002\u0002\u067b\u067c\u0005\u00aeX\u0002",
    "\u067c\u067d\b4\u0001\u0002\u067d\u067f\u0003\u0002\u0002\u0002\u067e",
    "\u067a\u0003\u0002\u0002\u0002\u067e\u067f\u0003\u0002\u0002\u0002\u067f",
    "g\u0003\u0002\u0002\u0002\u0680\u0681\u00074\u0002\u0002\u0681\u0682",
    "\u00075\u0002\u0002\u0682\u0686\b5\u0001\u0002\u0683\u0684\u00075\u0002",
    "\u0002\u0684\u0686\b5\u0001\u0002\u0685\u0680\u0003\u0002\u0002\u0002",
    "\u0685\u0683\u0003\u0002\u0002\u0002\u0686i\u0003\u0002\u0002\u0002",
    "\u0687\u068c\u0005h5\u0002\u0688\u0689\u0007O\u0002\u0002\u0689\u068a",
    "\u0005\u00aeX\u0002\u068a\u068b\b6\u0001\u0002\u068b\u068d\u0003\u0002",
    "\u0002\u0002\u068c\u0688\u0003\u0002\u0002\u0002\u068c\u068d\u0003\u0002",
    "\u0002\u0002\u068d\u0699\u0003\u0002\u0002\u0002\u068e\u068f\u0007O",
    "\u0002\u0002\u068f\u0690\u0005\u00aeX\u0002\u0690\u0691\b6\u0001\u0002",
    "\u0691\u0693\u0003\u0002\u0002\u0002\u0692\u0694\u0005h5\u0002\u0693",
    "\u0692\u0003\u0002\u0002\u0002\u0693\u0694\u0003\u0002\u0002\u0002\u0694",
    "\u0699\u0003\u0002\u0002\u0002\u0695\u0696\u0007\u000b\u0002\u0002\u0696",
    "\u0697\b6\u0001\u0002\u0697\u0699\u0005\u00aeX\u0002\u0698\u0687\u0003",
    "\u0002\u0002\u0002\u0698\u068e\u0003\u0002\u0002\u0002\u0698\u0695\u0003",
    "\u0002\u0002\u0002\u0699k\u0003\u0002\u0002\u0002\u069a\u069b\u0007",
    "\u0088\u0002\u0002\u069b\u069c\u0005\u00dco\u0002\u069c\u06a0\b7\u0001",
    "\u0002\u069d\u069f\u0005\u0014\u000b\u0002\u069e\u069d\u0003\u0002\u0002",
    "\u0002\u069f\u06a2\u0003\u0002\u0002\u0002\u06a0\u069e\u0003\u0002\u0002",
    "\u0002\u06a0\u06a1\u0003\u0002\u0002\u0002\u06a1\u06ae\u0003\u0002\u0002",
    "\u0002\u06a2\u06a0\u0003\u0002\u0002\u0002\u06a3\u06af\u0005d3\u0002",
    "\u06a4\u06a5\t\u0002\u0002\u0002\u06a5\u06a6\u0007{\u0002\u0002\u06a6",
    "\u06ab\u0005f4\u0002\u06a7\u06a8\u0007\u0005\u0002\u0002\u06a8\u06aa",
    "\u0005f4\u0002\u06a9\u06a7\u0003\u0002\u0002\u0002\u06aa\u06ad\u0003",
    "\u0002\u0002\u0002\u06ab\u06a9\u0003\u0002\u0002\u0002\u06ab\u06ac\u0003",
    "\u0002\u0002\u0002\u06ac\u06af\u0003\u0002\u0002\u0002\u06ad\u06ab\u0003",
    "\u0002\u0002\u0002\u06ae\u06a3\u0003\u0002\u0002\u0002\u06ae\u06a4\u0003",
    "\u0002\u0002\u0002\u06ae\u06af\u0003\u0002\u0002\u0002\u06af\u06b0\u0003",
    "\u0002\u0002\u0002\u06b0\u06b1\u0007)\u0002\u0002\u06b1\u06b2\u0005",
    "\u008eH\u0002\u06b2\u06b3\b7\u0001\u0002\u06b3\u06b4\u0005\u001a\u000e",
    "\u0002\u06b4m\u0003\u0002\u0002\u0002\u06b5\u06b6\u0005\u00dco\u0002",
    "\u06b6\u06b7\b8\u0001\u0002\u06b7o\u0003\u0002\u0002\u0002\u06b8\u06d6",
    "\u0005v<\u0002\u06b9\u06d3\u0007\u0007\u0002\u0002\u06ba\u06bc\u0005",
    "v<\u0002\u06bb\u06bd\u0005h5\u0002\u06bc\u06bb\u0003\u0002\u0002\u0002",
    "\u06bc\u06bd\u0003\u0002\u0002\u0002\u06bd\u06d4\u0003\u0002\u0002\u0002",
    "\u06be\u06d4\u0005z>\u0002\u06bf\u06c1\u0005\u008aF\u0002\u06c0\u06c2",
    "\u0005h5\u0002\u06c1\u06c0\u0003\u0002\u0002\u0002\u06c1\u06c2\u0003",
    "\u0002\u0002\u0002\u06c2\u06d4\u0003\u0002\u0002\u0002\u06c3\u06c5\u0005",
    "\u008cG\u0002\u06c4\u06c6\u0005h5\u0002\u06c5\u06c4\u0003\u0002\u0002",
    "\u0002\u06c5\u06c6\u0003\u0002\u0002\u0002\u06c6\u06d1\u0003\u0002\u0002",
    "\u0002\u06c7\u06c8\u0007V\u0002\u0002\u06c8\u06c9\u0007\u0004\u0002",
    "\u0002\u06c9\u06cd\b9\u0001\u0002\u06ca\u06cc\u0005N(\u0002\u06cb\u06ca",
    "\u0003\u0002\u0002\u0002\u06cc\u06cf\u0003\u0002\u0002\u0002\u06cd\u06cb",
    "\u0003\u0002\u0002\u0002\u06cd\u06ce\u0003\u0002\u0002\u0002\u06ce\u06d0",
    "\u0003\u0002\u0002\u0002\u06cf\u06cd\u0003\u0002\u0002\u0002\u06d0\u06d2",
    "\u0007\u0006\u0002\u0002\u06d1\u06c7\u0003\u0002\u0002\u0002\u06d1\u06d2",
    "\u0003\u0002\u0002\u0002\u06d2\u06d4\u0003\u0002\u0002\u0002\u06d3\u06ba",
    "\u0003\u0002\u0002\u0002\u06d3\u06be\u0003\u0002\u0002\u0002\u06d3\u06bf",
    "\u0003\u0002\u0002\u0002\u06d3\u06c3\u0003\u0002\u0002\u0002\u06d4\u06d6",
    "\u0003\u0002\u0002\u0002\u06d5\u06b8\u0003\u0002\u0002\u0002\u06d5\u06b9",
    "\u0003\u0002\u0002\u0002\u06d6q\u0003\u0002\u0002\u0002\u06d7\u06d8",
    "\u0007~\u0002\u0002\u06d8\u06f3\b:\u0001\u0002\u06d9\u06db\u0005v<\u0002",
    "\u06da\u06dc\u0005h5\u0002\u06db\u06da\u0003\u0002\u0002\u0002\u06db",
    "\u06dc\u0003\u0002\u0002\u0002\u06dc\u06f4\u0003\u0002\u0002\u0002\u06dd",
    "\u06f4\u0005z>\u0002\u06de\u06e0\u0005\u008aF\u0002\u06df\u06e1\u0005",
    "h5\u0002\u06e0\u06df\u0003\u0002\u0002\u0002\u06e0\u06e1\u0003\u0002",
    "\u0002\u0002\u06e1\u06f4\u0003\u0002\u0002\u0002\u06e2\u06e4\u0005\u008c",
    "G\u0002\u06e3\u06e5\u0005h5\u0002\u06e4\u06e3\u0003\u0002\u0002\u0002",
    "\u06e4\u06e5\u0003\u0002\u0002\u0002\u06e5\u06f1\u0003\u0002\u0002\u0002",
    "\u06e6\u06e7\u0007V\u0002\u0002\u06e7\u06e8\u0007\u0004\u0002\u0002",
    "\u06e8\u06ec\b:\u0001\u0002\u06e9\u06eb\u0005N(\u0002\u06ea\u06e9\u0003",
    "\u0002\u0002\u0002\u06eb\u06ee\u0003\u0002\u0002\u0002\u06ec\u06ea\u0003",
    "\u0002\u0002\u0002\u06ec\u06ed\u0003\u0002\u0002\u0002\u06ed\u06ef\u0003",
    "\u0002\u0002\u0002\u06ee\u06ec\u0003\u0002\u0002\u0002\u06ef\u06f2\u0007",
    "\u0006\u0002\u0002\u06f0\u06f2\u0005V,\u0002\u06f1\u06e6\u0003\u0002",
    "\u0002\u0002\u06f1\u06f0\u0003\u0002\u0002\u0002\u06f1\u06f2\u0003\u0002",
    "\u0002\u0002\u06f2\u06f4\u0003\u0002\u0002\u0002\u06f3\u06d9\u0003\u0002",
    "\u0002\u0002\u06f3\u06dd\u0003\u0002\u0002\u0002\u06f3\u06de\u0003\u0002",
    "\u0002\u0002\u06f3\u06e2\u0003\u0002\u0002\u0002\u06f4\u06f5\u0003\u0002",
    "\u0002\u0002\u06f5\u06f6\u0005\u001a\u000e\u0002\u06f6s\u0003\u0002",
    "\u0002\u0002\u06f7\u06f8\u0005v<\u0002\u06f8\u06f9\u0005\u001c\u000f",
    "\u0002\u06f9\u07b6\u0003\u0002\u0002\u0002\u06fa\u07b3\u0007\u0007\u0002",
    "\u0002\u06fb\u06fc\u0005v<\u0002\u06fc\u06fd\u0005\u001c\u000f\u0002",
    "\u06fd\u07b4\u0003\u0002\u0002\u0002\u06fe\u0702\u0005|?\u0002\u06ff",
    "\u0703\u0005\u0084C\u0002\u0700\u0703\u0005\u0082B\u0002\u0701\u0703",
    "\u0005\u00dco\u0002\u0702\u06ff\u0003\u0002\u0002\u0002\u0702\u0700",
    "\u0003\u0002\u0002\u0002\u0702\u0701\u0003\u0002\u0002\u0002\u0703\u0705",
    "\u0003\u0002\u0002\u0002\u0704\u0706\u0005~@\u0002\u0705\u0704\u0003",
    "\u0002\u0002\u0002\u0705\u0706\u0003\u0002\u0002\u0002\u0706\u0707\u0003",
    "\u0002\u0002\u0002\u0707\u0708\u0005\u001a\u000e\u0002\u0708\u07b4\u0003",
    "\u0002\u0002\u0002\u0709\u070a\u0007E\u0002\u0002\u070a\u070b\u0007",
    "6\u0002\u0002\u070b\u070f\b;\u0001\u0002\u070c\u070d\u0007n\u0002\u0002",
    "\u070d\u070f\b;\u0001\u0002\u070e\u0709\u0003\u0002\u0002\u0002\u070e",
    "\u070c\u0003\u0002\u0002\u0002\u070f\u073c\u0003\u0002\u0002\u0002\u0710",
    "\u0712\u0005v<\u0002\u0711\u0713\u0005h5\u0002\u0712\u0711\u0003\u0002",
    "\u0002\u0002\u0712\u0713\u0003\u0002\u0002\u0002\u0713\u0714\u0003\u0002",
    "\u0002\u0002\u0714\u0715\u0005\u001c\u000f\u0002\u0715\u073d\u0003\u0002",
    "\u0002\u0002\u0716\u0718\u0005\u008aF\u0002\u0717\u0719\u0005h5\u0002",
    "\u0718\u0717\u0003\u0002\u0002\u0002\u0718\u0719\u0003\u0002\u0002\u0002",
    "\u0719\u071a\u0003\u0002\u0002\u0002\u071a\u071e\b;\u0001\u0002\u071b",
    "\u071d\u0005\u0016\f\u0002\u071c\u071b\u0003\u0002\u0002\u0002\u071d",
    "\u0720\u0003\u0002\u0002\u0002\u071e\u071c\u0003\u0002\u0002\u0002\u071e",
    "\u071f\u0003\u0002\u0002\u0002\u071f\u0721\u0003\u0002\u0002\u0002\u0720",
    "\u071e\u0003\u0002\u0002\u0002\u0721\u0722\u0005\u001a\u000e\u0002\u0722",
    "\u073d\u0003\u0002\u0002\u0002\u0723\u0725\u0005\u008cG\u0002\u0724",
    "\u0726\u0005h5\u0002\u0725\u0724\u0003\u0002\u0002\u0002\u0725\u0726",
    "\u0003\u0002\u0002\u0002\u0726\u0727\u0003\u0002\u0002\u0002\u0727\u072b",
    "\b;\u0001\u0002\u0728\u072a\u0005\u0016\f\u0002\u0729\u0728\u0003\u0002",
    "\u0002\u0002\u072a\u072d\u0003\u0002\u0002\u0002\u072b\u0729\u0003\u0002",
    "\u0002\u0002\u072b\u072c\u0003\u0002\u0002\u0002\u072c\u073a\u0003\u0002",
    "\u0002\u0002\u072d\u072b\u0003\u0002\u0002\u0002\u072e\u072f\u0007V",
    "\u0002\u0002\u072f\u0730\u0007\u0004\u0002\u0002\u0730\u0734\b;\u0001",
    "\u0002\u0731\u0733\u0005N(\u0002\u0732\u0731\u0003\u0002\u0002\u0002",
    "\u0733\u0736\u0003\u0002\u0002\u0002\u0734\u0732\u0003\u0002\u0002\u0002",
    "\u0734\u0735\u0003\u0002\u0002\u0002\u0735\u0737\u0003\u0002\u0002\u0002",
    "\u0736\u0734\u0003\u0002\u0002\u0002\u0737\u0738\u0007\u0006\u0002\u0002",
    "\u0738\u073b\u0005\u001c\u000f\u0002\u0739\u073b\u0005\u001a\u000e\u0002",
    "\u073a\u072e\u0003\u0002\u0002\u0002\u073a\u0739\u0003\u0002\u0002\u0002",
    "\u073b\u073d\u0003\u0002\u0002\u0002\u073c\u0710\u0003\u0002\u0002\u0002",
    "\u073c\u0716\u0003\u0002\u0002\u0002\u073c\u0723\u0003\u0002\u0002\u0002",
    "\u073d\u07b4\u0003\u0002\u0002\u0002\u073e\u073f\u0005\u008aF\u0002",
    "\u073f\u0743\b;\u0001\u0002\u0740\u0742\u0005\u0016\f\u0002\u0741\u0740",
    "\u0003\u0002\u0002\u0002\u0742\u0745\u0003\u0002\u0002\u0002\u0743\u0741",
    "\u0003\u0002\u0002\u0002\u0743\u0744\u0003\u0002\u0002\u0002\u0744\u0746",
    "\u0003\u0002\u0002\u0002\u0745\u0743\u0003\u0002\u0002\u0002\u0746\u0747",
    "\u0005\u001a\u000e\u0002\u0747\u07b4\u0003\u0002\u0002\u0002\u0748\u0749",
    "\u0007m\u0002\u0002\u0749\u074a\b;\u0001\u0002\u074a\u074b\u0005\u008c",
    "G\u0002\u074b\u074f\b;\u0001\u0002\u074c\u074e\u0005\u0016\f\u0002\u074d",
    "\u074c\u0003\u0002\u0002\u0002\u074e\u0751\u0003\u0002\u0002\u0002\u074f",
    "\u074d\u0003\u0002\u0002\u0002\u074f\u0750\u0003\u0002\u0002\u0002\u0750",
    "\u0752\u0003\u0002\u0002\u0002\u0751\u074f\u0003\u0002\u0002\u0002\u0752",
    "\u0753\u0005\u001a\u000e\u0002\u0753\u07b4\u0003\u0002\u0002\u0002\u0754",
    "\u0755\b;\u0001\u0002\u0755\u07b1\u0005\u00dco\u0002\u0756\u0757\u0007",
    "\b\u0002\u0002\u0757\u0758\u0007>\u0002\u0002\u0758\u075f\b;\u0001\u0002",
    "\u0759\u075a\u0007\u0005\u0002\u0002\u075a\u075b\b;\u0001\u0002\u075b",
    "\u075c\u0007>\u0002\u0002\u075c\u075e\b;\u0001\u0002\u075d\u0759\u0003",
    "\u0002\u0002\u0002\u075e\u0761\u0003\u0002\u0002\u0002\u075f\u075d\u0003",
    "\u0002\u0002\u0002\u075f\u0760\u0003\u0002\u0002\u0002\u0760\u0762\u0003",
    "\u0002\u0002\u0002\u0761\u075f\u0003\u0002\u0002\u0002\u0762\u0763\u0007",
    "\t\u0002\u0002\u0763\u0767\b;\u0001\u0002\u0764\u0766\u0005\u0016\f",
    "\u0002\u0765\u0764\u0003\u0002\u0002\u0002\u0766\u0769\u0003\u0002\u0002",
    "\u0002\u0767\u0765\u0003\u0002\u0002\u0002\u0767\u0768\u0003\u0002\u0002",
    "\u0002\u0768\u0776\u0003\u0002\u0002\u0002\u0769\u0767\u0003\u0002\u0002",
    "\u0002\u076a\u076b\u0007V\u0002\u0002\u076b\u076c\u0007\u0004\u0002",
    "\u0002\u076c\u0770\b;\u0001\u0002\u076d\u076f\u0005N(\u0002\u076e\u076d",
    "\u0003\u0002\u0002\u0002\u076f\u0772\u0003\u0002\u0002\u0002\u0770\u076e",
    "\u0003\u0002\u0002\u0002\u0770\u0771\u0003\u0002\u0002\u0002\u0771\u0773",
    "\u0003\u0002\u0002\u0002\u0772\u0770\u0003\u0002\u0002\u0002\u0773\u0774",
    "\u0007\u0006\u0002\u0002\u0774\u0777\u0005\u001c\u000f\u0002\u0775\u0777",
    "\u0005\u001a\u000e\u0002\u0776\u076a\u0003\u0002\u0002\u0002\u0776\u0775",
    "\u0003\u0002\u0002\u0002\u0777\u07b2\u0003\u0002\u0002\u0002\u0778\u0779",
    "\u0007\u0007\u0002\u0002\u0779\u077a\b;\u0001\u0002\u077a\u077b\u0005",
    "\u00dco\u0002\u077b\u077f\b;\u0001\u0002\u077c\u077e\u0005\u0016\f\u0002",
    "\u077d\u077c\u0003\u0002\u0002\u0002\u077e\u0781\u0003\u0002\u0002\u0002",
    "\u077f\u077d\u0003\u0002\u0002\u0002\u077f\u0780\u0003\u0002\u0002\u0002",
    "\u0780\u078e\u0003\u0002\u0002\u0002\u0781\u077f\u0003\u0002\u0002\u0002",
    "\u0782\u0783\u0007V\u0002\u0002\u0783\u0784\u0007\u0004\u0002\u0002",
    "\u0784\u0788\b;\u0001\u0002\u0785\u0787\u0005N(\u0002\u0786\u0785\u0003",
    "\u0002\u0002\u0002\u0787\u078a\u0003\u0002\u0002\u0002\u0788\u0786\u0003",
    "\u0002\u0002\u0002\u0788\u0789\u0003\u0002\u0002\u0002\u0789\u078b\u0003",
    "\u0002\u0002\u0002\u078a\u0788\u0003\u0002\u0002\u0002\u078b\u078c\u0007",
    "\u0006\u0002\u0002\u078c\u078f\u0005\u001c\u000f\u0002\u078d\u078f\u0005",
    "\u001a\u000e\u0002\u078e\u0782\u0003\u0002\u0002\u0002\u078e\u078d\u0003",
    "\u0002\u0002\u0002\u078f\u07b2\u0003\u0002\u0002\u0002\u0790\u0794\b",
    ";\u0001\u0002\u0791\u0793\u0005\u0016\f\u0002\u0792\u0791\u0003\u0002",
    "\u0002\u0002\u0793\u0796\u0003\u0002\u0002\u0002\u0794\u0792\u0003\u0002",
    "\u0002\u0002\u0794\u0795\u0003\u0002\u0002\u0002\u0795\u07a3\u0003\u0002",
    "\u0002\u0002\u0796\u0794\u0003\u0002\u0002\u0002\u0797\u0798\u0007V",
    "\u0002\u0002\u0798\u0799\u0007\u0004\u0002\u0002\u0799\u079d\b;\u0001",
    "\u0002\u079a\u079c\u0005N(\u0002\u079b\u079a\u0003\u0002\u0002\u0002",
    "\u079c\u079f\u0003\u0002\u0002\u0002\u079d\u079b\u0003\u0002\u0002\u0002",
    "\u079d\u079e\u0003\u0002\u0002\u0002\u079e\u07a0\u0003\u0002\u0002\u0002",
    "\u079f\u079d\u0003\u0002\u0002\u0002\u07a0\u07a1\u0007\u0006\u0002\u0002",
    "\u07a1\u07a4\u0005\u001c\u000f\u0002\u07a2\u07a4\u0005\u001a\u000e\u0002",
    "\u07a3\u0797\u0003\u0002\u0002\u0002\u07a3\u07a2\u0003\u0002\u0002\u0002",
    "\u07a4\u07b2\u0003\u0002\u0002\u0002\u07a5\u07ab\b;\u0001\u0002\u07a6",
    "\u07a7\u0007\u0005\u0002\u0002\u07a7\u07a8\b;\u0001\u0002\u07a8\u07aa",
    "\u0005n8\u0002\u07a9\u07a6\u0003\u0002\u0002\u0002\u07aa\u07ad\u0003",
    "\u0002\u0002\u0002\u07ab\u07a9\u0003\u0002\u0002\u0002\u07ab\u07ac\u0003",
    "\u0002\u0002\u0002\u07ac\u07ae\u0003\u0002\u0002\u0002\u07ad\u07ab\u0003",
    "\u0002\u0002\u0002\u07ae\u07af\u0005v<\u0002\u07af\u07b0\u0005\u001c",
    "\u000f\u0002\u07b0\u07b2\u0003\u0002\u0002\u0002\u07b1\u0756\u0003\u0002",
    "\u0002\u0002\u07b1\u0778\u0003\u0002\u0002\u0002\u07b1\u0790\u0003\u0002",
    "\u0002\u0002\u07b1\u07a5\u0003\u0002\u0002\u0002\u07b2\u07b4\u0003\u0002",
    "\u0002\u0002\u07b3\u06fb\u0003\u0002\u0002\u0002\u07b3\u06fe\u0003\u0002",
    "\u0002\u0002\u07b3\u070e\u0003\u0002\u0002\u0002\u07b3\u073e\u0003\u0002",
    "\u0002\u0002\u07b3\u0748\u0003\u0002\u0002\u0002\u07b3\u0754\u0003\u0002",
    "\u0002\u0002\u07b4\u07b6\u0003\u0002\u0002\u0002\u07b5\u06f7\u0003\u0002",
    "\u0002\u0002\u07b5\u06fa\u0003\u0002\u0002\u0002\u07b6u\u0003\u0002",
    "\u0002\u0002\u07b7\u07b8\b<\u0001\u0002\u07b8\u07bc\u0007\u0004\u0002",
    "\u0002\u07b9\u07bb\u0005R*\u0002\u07ba\u07b9\u0003\u0002\u0002\u0002",
    "\u07bb\u07be\u0003\u0002\u0002\u0002\u07bc\u07ba\u0003\u0002\u0002\u0002",
    "\u07bc\u07bd\u0003\u0002\u0002\u0002\u07bd\u07bf\u0003\u0002\u0002\u0002",
    "\u07be\u07bc\u0003\u0002\u0002\u0002\u07bf\u07c0\u0007\u0006\u0002\u0002",
    "\u07c0w\u0003\u0002\u0002\u0002\u07c1\u07c2\b=\u0001\u0002\u07c2\u07c6",
    "\u0007\u0092\u0002\u0002\u07c3\u07c5\u0005R*\u0002\u07c4\u07c3\u0003",
    "\u0002\u0002\u0002\u07c5\u07c8\u0003\u0002\u0002\u0002\u07c6\u07c4\u0003",
    "\u0002\u0002\u0002\u07c6\u07c7\u0003\u0002\u0002\u0002\u07c7\u07c9\u0003",
    "\u0002\u0002\u0002\u07c8\u07c6\u0003\u0002\u0002\u0002\u07c9\u07ca\u0007",
    "\u0006\u0002\u0002\u07cay\u0003\u0002\u0002\u0002\u07cb\u07cc\u0007",
    "E\u0002\u0002\u07cc\u07cd\u00076\u0002\u0002\u07cd\u07d1\b>\u0001\u0002",
    "\u07ce\u07cf\u0007n\u0002\u0002\u07cf\u07d1\b>\u0001\u0002\u07d0\u07cb",
    "\u0003\u0002\u0002\u0002\u07d0\u07ce\u0003\u0002\u0002\u0002\u07d1\u07ea",
    "\u0003\u0002\u0002\u0002\u07d2\u07d4\u0005v<\u0002\u07d3\u07d5\u0005",
    "h5\u0002\u07d4\u07d3\u0003\u0002\u0002\u0002\u07d4\u07d5\u0003\u0002",
    "\u0002\u0002\u07d5\u07eb\u0003\u0002\u0002\u0002\u07d6\u07d8\u0005\u008a",
    "F\u0002\u07d7\u07d9\u0005h5\u0002\u07d8\u07d7\u0003\u0002\u0002\u0002",
    "\u07d8\u07d9\u0003\u0002\u0002\u0002\u07d9\u07eb\u0003\u0002\u0002\u0002",
    "\u07da\u07dc\u0005\u008cG\u0002\u07db\u07dd\u0005h5\u0002\u07dc\u07db",
    "\u0003\u0002\u0002\u0002\u07dc\u07dd\u0003\u0002\u0002\u0002\u07dd\u07e8",
    "\u0003\u0002\u0002\u0002\u07de\u07df\u0007V\u0002\u0002\u07df\u07e0",
    "\u0007\u0004\u0002\u0002\u07e0\u07e4\b>\u0001\u0002\u07e1\u07e3\u0005",
    "N(\u0002\u07e2\u07e1\u0003\u0002\u0002\u0002\u07e3\u07e6\u0003\u0002",
    "\u0002\u0002\u07e4\u07e2\u0003\u0002\u0002\u0002\u07e4\u07e5\u0003\u0002",
    "\u0002\u0002\u07e5\u07e7\u0003\u0002\u0002\u0002\u07e6\u07e4\u0003\u0002",
    "\u0002\u0002\u07e7\u07e9\u0007\u0006\u0002\u0002\u07e8\u07de\u0003\u0002",
    "\u0002\u0002\u07e8\u07e9\u0003\u0002\u0002\u0002\u07e9\u07eb\u0003\u0002",
    "\u0002\u0002\u07ea\u07d2\u0003\u0002\u0002\u0002\u07ea\u07d6\u0003\u0002",
    "\u0002\u0002\u07ea\u07da\u0003\u0002\u0002\u0002\u07eb{\u0003\u0002",
    "\u0002\u0002\u07ec\u07ee\u0007H\u0002\u0002\u07ed\u07ef\u0005\u0086",
    "D\u0002\u07ee\u07ed\u0003\u0002\u0002\u0002\u07ee\u07ef\u0003\u0002",
    "\u0002\u0002\u07ef\u07f0\u0003\u0002\u0002\u0002\u07f0\u07f1\u0007\u0084",
    "\u0002\u0002\u07f1\u07f9\b?\u0001\u0002\u07f2\u07f4\u0007K\u0002\u0002",
    "\u07f3\u07f5\u0005\u0086D\u0002\u07f4\u07f3\u0003\u0002\u0002\u0002",
    "\u07f4\u07f5\u0003\u0002\u0002\u0002\u07f5\u07f6\u0003\u0002\u0002\u0002",
    "\u07f6\u07f7\u00076\u0002\u0002\u07f7\u07f9\b?\u0001\u0002\u07f8\u07ec",
    "\u0003\u0002\u0002\u0002\u07f8\u07f2\u0003\u0002\u0002\u0002\u07f9\u07fa",
    "\u0003\u0002\u0002\u0002\u07fa\u07fb\b?\u0001\u0002\u07fb}\u0003\u0002",
    "\u0002\u0002\u07fc\u07fd\u0007\u0004\u0002\u0002\u07fd\u0807\b@\u0001",
    "\u0002\u07fe\u0804\u0005\u0088E\u0002\u07ff\u0800\u0007\u0005\u0002",
    "\u0002\u0800\u0801\b@\u0001\u0002\u0801\u0803\u0005\u0088E\u0002\u0802",
    "\u07ff\u0003\u0002\u0002\u0002\u0803\u0806\u0003\u0002\u0002\u0002\u0804",
    "\u0802\u0003\u0002\u0002\u0002\u0804\u0805\u0003\u0002\u0002\u0002\u0805",
    "\u0808\u0003\u0002\u0002\u0002\u0806\u0804\u0003\u0002\u0002\u0002\u0807",
    "\u07fe\u0003\u0002\u0002\u0002\u0807\u0808\u0003\u0002\u0002\u0002\u0808",
    "\u0809\u0003\u0002\u0002\u0002\u0809\u080f\u0007\u0006\u0002\u0002\u080a",
    "\u080b\u00077\u0002\u0002\u080b\u080c\u0005\u00a6T\u0002\u080c\u080d",
    "\b@\u0001\u0002\u080d\u080f\u0003\u0002\u0002\u0002\u080e\u07fc\u0003",
    "\u0002\u0002\u0002\u080e\u080a\u0003\u0002\u0002\u0002\u080f\u007f\u0003",
    "\u0002\u0002\u0002\u0810\u0811\u0007\u0004\u0002\u0002\u0811\u081b\b",
    "A\u0001\u0002\u0812\u0818\u0005\u0088E\u0002\u0813\u0814\u0007\u0005",
    "\u0002\u0002\u0814\u0815\bA\u0001\u0002\u0815\u0817\u0005\u0088E\u0002",
    "\u0816\u0813\u0003\u0002\u0002\u0002\u0817\u081a\u0003\u0002\u0002\u0002",
    "\u0818\u0816\u0003\u0002\u0002\u0002\u0818\u0819\u0003\u0002\u0002\u0002",
    "\u0819\u081c\u0003\u0002\u0002\u0002\u081a\u0818\u0003\u0002\u0002\u0002",
    "\u081b\u0812\u0003\u0002\u0002\u0002\u081b\u081c\u0003\u0002\u0002\u0002",
    "\u081c\u081d\u0003\u0002\u0002\u0002\u081d\u081f\u0007\u0006\u0002\u0002",
    "\u081e\u0820\u0005h5\u0002\u081f\u081e\u0003\u0002\u0002\u0002\u081f",
    "\u0820\u0003\u0002\u0002\u0002\u0820\u0827\u0003\u0002\u0002\u0002\u0821",
    "\u0822\u00077\u0002\u0002\u0822\u0823\u0005\u00a6T\u0002\u0823\u0824",
    "\bA\u0001\u0002\u0824\u0827\u0003\u0002\u0002\u0002\u0825\u0827\u0005",
    "h5\u0002\u0826\u0810\u0003\u0002\u0002\u0002\u0826\u0821\u0003\u0002",
    "\u0002\u0002\u0826\u0825\u0003\u0002\u0002\u0002\u0826\u0827\u0003\u0002",
    "\u0002\u0002\u0827\u0828\u0003\u0002\u0002\u0002\u0828\u082c\bA\u0001",
    "\u0002\u0829\u082b\u0005\u0016\f\u0002\u082a\u0829\u0003\u0002\u0002",
    "\u0002\u082b\u082e\u0003\u0002\u0002\u0002\u082c\u082a\u0003\u0002\u0002",
    "\u0002\u082c\u082d\u0003\u0002\u0002\u0002\u082d\u082f\u0003\u0002\u0002",
    "\u0002\u082e\u082c\u0003\u0002\u0002\u0002\u082f\u0830\u0005\u001a\u000e",
    "\u0002\u0830\u0081\u0003\u0002\u0002\u0002\u0831\u0832\u0007w\u0002",
    "\u0002\u0832\u0833\bB\u0001\u0002\u0833\u0834\u0005\u00dco\u0002\u0834",
    "\u0083\u0003\u0002\u0002\u0002\u0835\u0836\u0007n\u0002\u0002\u0836",
    "\u0837\bC\u0001\u0002\u0837\u0838\u0005\u00dco\u0002\u0838\u0085\u0003",
    "\u0002\u0002\u0002\u0839\u083a\u0007\u000f\u0002\u0002\u083a\u084e\b",
    "D\u0001\u0002\u083b\u083c\u0007>\u0002\u0002\u083c\u083d\u0007\u0005",
    "\u0002\u0002\u083d\u0842\bD\u0001\u0002\u083e\u083f\u0007\u000e\u0002",
    "\u0002\u083f\u0840\u0007\u0005\u0002\u0002\u0840\u0842\bD\u0001\u0002",
    "\u0841\u083b\u0003\u0002\u0002\u0002\u0841\u083e\u0003\u0002\u0002\u0002",
    "\u0841\u0842\u0003\u0002\u0002\u0002\u0842\u0846\u0003\u0002\u0002\u0002",
    "\u0843\u0844\u0007>\u0002\u0002\u0844\u0845\u0007\u0010\u0002\u0002",
    "\u0845\u0847\bD\u0001\u0002\u0846\u0843\u0003\u0002\u0002\u0002\u0846",
    "\u0847\u0003\u0002\u0002\u0002\u0847\u084c\u0003\u0002\u0002\u0002\u0848",
    "\u0849\u0007>\u0002\u0002\u0849\u084d\bD\u0001\u0002\u084a\u084b\u0007",
    "\u000e\u0002\u0002\u084b\u084d\bD\u0001\u0002\u084c\u0848\u0003\u0002",
    "\u0002\u0002\u084c\u084a\u0003\u0002\u0002\u0002\u084d\u084f\u0003\u0002",
    "\u0002\u0002\u084e\u0841\u0003\u0002\u0002\u0002\u084e\u084f\u0003\u0002",
    "\u0002\u0002\u084f\u0850\u0003\u0002\u0002\u0002\u0850\u0851\u0007\u0011",
    "\u0002\u0002\u0851\u0087\u0003\u0002\u0002\u0002\u0852\u0855\u0005\u00dc",
    "o\u0002\u0853\u0854\u0007)\u0002\u0002\u0854\u0856\u0005\u00e4s\u0002",
    "\u0855\u0853\u0003\u0002\u0002\u0002\u0855\u0856\u0003\u0002\u0002\u0002",
    "\u0856\u0857\u0003\u0002\u0002\u0002\u0857\u0858\bE\u0001\u0002\u0858",
    "\u0089\u0003\u0002\u0002\u0002\u0859\u085a\u0007\u0085\u0002\u0002\u085a",
    "\u085b\u00076\u0002\u0002\u085b\u085c\bF\u0001\u0002\u085c\u0860\u0005",
    "\u00dco\u0002\u085d\u085e\u0007\u0007\u0002\u0002\u085e\u085f\bF\u0001",
    "\u0002\u085f\u0861\u0005\u00dco\u0002\u0860\u085d\u0003\u0002\u0002",
    "\u0002\u0860\u0861\u0003\u0002\u0002\u0002\u0861\u008b\u0003\u0002\u0002",
    "\u0002\u0862\u0873\u0005\u00dco\u0002\u0863\u0864\u0007\b\u0002\u0002",
    "\u0864\u0865\u0007>\u0002\u0002\u0865\u086c\bG\u0001\u0002\u0866\u0867",
    "\u0007\u0005\u0002\u0002\u0867\u0868\bG\u0001\u0002\u0868\u0869\u0007",
    ">\u0002\u0002\u0869\u086b\bG\u0001\u0002\u086a\u0866\u0003\u0002\u0002",
    "\u0002\u086b\u086e\u0003\u0002\u0002\u0002\u086c\u086a\u0003\u0002\u0002",
    "\u0002\u086c\u086d\u0003\u0002\u0002\u0002\u086d\u086f\u0003\u0002\u0002",
    "\u0002\u086e\u086c\u0003\u0002\u0002\u0002\u086f\u0874\u0007\t\u0002",
    "\u0002\u0870\u0871\u0007\u0007\u0002\u0002\u0871\u0872\bG\u0001\u0002",
    "\u0872\u0874\u0005\u00dco\u0002\u0873\u0863\u0003\u0002\u0002\u0002",
    "\u0873\u0870\u0003\u0002\u0002\u0002\u0873\u0874\u0003\u0002\u0002\u0002",
    "\u0874\u008d\u0003\u0002\u0002\u0002\u0875\u0876\u0005\u0096L\u0002",
    "\u0876\u088a\bH\u0001\u0002\u0877\u0879\u0007\u0086\u0002\u0002\u0878",
    "\u087a\t\u0003\u0002\u0002\u0879\u0878\u0003\u0002\u0002\u0002\u0879",
    "\u087a\u0003\u0002\u0002\u0002\u087a\u0884\u0003\u0002\u0002\u0002\u087b",
    "\u087d\u0007Z\u0002\u0002\u087c\u087e\u0007-\u0002\u0002\u087d\u087c",
    "\u0003\u0002\u0002\u0002\u087d\u087e\u0003\u0002\u0002\u0002\u087e\u0884",
    "\u0003\u0002\u0002\u0002\u087f\u0881\u0007p\u0002\u0002\u0880\u0882",
    "\u0007-\u0002\u0002\u0881\u0880\u0003\u0002\u0002\u0002\u0881\u0882",
    "\u0003\u0002\u0002\u0002\u0882\u0884\u0003\u0002\u0002\u0002\u0883\u0877",
    "\u0003\u0002\u0002\u0002\u0883\u087b\u0003\u0002\u0002\u0002\u0883\u087f",
    "\u0003\u0002\u0002\u0002\u0884\u0885\u0003\u0002\u0002\u0002\u0885\u0886",
    "\u0005\u0096L\u0002\u0886\u0887\bH\u0001\u0002\u0887\u0889\u0003\u0002",
    "\u0002\u0002\u0888\u0883\u0003\u0002\u0002\u0002\u0889\u088c\u0003\u0002",
    "\u0002\u0002\u088a\u0888\u0003\u0002\u0002\u0002\u088a\u088b\u0003\u0002",
    "\u0002\u0002\u088b\u0890\u0003\u0002\u0002\u0002\u088c\u088a\u0003\u0002",
    "\u0002\u0002\u088d\u088e\u0005\u0090I\u0002\u088e\u088f\bH\u0001\u0002",
    "\u088f\u0891\u0003\u0002\u0002\u0002\u0890\u088d\u0003\u0002\u0002\u0002",
    "\u0890\u0891\u0003\u0002\u0002\u0002\u0891\u0895\u0003\u0002\u0002\u0002",
    "\u0892\u0893\u0005\u0092J\u0002\u0893\u0894\bH\u0001\u0002\u0894\u0896",
    "\u0003\u0002\u0002\u0002\u0895\u0892\u0003\u0002\u0002\u0002\u0895\u0896",
    "\u0003\u0002\u0002\u0002\u0896\u008f\u0003\u0002\u0002\u0002\u0897\u0898",
    "\u0007y\u0002\u0002\u0898\u0899\u0007*\u0002\u0002\u0899\u089a\bI\u0001",
    "\u0002\u089a\u089b\u0005\u0094K\u0002\u089b\u08a2\bI\u0001\u0002\u089c",
    "\u089d\u0007\u0005\u0002\u0002\u089d\u089e\u0005\u0094K\u0002\u089e",
    "\u089f\bI\u0001\u0002\u089f\u08a1\u0003\u0002\u0002\u0002\u08a0\u089c",
    "\u0003\u0002\u0002\u0002\u08a1\u08a4\u0003\u0002\u0002\u0002\u08a2\u08a0",
    "\u0003\u0002\u0002\u0002\u08a2\u08a3\u0003\u0002\u0002\u0002\u08a3\u0091",
    "\u0003\u0002\u0002\u0002\u08a4\u08a2\u0003\u0002\u0002\u0002\u08a5\u08a6",
    "\u0007l\u0002\u0002\u08a6\u08ab\bJ\u0001\u0002\u08a7\u08a8\u0007>\u0002",
    "\u0002\u08a8\u08ac\bJ\u0001\u0002\u08a9\u08aa\u00075\u0002\u0002\u08aa",
    "\u08ac\bJ\u0001\u0002\u08ab\u08a7\u0003\u0002\u0002\u0002\u08ab\u08a9",
    "\u0003\u0002\u0002\u0002\u08ac\u08b0\u0003\u0002\u0002\u0002\u08ad\u08ae",
    "\u0007v\u0002\u0002\u08ae\u08af\u0007>\u0002\u0002\u08af\u08b1\bJ\u0001",
    "\u0002\u08b0\u08ad\u0003\u0002\u0002\u0002\u08b0\u08b1\u0003\u0002\u0002",
    "\u0002\u08b1\u0093\u0003\u0002\u0002\u0002\u08b2\u08b3\u0005\u00aeX",
    "\u0002\u08b3\u08b8\bK\u0001\u0002\u08b4\u08b5\u0007F\u0002\u0002\u08b5",
    "\u08b9\bK\u0001\u0002\u08b6\u08b7\u0007Q\u0002\u0002\u08b7\u08b9\bK",
    "\u0001\u0002\u08b8\u08b4\u0003\u0002\u0002\u0002\u08b8\u08b6\u0003\u0002",
    "\u0002\u0002\u08b8\u08b9\u0003\u0002\u0002\u0002\u08b9\u08bd\u0003\u0002",
    "\u0002\u0002\u08ba\u08bb\u0007u\u0002\u0002\u08bb\u08bc\t\u0004\u0002",
    "\u0002\u08bc\u08be\bK\u0001\u0002\u08bd\u08ba\u0003\u0002\u0002\u0002",
    "\u08bd\u08be\u0003\u0002\u0002\u0002\u08be\u0095\u0003\u0002\u0002\u0002",
    "\u08bf\u08c0\u0005\u0098M\u0002\u08c0\u08ca\bL\u0001\u0002\u08c1\u08c3",
    "\u0007d\u0002\u0002\u08c2\u08c4\u0007-\u0002\u0002\u08c3\u08c2\u0003",
    "\u0002\u0002\u0002\u08c3\u08c4\u0003\u0002\u0002\u0002\u08c4\u08c5\u0003",
    "\u0002\u0002\u0002\u08c5\u08c6\u0005\u0098M\u0002\u08c6\u08c7\bL\u0001",
    "\u0002\u08c7\u08c9\u0003\u0002\u0002\u0002\u08c8\u08c1\u0003\u0002\u0002",
    "\u0002\u08c9\u08cc\u0003\u0002\u0002\u0002\u08ca\u08c8\u0003\u0002\u0002",
    "\u0002\u08ca\u08cb\u0003\u0002\u0002\u0002\u08cb\u0097\u0003\u0002\u0002",
    "\u0002\u08cc\u08ca\u0003\u0002\u0002\u0002\u08cd\u08ce\u0007\b\u0002",
    "\u0002\u08ce\u08cf\u0005\u008eH\u0002\u08cf\u08d0\u0007\t\u0002\u0002",
    "\u08d0\u08d1\bM\u0001\u0002\u08d1\u092a\u0003\u0002\u0002\u0002\u08d2",
    "\u08d3\u00078\u0002\u0002\u08d3\u090c\bM\u0001\u0002\u08d4\u08d5\u0007",
    "0\u0002\u0002\u08d5\u08e0\u0005\u009aN\u0002\u08d6\u08d7\u0007r\u0002",
    "\u0002\u08d7\u08db\u0007\u0004\u0002\u0002\u08d8\u08da\u0005T+\u0002",
    "\u08d9\u08d8\u0003\u0002\u0002\u0002\u08da\u08dd\u0003\u0002\u0002\u0002",
    "\u08db\u08d9\u0003\u0002\u0002\u0002\u08db\u08dc\u0003\u0002\u0002\u0002",
    "\u08dc\u08de\u0003\u0002\u0002\u0002\u08dd\u08db\u0003\u0002\u0002\u0002",
    "\u08de\u08df\u0007\u0006\u0002\u0002\u08df\u08e1\u0007e\u0002\u0002",
    "\u08e0\u08d6\u0003\u0002\u0002\u0002\u08e0\u08e1\u0003\u0002\u0002\u0002",
    "\u08e1\u08e4\u0003\u0002\u0002\u0002\u08e2\u08e3\t\u0003\u0002\u0002",
    "\u08e3\u08e5\bM\u0001\u0002\u08e4\u08e2\u0003\u0002\u0002\u0002\u08e4",
    "\u08e5\u0003\u0002\u0002\u0002\u08e5\u08e7\u0003\u0002\u0002\u0002\u08e6",
    "\u08e8\u0005\\/\u0002\u08e7\u08e6\u0003\u0002\u0002\u0002\u08e7\u08e8",
    "\u0003\u0002\u0002\u0002\u08e8\u08f6\u0003\u0002\u0002\u0002\u08e9\u08ea",
    "\u0007[\u0002\u0002\u08ea\u08eb\u0007\u0004\u0002\u0002\u08eb\u08f1",
    "\u0005*\u0016\u0002\u08ec\u08ed\u0007\u0005\u0002\u0002\u08ed\u08ee",
    "\bM\u0001\u0002\u08ee\u08f0\u0005*\u0016\u0002\u08ef\u08ec\u0003\u0002",
    "\u0002\u0002\u08f0\u08f3\u0003\u0002\u0002\u0002\u08f1\u08ef\u0003\u0002",
    "\u0002\u0002\u08f1\u08f2\u0003\u0002\u0002\u0002\u08f2\u08f4\u0003\u0002",
    "\u0002\u0002\u08f3\u08f1\u0003\u0002\u0002\u0002\u08f4\u08f5\u0007\u0006",
    "\u0002\u0002\u08f5\u08f7\u0003\u0002\u0002\u0002\u08f6\u08e9\u0003\u0002",
    "\u0002\u0002\u08f6\u08f7\u0003\u0002\u0002\u0002\u08f7\u090d\u0003\u0002",
    "\u0002\u0002\u08f8\u08f9\t\u0003\u0002\u0002\u08f9\u08fb\bM\u0001\u0002",
    "\u08fa\u08f8\u0003\u0002\u0002\u0002\u08fa\u08fb\u0003\u0002\u0002\u0002",
    "\u08fb\u08fc\u0003\u0002\u0002\u0002\u08fc\u0900\bM\u0001\u0002\u08fd",
    "\u08fe\u0007\u000e\u0002\u0002\u08fe\u0901\bM\u0001\u0002\u08ff\u0901",
    "\u0005^0\u0002\u0900\u08fd\u0003\u0002\u0002\u0002\u0900\u08ff\u0003",
    "\u0002\u0002\u0002\u0901\u0907\u0003\u0002\u0002\u0002\u0902\u0903\u0007",
    "\u0005\u0002\u0002\u0903\u0904\bM\u0001\u0002\u0904\u0906\u0005^0\u0002",
    "\u0905\u0902\u0003\u0002\u0002\u0002\u0906\u0909\u0003\u0002\u0002\u0002",
    "\u0907\u0905\u0003\u0002\u0002\u0002\u0907\u0908\u0003\u0002\u0002\u0002",
    "\u0908\u090a\u0003\u0002\u0002\u0002\u0909\u0907\u0003\u0002\u0002\u0002",
    "\u090a\u090b\u00070\u0002\u0002\u090b\u090d\u0005\u009aN\u0002\u090c",
    "\u08d4\u0003\u0002\u0002\u0002\u090c\u08fa\u0003\u0002\u0002\u0002\u090d",
    "\u0912\u0003\u0002\u0002\u0002\u090e\u090f\u0007<\u0002\u0002\u090f",
    "\u0910\u0005\u00a6T\u0002\u0910\u0911\bM\u0001\u0002\u0911\u0913\u0003",
    "\u0002\u0002\u0002\u0912\u090e\u0003\u0002\u0002\u0002\u0912\u0913\u0003",
    "\u0002\u0002\u0002\u0913\u0921\u0003\u0002\u0002\u0002\u0914\u0915\u0007",
    "`\u0002\u0002\u0915\u0916\u0007*\u0002\u0002\u0916\u0917\u0005\u00ae",
    "X\u0002\u0917\u091e\bM\u0001\u0002\u0918\u0919\u0007\u0005\u0002\u0002",
    "\u0919\u091a\u0005\u00aeX\u0002\u091a\u091b\bM\u0001\u0002\u091b\u091d",
    "\u0003\u0002\u0002\u0002\u091c\u0918\u0003\u0002\u0002\u0002\u091d\u0920",
    "\u0003\u0002\u0002\u0002\u091e\u091c\u0003\u0002\u0002\u0002\u091e\u091f",
    "\u0003\u0002\u0002\u0002\u091f\u0922\u0003\u0002\u0002\u0002\u0920\u091e",
    "\u0003\u0002\u0002\u0002\u0921\u0914\u0003\u0002\u0002\u0002\u0921\u0922",
    "\u0003\u0002\u0002\u0002\u0922\u0927\u0003\u0002\u0002\u0002\u0923\u0924",
    "\u0007a\u0002\u0002\u0924\u0925\u0005\u00a6T\u0002\u0925\u0926\bM\u0001",
    "\u0002\u0926\u0928\u0003\u0002\u0002\u0002\u0927\u0923\u0003\u0002\u0002",
    "\u0002\u0927\u0928\u0003\u0002\u0002\u0002\u0928\u092a\u0003\u0002\u0002",
    "\u0002\u0929\u08cd\u0003\u0002\u0002\u0002\u0929\u08d2\u0003\u0002\u0002",
    "\u0002\u092a\u0099\u0003\u0002\u0002\u0002\u092b\u092c\u0005\u009cO",
    "\u0002\u092c\u0936\bN\u0001\u0002\u092d\u0932\bN\u0001\u0002\u092e\u092f",
    "\u0007\u0005\u0002\u0002\u092f\u0930\u0005\u009cO\u0002\u0930\u0931",
    "\bN\u0001\u0002\u0931\u0933\u0003\u0002\u0002\u0002\u0932\u092e\u0003",
    "\u0002\u0002\u0002\u0933\u0934\u0003\u0002\u0002\u0002\u0934\u0932\u0003",
    "\u0002\u0002\u0002\u0934\u0935\u0003\u0002\u0002\u0002\u0935\u0937\u0003",
    "\u0002\u0002\u0002\u0936\u092d\u0003\u0002\u0002\u0002\u0936\u0937\u0003",
    "\u0002\u0002\u0002\u0937\u009b\u0003\u0002\u0002\u0002\u0938\u0939\u0005",
    "\u00a2R\u0002\u0939\u0949\bO\u0001\u0002\u093a\u093b\u0005\u009eP\u0002",
    "\u093b\u093c\bO\u0001\u0002\u093c\u093d\u0005\u009cO\u0002\u093d\u093e",
    "\bO\u0001\u0002\u093e\u093f\u00077\u0002\u0002\u093f\u0940\u0005\u00a6",
    "T\u0002\u0940\u0941\bO\u0001\u0002\u0941\u0948\u0003\u0002\u0002\u0002",
    "\u0942\u0943\u0007M\u0002\u0002\u0943\u0944\u0007g\u0002\u0002\u0944",
    "\u0945\u0005\u00a2R\u0002\u0945\u0946\bO\u0001\u0002\u0946\u0948\u0003",
    "\u0002\u0002\u0002\u0947\u093a\u0003\u0002\u0002\u0002\u0947\u0942\u0003",
    "\u0002\u0002\u0002\u0948\u094b\u0003\u0002\u0002\u0002\u0949\u0947\u0003",
    "\u0002\u0002\u0002\u0949\u094a\u0003\u0002\u0002\u0002\u094a\u009d\u0003",
    "\u0002\u0002\u0002\u094b\u0949\u0003\u0002\u0002\u0002\u094c\u094d\u0007",
    "g\u0002\u0002\u094d\u0970\bP\u0001\u0002\u094e\u0950\u0007c\u0002\u0002",
    "\u094f\u0951\u0005\u00a0Q\u0002\u0950\u094f\u0003\u0002\u0002\u0002",
    "\u0950\u0951\u0003\u0002\u0002\u0002\u0951\u0952\u0003\u0002\u0002\u0002",
    "\u0952\u0953\u0007g\u0002\u0002\u0953\u0970\bP\u0001\u0002\u0954\u0956",
    "\u0007j\u0002\u0002\u0955\u0957\u0007z\u0002\u0002\u0956\u0955\u0003",
    "\u0002\u0002\u0002\u0956\u0957\u0003\u0002\u0002\u0002\u0957\u0959\u0003",
    "\u0002\u0002\u0002\u0958\u095a\u0005\u00a0Q\u0002\u0959\u0958\u0003",
    "\u0002\u0002\u0002\u0959\u095a\u0003\u0002\u0002\u0002\u095a\u095b\u0003",
    "\u0002\u0002\u0002\u095b\u095c\u0007g\u0002\u0002\u095c\u0970\bP\u0001",
    "\u0002\u095d\u095f\u0007\u007f\u0002\u0002\u095e\u0960\u0007z\u0002",
    "\u0002\u095f\u095e\u0003\u0002\u0002\u0002\u095f\u0960\u0003\u0002\u0002",
    "\u0002\u0960\u0962\u0003\u0002\u0002\u0002\u0961\u0963\u0005\u00a0Q",
    "\u0002\u0962\u0961\u0003\u0002\u0002\u0002\u0962\u0963\u0003\u0002\u0002",
    "\u0002\u0963\u0964\u0003\u0002\u0002\u0002\u0964\u0965\u0007g\u0002",
    "\u0002\u0965\u0970\bP\u0001\u0002\u0966\u0968\u0007^\u0002\u0002\u0967",
    "\u0969\u0007z\u0002\u0002\u0968\u0967\u0003\u0002\u0002\u0002\u0968",
    "\u0969\u0003\u0002\u0002\u0002\u0969\u096b\u0003\u0002\u0002\u0002\u096a",
    "\u096c\u0005\u00a0Q\u0002\u096b\u096a\u0003\u0002\u0002\u0002\u096b",
    "\u096c\u0003\u0002\u0002\u0002\u096c\u096d\u0003\u0002\u0002\u0002\u096d",
    "\u096e\u0007g\u0002\u0002\u096e\u0970\bP\u0001\u0002\u096f\u094c\u0003",
    "\u0002\u0002\u0002\u096f\u094e\u0003\u0002\u0002\u0002\u096f\u0954\u0003",
    "\u0002\u0002\u0002\u096f\u095d\u0003\u0002\u0002\u0002\u096f\u0966\u0003",
    "\u0002\u0002\u0002\u0970\u0971\u0003\u0002\u0002\u0002\u0971\u0972\b",
    "P\u0001\u0002\u0972\u009f\u0003\u0002\u0002\u0002\u0973\u0975\u0007",
    "Y\u0002\u0002\u0974\u0973\u0003\u0002\u0002\u0002\u0974\u0975\u0003",
    "\u0002\u0002\u0002\u0975\u0976\u0003\u0002\u0002\u0002\u0976\u0977\u0007",
    "w\u0002\u0002\u0977\u097b\bQ\u0001\u0002\u0978\u0979\u0007n\u0002\u0002",
    "\u0979\u097b\bQ\u0001\u0002\u097a\u0974\u0003\u0002\u0002\u0002\u097a",
    "\u0978\u0003\u0002\u0002\u0002\u097b\u097c\u0003\u0002\u0002\u0002\u097c",
    "\u0984\u0007\u0084\u0002\u0002\u097d\u097f\u0007Y\u0002\u0002\u097e",
    "\u097d\u0003\u0002\u0002\u0002\u097e\u097f\u0003\u0002\u0002\u0002\u097f",
    "\u0980\u0003\u0002\u0002\u0002\u0980\u0981\u0007w\u0002\u0002\u0981",
    "\u0985\bQ\u0001\u0002\u0982\u0983\u0007n\u0002\u0002\u0983\u0985\bQ",
    "\u0001\u0002\u0984\u097e\u0003\u0002\u0002\u0002\u0984\u0982\u0003\u0002",
    "\u0002\u0002\u0985\u00a1\u0003\u0002\u0002\u0002\u0986\u0987\bR\u0001",
    "\u0002\u0987\u098b\u0005\u00a4S\u0002\u0988\u0989\u0007\u0007\u0002",
    "\u0002\u0989\u098a\bR\u0001\u0002\u098a\u098c\u0005\u00a4S\u0002\u098b",
    "\u0988\u0003\u0002\u0002\u0002\u098b\u098c\u0003\u0002\u0002\u0002\u098c",
    "\u0994\u0003\u0002\u0002\u0002\u098d\u098e\u0007)\u0002\u0002\u098e",
    "\u098f\u0005\u00e4s\u0002\u098f\u0990\bR\u0001\u0002\u0990\u0995\u0003",
    "\u0002\u0002\u0002\u0991\u0992\u0005\u00e2r\u0002\u0992\u0993\bR\u0001",
    "\u0002\u0993\u0995\u0003\u0002\u0002\u0002\u0994\u098d\u0003\u0002\u0002",
    "\u0002\u0994\u0991\u0003\u0002\u0002\u0002\u0994\u0995\u0003\u0002\u0002",
    "\u0002\u0995\u09aa\u0003\u0002\u0002\u0002\u0996\u09a7\u0007\b\u0002",
    "\u0002\u0997\u0998\u0005\u008eH\u0002\u0998\u0999\u0007\t\u0002\u0002",
    "\u0999\u09a1\bR\u0001\u0002\u099a\u099b\u0007)\u0002\u0002\u099b\u099c",
    "\u0005\u00e4s\u0002\u099c\u099d\bR\u0001\u0002\u099d\u09a2\u0003\u0002",
    "\u0002\u0002\u099e\u099f\u0005\u00e2r\u0002\u099f\u09a0\bR\u0001\u0002",
    "\u09a0\u09a2\u0003\u0002\u0002\u0002\u09a1\u099a\u0003\u0002\u0002\u0002",
    "\u09a1\u099e\u0003\u0002\u0002\u0002\u09a2\u09a8\u0003\u0002\u0002\u0002",
    "\u09a3\u09a4\u0005\u009cO\u0002\u09a4\u09a5\u0007\t\u0002\u0002\u09a5",
    "\u09a6\bR\u0001\u0002\u09a6\u09a8\u0003\u0002\u0002\u0002\u09a7\u0997",
    "\u0003\u0002\u0002\u0002\u09a7\u09a3\u0003\u0002\u0002\u0002\u09a8\u09aa",
    "\u0003\u0002\u0002\u0002\u09a9\u0986\u0003\u0002\u0002\u0002\u09a9\u0996",
    "\u0003\u0002\u0002\u0002\u09aa\u00a3\u0003\u0002\u0002\u0002\u09ab\u09ac",
    "\u0005\u00e4s\u0002\u09ac\u09b2\bS\u0001\u0002\u09ad\u09af\u0005\u00ba",
    "^\u0002\u09ae\u09b0\u0005\u00c4c\u0002\u09af\u09ae\u0003\u0002\u0002",
    "\u0002\u09af\u09b0\u0003\u0002\u0002\u0002\u09b0\u09b3\u0003\u0002\u0002",
    "\u0002\u09b1\u09b3\u0005\u00c4c\u0002\u09b2\u09ad\u0003\u0002\u0002",
    "\u0002\u09b2\u09b1\u0003\u0002\u0002\u0002\u09b2\u09b3\u0003\u0002\u0002",
    "\u0002\u09b3\u09c0\u0003\u0002\u0002\u0002\u09b4\u09b5\u0007\u0012\u0002",
    "\u0002\u09b5\u09b6\u0005\u00e4s\u0002\u09b6\u09bc\bS\u0001\u0002\u09b7",
    "\u09b9\u0005\u00ba^\u0002\u09b8\u09ba\u0005\u00c4c\u0002\u09b9\u09b8",
    "\u0003\u0002\u0002\u0002\u09b9\u09ba\u0003\u0002\u0002\u0002\u09ba\u09bd",
    "\u0003\u0002\u0002\u0002\u09bb\u09bd\u0005\u00c4c\u0002\u09bc\u09b7",
    "\u0003\u0002\u0002\u0002\u09bc\u09bb\u0003\u0002\u0002\u0002\u09bc\u09bd",
    "\u0003\u0002\u0002\u0002\u09bd\u09bf\u0003\u0002\u0002\u0002\u09be\u09b4",
    "\u0003\u0002\u0002\u0002\u09bf\u09c2\u0003\u0002\u0002\u0002\u09c0\u09be",
    "\u0003\u0002\u0002\u0002\u09c0\u09c1\u0003\u0002\u0002\u0002\u09c1\u00a5",
    "\u0003\u0002\u0002\u0002\u09c2\u09c0\u0003\u0002\u0002\u0002\u09c3\u09c4",
    "\u0005\u00a8U\u0002\u09c4\u09cb\bT\u0001\u0002\u09c5\u09c6\u0007x\u0002",
    "\u0002\u09c6\u09c7\u0005\u00a8U\u0002\u09c7\u09c8\bT\u0001\u0002\u09c8",
    "\u09ca\u0003\u0002\u0002\u0002\u09c9\u09c5\u0003\u0002\u0002\u0002\u09ca",
    "\u09cd\u0003\u0002\u0002\u0002\u09cb\u09c9\u0003\u0002\u0002\u0002\u09cb",
    "\u09cc\u0003\u0002\u0002\u0002\u09cc\u00a7\u0003\u0002\u0002\u0002\u09cd",
    "\u09cb\u0003\u0002\u0002\u0002\u09ce\u09cf\u0005\u00aaV\u0002\u09cf",
    "\u09d6\bU\u0001\u0002\u09d0\u09d1\u0007B\u0002\u0002\u09d1\u09d2\u0005",
    "\u00aaV\u0002\u09d2\u09d3\bU\u0001\u0002\u09d3\u09d5\u0003\u0002\u0002",
    "\u0002\u09d4\u09d0\u0003\u0002\u0002\u0002\u09d5\u09d8\u0003\u0002\u0002",
    "\u0002\u09d6\u09d4\u0003\u0002\u0002\u0002\u09d6\u09d7\u0003\u0002\u0002",
    "\u0002\u09d7\u00a9\u0003\u0002\u0002\u0002\u09d8\u09d6\u0003\u0002\u0002",
    "\u0002\u09d9\u09da\u00074\u0002\u0002\u09da\u09db\u0005\u00aaV\u0002",
    "\u09db\u09dc\bV\u0001\u0002\u09dc\u0a03\u0003\u0002\u0002\u0002\u09dd",
    "\u09e8\u0007.\u0002\u0002\u09de\u09df\u0007\b\u0002\u0002\u09df\u09e0",
    "\u0005\u008eH\u0002\u09e0\u09e1\u0007\t\u0002\u0002\u09e1\u09e2\bV\u0001",
    "\u0002\u09e2\u09e9\u0003\u0002\u0002\u0002\u09e3\u09e4\t\u0005\u0002",
    "\u0002\u09e4\u09e9\bV\u0001\u0002\u09e5\u09e6\u0005\u00b8]\u0002\u09e6",
    "\u09e7\bV\u0001\u0002\u09e7\u09e9\u0003\u0002\u0002\u0002\u09e8\u09de",
    "\u0003\u0002\u0002\u0002\u09e8\u09e3\u0003\u0002\u0002\u0002\u09e8\u09e5",
    "\u0003\u0002\u0002\u0002\u09e9\u0a03\u0003\u0002\u0002\u0002\u09ea\u0a00",
    "\u0005\u00aeX\u0002\u09eb\u09ec\t\u0006\u0002\u0002\u09ec\u09ef\bV\u0001",
    "\u0002\u09ed\u09ee\t\u0007\u0002\u0002\u09ee\u09f0\bV\u0001\u0002\u09ef",
    "\u09ed\u0003\u0002\u0002\u0002\u09ef\u09f0\u0003\u0002\u0002\u0002\u09f0",
    "\u09f1\u0003\u0002\u0002\u0002\u09f1\u09f2\u0005\u00aeX\u0002\u09f2",
    "\u09f3\bV\u0001\u0002\u09f3\u0a01\u0003\u0002\u0002\u0002\u09f4\u09f8",
    "\u0007f\u0002\u0002\u09f5\u09f6\u00074\u0002\u0002\u09f6\u09f9\u0007",
    "5\u0002\u0002\u09f7\u09f9\u00075\u0002\u0002\u09f8\u09f5\u0003\u0002",
    "\u0002\u0002\u09f8\u09f7\u0003\u0002\u0002\u0002\u09f9\u09fa\u0003\u0002",
    "\u0002\u0002\u09fa\u0a01\bV\u0001\u0002\u09fb\u09fc\bV\u0001\u0002\u09fc",
    "\u09fd\u00074\u0002\u0002\u09fd\u0a01\u0005\u00acW\u0002\u09fe\u09ff",
    "\bV\u0001\u0002\u09ff\u0a01\u0005\u00acW\u0002\u0a00\u09eb\u0003\u0002",
    "\u0002\u0002\u0a00\u09f4\u0003\u0002\u0002\u0002\u0a00\u09fb\u0003\u0002",
    "\u0002\u0002\u0a00\u09fe\u0003\u0002\u0002\u0002\u0a00\u0a01\u0003\u0002",
    "\u0002\u0002\u0a01\u0a03\u0003\u0002\u0002\u0002\u0a02\u09d9\u0003\u0002",
    "\u0002\u0002\u0a02\u09dd\u0003\u0002\u0002\u0002\u0a02\u09ea\u0003\u0002",
    "\u0002\u0002\u0a03\u00ab\u0003\u0002\u0002\u0002\u0a04\u0a05\u00071",
    "\u0002\u0002\u0a05\u0a06\u0005\u00aeX\u0002\u0a06\u0a07\bW\u0001\u0002",
    "\u0a07\u0a19\u0003\u0002\u0002\u0002\u0a08\u0a09\u0007I\u0002\u0002",
    "\u0a09\u0a0a\u0005\u00aeX\u0002\u0a0a\u0a0b\bW\u0001\u0002\u0a0b\u0a0c",
    "\u0007B\u0002\u0002\u0a0c\u0a0d\u0005\u00aeX\u0002\u0a0d\u0a0e\bW\u0001",
    "\u0002\u0a0e\u0a19\u0003\u0002\u0002\u0002\u0a0f\u0a10\u0007k\u0002",
    "\u0002\u0a10\u0a11\u0005\u00aeX\u0002\u0a11\u0a16\bW\u0001\u0002\u0a12",
    "\u0a13\u0007X\u0002\u0002\u0a13\u0a14\u0005\u00aeX\u0002\u0a14\u0a15",
    "\bW\u0001\u0002\u0a15\u0a17\u0003\u0002\u0002\u0002\u0a16\u0a12\u0003",
    "\u0002\u0002\u0002\u0a16\u0a17\u0003\u0002\u0002\u0002\u0a17\u0a19\u0003",
    "\u0002\u0002\u0002\u0a18\u0a04\u0003\u0002\u0002\u0002\u0a18\u0a08\u0003",
    "\u0002\u0002\u0002\u0a18\u0a0f\u0003\u0002\u0002\u0002\u0a19\u00ad\u0003",
    "\u0002\u0002\u0002\u0a1a\u0a1b\u0005\u00b0Y\u0002\u0a1b\u0a22\bX\u0001",
    "\u0002\u0a1c\u0a1d\u0007\u001a\u0002\u0002\u0a1d\u0a1e\u0005\u00b0Y",
    "\u0002\u0a1e\u0a1f\bX\u0001\u0002\u0a1f\u0a21\u0003\u0002\u0002\u0002",
    "\u0a20\u0a1c\u0003\u0002\u0002\u0002\u0a21\u0a24\u0003\u0002\u0002\u0002",
    "\u0a22\u0a20\u0003\u0002\u0002\u0002\u0a22\u0a23\u0003\u0002\u0002\u0002",
    "\u0a23\u00af\u0003\u0002\u0002\u0002\u0a24\u0a22\u0003\u0002\u0002\u0002",
    "\u0a25\u0a26\u0005\u00b2Z\u0002\u0a26\u0a2d\bY\u0001\u0002\u0a27\u0a28",
    "\t\b\u0002\u0002\u0a28\u0a29\u0005\u00b2Z\u0002\u0a29\u0a2a\bY\u0001",
    "\u0002\u0a2a\u0a2c\u0003\u0002\u0002\u0002\u0a2b\u0a27\u0003\u0002\u0002",
    "\u0002\u0a2c\u0a2f\u0003\u0002\u0002\u0002\u0a2d\u0a2b\u0003\u0002\u0002",
    "\u0002\u0a2d\u0a2e\u0003\u0002\u0002\u0002\u0a2e\u00b1\u0003\u0002\u0002",
    "\u0002\u0a2f\u0a2d\u0003\u0002\u0002\u0002\u0a30\u0a31\u0005\u00b4[",
    "\u0002\u0a31\u0a38\bZ\u0001\u0002\u0a32\u0a33\t\t\u0002\u0002\u0a33",
    "\u0a34\u0005\u00b4[\u0002\u0a34\u0a35\bZ\u0001\u0002\u0a35\u0a37\u0003",
    "\u0002\u0002\u0002\u0a36\u0a32\u0003\u0002\u0002\u0002\u0a37\u0a3a\u0003",
    "\u0002\u0002\u0002\u0a38\u0a36\u0003\u0002\u0002\u0002\u0a38\u0a39\u0003",
    "\u0002\u0002\u0002\u0a39\u00b3\u0003\u0002\u0002\u0002\u0a3a\u0a38\u0003",
    "\u0002\u0002\u0002\u0a3b\u0a3c\t\b\u0002\u0002\u0a3c\u0a3d\u0005\u00b4",
    "[\u0002\u0a3d\u0a3e\b[\u0001\u0002\u0a3e\u0a91\u0003\u0002\u0002\u0002",
    "\u0a3f\u0a40\u0005\u00dan\u0002\u0a40\u0a41\b[\u0001\u0002\u0a41\u0a8f",
    "\u0003\u0002\u0002\u0002\u0a42\u0a43\u0005\u00b6\\\u0002\u0a43\u0a44",
    "\b[\u0001\u0002\u0a44\u0a8f\u0003\u0002\u0002\u0002\u0a45\u0a46\u0007",
    "+\u0002\u0002\u0a46\u0a5d\b[\u0001\u0002\u0a47\u0a48\u0005\u00aeX\u0002",
    "\u0a48\u0a4f\b[\u0001\u0002\u0a49\u0a4a\u0007:\u0002\u0002\u0a4a\u0a4b",
    "\u0005\u00aeX\u0002\u0a4b\u0a4c\u0007\u0082\u0002\u0002\u0a4c\u0a4d",
    "\u0005\u00aeX\u0002\u0a4d\u0a4e\b[\u0001\u0002\u0a4e\u0a50\u0003\u0002",
    "\u0002\u0002\u0a4f\u0a49\u0003\u0002\u0002\u0002\u0a50\u0a51\u0003\u0002",
    "\u0002\u0002\u0a51\u0a4f\u0003\u0002\u0002\u0002\u0a51\u0a52\u0003\u0002",
    "\u0002\u0002\u0a52\u0a5e\u0003\u0002\u0002\u0002\u0a53\u0a54\u0007:",
    "\u0002\u0002\u0a54\u0a55\u0005\u00a6T\u0002\u0a55\u0a56\u0007\u0082",
    "\u0002\u0002\u0a56\u0a57\u0005\u00aeX\u0002\u0a57\u0a58\b[\u0001\u0002",
    "\u0a58\u0a5a\u0003\u0002\u0002\u0002\u0a59\u0a53\u0003\u0002\u0002\u0002",
    "\u0a5a\u0a5b\u0003\u0002\u0002\u0002\u0a5b\u0a59\u0003\u0002\u0002\u0002",
    "\u0a5b\u0a5c\u0003\u0002\u0002\u0002\u0a5c\u0a5e\u0003\u0002\u0002\u0002",
    "\u0a5d\u0a47\u0003\u0002\u0002\u0002\u0a5d\u0a59\u0003\u0002\u0002\u0002",
    "\u0a5e\u0a63\u0003\u0002\u0002\u0002\u0a5f\u0a60\u0007S\u0002\u0002",
    "\u0a60\u0a61\u0005\u00aeX\u0002\u0a61\u0a62\b[\u0001\u0002\u0a62\u0a64",
    "\u0003\u0002\u0002\u0002\u0a63\u0a5f\u0003\u0002\u0002\u0002\u0a63\u0a64",
    "\u0003\u0002\u0002\u0002\u0a64\u0a65\u0003\u0002\u0002\u0002\u0a65\u0a66",
    "\u0007T\u0002\u0002\u0a66\u0a8f\u0003\u0002\u0002\u0002\u0a67\u0a68",
    "\u00073\u0002\u0002\u0a68\u0a69\u0005\u00b8]\u0002\u0a69\u0a6a\b[\u0001",
    "\u0002\u0a6a\u0a8f\u0003\u0002\u0002\u0002\u0a6b\u0a6c\u0005\u00b8]",
    "\u0002\u0a6c\u0a6d\b[\u0001\u0002\u0a6d\u0a8f\u0003\u0002\u0002\u0002",
    "\u0a6e\u0a74\u0007\u0007\u0002\u0002\u0a6f\u0a70\u0005\u00b8]\u0002",
    "\u0a70\u0a71\b[\u0001\u0002\u0a71\u0a75\u0003\u0002\u0002\u0002\u0a72",
    "\u0a73\u0007>\u0002\u0002\u0a73\u0a75\b[\u0001\u0002\u0a74\u0a6f\u0003",
    "\u0002\u0002\u0002\u0a74\u0a72\u0003\u0002\u0002\u0002\u0a75\u0a8f\u0003",
    "\u0002\u0002\u0002\u0a76\u0a77\t\u0005\u0002\u0002\u0a77\u0a8f\b[\u0001",
    "\u0002\u0a78\u0a8c\u0007\b\u0002\u0002\u0a79\u0a7a\u0005\u008eH\u0002",
    "\u0a7a\u0a7b\u0007\t\u0002\u0002\u0a7b\u0a7c\b[\u0001\u0002\u0a7c\u0a8d",
    "\u0003\u0002\u0002\u0002\u0a7d\u0a7e\u0005\u00a6T\u0002\u0a7e\u0a86",
    "\b[\u0001\u0002\u0a7f\u0a80\u0007\u0005\u0002\u0002\u0a80\u0a81\b[\u0001",
    "\u0002\u0a81\u0a82\u0005\u00aeX\u0002\u0a82\u0a83\b[\u0001\u0002\u0a83",
    "\u0a85\u0003\u0002\u0002\u0002\u0a84\u0a7f\u0003\u0002\u0002\u0002\u0a85",
    "\u0a88\u0003\u0002\u0002\u0002\u0a86\u0a84\u0003\u0002\u0002\u0002\u0a86",
    "\u0a87\u0003\u0002\u0002\u0002\u0a87\u0a89\u0003\u0002\u0002\u0002\u0a88",
    "\u0a86\u0003\u0002\u0002\u0002\u0a89\u0a8a\u0007\t\u0002\u0002\u0a8a",
    "\u0a8b\b[\u0001\u0002\u0a8b\u0a8d\u0003\u0002\u0002\u0002\u0a8c\u0a79",
    "\u0003\u0002\u0002\u0002\u0a8c\u0a7d\u0003\u0002\u0002\u0002\u0a8d\u0a8f",
    "\u0003\u0002\u0002\u0002\u0a8e\u0a3f\u0003\u0002\u0002\u0002\u0a8e\u0a42",
    "\u0003\u0002\u0002\u0002\u0a8e\u0a45\u0003\u0002\u0002\u0002\u0a8e\u0a67",
    "\u0003\u0002\u0002\u0002\u0a8e\u0a6b\u0003\u0002\u0002\u0002\u0a8e\u0a6e",
    "\u0003\u0002\u0002\u0002\u0a8e\u0a76\u0003\u0002\u0002\u0002\u0a8e\u0a78",
    "\u0003\u0002\u0002\u0002\u0a8f\u0a91\u0003\u0002\u0002\u0002\u0a90\u0a3b",
    "\u0003\u0002\u0002\u0002\u0a90\u0a8e\u0003\u0002\u0002\u0002\u0a91\u00b5",
    "\u0003\u0002\u0002\u0002\u0a92\u0a93\u0007;\u0002\u0002\u0a93\u0a94",
    "\u0007\b\u0002\u0002\u0a94\u0aa9\b\\\u0001\u0002\u0a95\u0a96\t\n\u0002",
    "\u0002\u0a96\u0a9a\b\\\u0001\u0002\u0a97\u0a98\u0005\u00aeX\u0002\u0a98",
    "\u0a99\b\\\u0001\u0002\u0a99\u0a9b\u0003\u0002\u0002\u0002\u0a9a\u0a97",
    "\u0003\u0002\u0002\u0002\u0a9a\u0a9b\u0003\u0002\u0002\u0002\u0a9b\u0a9c",
    "\u0003\u0002\u0002\u0002\u0a9c\u0a9d\u00070\u0002\u0002\u0a9d\u0a9e",
    "\u0005\u00aeX\u0002\u0a9e\u0a9f\b\\\u0001\u0002\u0a9f\u0aaa\u0003\u0002",
    "\u0002\u0002\u0aa0\u0aa7\u0005\u00aeX\u0002\u0aa1\u0aa2\b\\\u0001\u0002",
    "\u0aa2\u0aa3\u00070\u0002\u0002\u0aa3\u0aa4\u0005\u00aeX\u0002\u0aa4",
    "\u0aa5\b\\\u0001\u0002\u0aa5\u0aa8\u0003\u0002\u0002\u0002\u0aa6\u0aa8",
    "\b\\\u0001\u0002\u0aa7\u0aa1\u0003\u0002\u0002\u0002\u0aa7\u0aa6\u0003",
    "\u0002\u0002\u0002\u0aa8\u0aaa\u0003\u0002\u0002\u0002\u0aa9\u0a95\u0003",
    "\u0002\u0002\u0002\u0aa9\u0aa0\u0003\u0002\u0002\u0002\u0aaa\u0aab\u0003",
    "\u0002\u0002\u0002\u0aab\u0aac\u0007\t\u0002\u0002\u0aac\u0ac0\u0003",
    "\u0002\u0002\u0002\u0aad\u0aae\u0007/\u0002\u0002\u0aae\u0aaf\u0007",
    "\b\u0002\u0002\u0aaf\u0ab0\b\\\u0001\u0002\u0ab0\u0ab1\t\u000b\u0002",
    "\u0002\u0ab1\u0ab2\u00070\u0002\u0002\u0ab2\u0ab3\u0005\u00aeX\u0002",
    "\u0ab3\u0ab4\b\\\u0001\u0002\u0ab4\u0ab5\u0007\t\u0002\u0002\u0ab5\u0ac0",
    "\u0003\u0002\u0002\u0002\u0ab6\u0ab7\u0007,\u0002\u0002\u0ab7\u0ab8",
    "\u0007\b\u0002\u0002\u0ab8\u0ab9\b\\\u0001\u0002\u0ab9\u0aba\u0005\u00ae",
    "X\u0002\u0aba\u0abb\u0007)\u0002\u0002\u0abb\u0abc\u0005\u008cG\u0002",
    "\u0abc\u0abd\b\\\u0001\u0002\u0abd\u0abe\u0007\t\u0002\u0002\u0abe\u0ac0",
    "\u0003\u0002\u0002\u0002\u0abf\u0a92\u0003\u0002\u0002\u0002\u0abf\u0aad",
    "\u0003\u0002\u0002\u0002\u0abf\u0ab6\u0003\u0002\u0002\u0002\u0ac0\u00b7",
    "\u0003\u0002\u0002\u0002\u0ac1\u0ac2\u0005\u00e4s\u0002\u0ac2\u0ac8",
    "\b]\u0001\u0002\u0ac3\u0ac5\u0005\u00bc_\u0002\u0ac4\u0ac6\u0005\u00c4",
    "c\u0002\u0ac5\u0ac4\u0003\u0002\u0002\u0002\u0ac5\u0ac6\u0003\u0002",
    "\u0002\u0002\u0ac6\u0ac9\u0003\u0002\u0002\u0002\u0ac7\u0ac9\u0005\u00c4",
    "c\u0002\u0ac8\u0ac3\u0003\u0002\u0002\u0002\u0ac8\u0ac7\u0003\u0002",
    "\u0002\u0002\u0ac8\u0ac9\u0003\u0002\u0002\u0002\u0ac9\u0ad6\u0003\u0002",
    "\u0002\u0002\u0aca\u0acb\u0007\u0012\u0002\u0002\u0acb\u0acc\u0005\u00e4",
    "s\u0002\u0acc\u0ad2\b]\u0001\u0002\u0acd\u0acf\u0005\u00bc_\u0002\u0ace",
    "\u0ad0\u0005\u00c4c\u0002\u0acf\u0ace\u0003\u0002\u0002\u0002\u0acf",
    "\u0ad0\u0003\u0002\u0002\u0002\u0ad0\u0ad3\u0003\u0002\u0002\u0002\u0ad1",
    "\u0ad3\u0005\u00c4c\u0002\u0ad2\u0acd\u0003\u0002\u0002\u0002\u0ad2",
    "\u0ad1\u0003\u0002\u0002\u0002\u0ad2\u0ad3\u0003\u0002\u0002\u0002\u0ad3",
    "\u0ad5\u0003\u0002\u0002\u0002\u0ad4\u0aca\u0003\u0002\u0002\u0002\u0ad5",
    "\u0ad8\u0003\u0002\u0002\u0002\u0ad6\u0ad4\u0003\u0002\u0002\u0002\u0ad6",
    "\u0ad7\u0003\u0002\u0002\u0002\u0ad7\u00b9\u0003\u0002\u0002\u0002\u0ad8",
    "\u0ad6\u0003\u0002\u0002\u0002\u0ad9\u0ada\u0007\b\u0002\u0002\u0ada",
    "\u0ae0\u0005\u00be`\u0002\u0adb\u0adc\u0007\u0005\u0002\u0002\u0adc",
    "\u0add\b^\u0001\u0002\u0add\u0adf\u0005\u00be`\u0002\u0ade\u0adb\u0003",
    "\u0002\u0002\u0002\u0adf\u0ae2\u0003\u0002\u0002\u0002\u0ae0\u0ade\u0003",
    "\u0002\u0002\u0002\u0ae0\u0ae1\u0003\u0002\u0002\u0002\u0ae1\u0ae3\u0003",
    "\u0002\u0002\u0002\u0ae2\u0ae0\u0003\u0002\u0002\u0002\u0ae3\u0ae4\u0007",
    "\t\u0002\u0002\u0ae4\u00bb\u0003\u0002\u0002\u0002\u0ae5\u0ae6\u0007",
    "\b\u0002\u0002\u0ae6\u0b19\b_\u0001\u0002\u0ae7\u0aed\u0005\u00be`\u0002",
    "\u0ae8\u0ae9\u0007\u0005\u0002\u0002\u0ae9\u0aea\b_\u0001\u0002\u0aea",
    "\u0aec\u0005\u00be`\u0002\u0aeb\u0ae8\u0003\u0002\u0002\u0002\u0aec",
    "\u0aef\u0003\u0002\u0002\u0002\u0aed\u0aeb\u0003\u0002\u0002\u0002\u0aed",
    "\u0aee\u0003\u0002\u0002\u0002\u0aee\u0b1a\u0003\u0002\u0002\u0002\u0aef",
    "\u0aed\u0003\u0002\u0002\u0002\u0af0\u0af1\b_\u0001\u0002\u0af1\u0af7",
    "\u0005\u00c0a\u0002\u0af2\u0af3\u0007\u0005\u0002\u0002\u0af3\u0af4",
    "\b_\u0001\u0002\u0af4\u0af6\u0005\u00c0a\u0002\u0af5\u0af2\u0003\u0002",
    "\u0002\u0002\u0af6\u0af9\u0003\u0002\u0002\u0002\u0af7\u0af5\u0003\u0002",
    "\u0002\u0002\u0af7\u0af8\u0003\u0002\u0002\u0002\u0af8\u0b1a\u0003\u0002",
    "\u0002\u0002\u0af9\u0af7\u0003\u0002\u0002\u0002\u0afa\u0afb\b_\u0001",
    "\u0002\u0afb\u0b01\u0005\u00c2b\u0002\u0afc\u0afd\u0007\u0005\u0002",
    "\u0002\u0afd\u0afe\b_\u0001\u0002\u0afe\u0b00\u0005\u00c2b\u0002\u0aff",
    "\u0afc\u0003\u0002\u0002\u0002\u0b00\u0b03\u0003\u0002\u0002\u0002\u0b01",
    "\u0aff\u0003\u0002\u0002\u0002\u0b01\u0b02\u0003\u0002\u0002\u0002\u0b02",
    "\u0b1a\u0003\u0002\u0002\u0002\u0b03\u0b01\u0003\u0002\u0002\u0002\u0b04",
    "\u0b05\u0007\'\u0002\u0002\u0b05\u0b06\b_\u0001\u0002\u0b06\u0b07\u0005",
    "\u00aeX\u0002\u0b07\u0b08\b_\u0001\u0002\u0b08\u0b1a\u0003\u0002\u0002",
    "\u0002\u0b09\u0b0a\u0007-\u0002\u0002\u0b0a\u0b0b\b_\u0001\u0002\u0b0b",
    "\u0b0c\u0005\u00aeX\u0002\u0b0c\u0b13\b_\u0001\u0002\u0b0d\u0b0e\u0007",
    "\u0005\u0002\u0002\u0b0e\u0b0f\u0005\u00aeX\u0002\u0b0f\u0b10\b_\u0001",
    "\u0002\u0b10\u0b12\u0003\u0002\u0002\u0002\u0b11\u0b0d\u0003\u0002\u0002",
    "\u0002\u0b12\u0b15\u0003\u0002\u0002\u0002\u0b13\u0b11\u0003\u0002\u0002",
    "\u0002\u0b13\u0b14\u0003\u0002\u0002\u0002\u0b14\u0b1a\u0003\u0002\u0002",
    "\u0002\u0b15\u0b13\u0003\u0002\u0002\u0002\u0b16\u0b17\u0007\u000e\u0002",
    "\u0002\u0b17\u0b1a\b_\u0001\u0002\u0b18\u0b1a\b_\u0001\u0002\u0b19\u0ae7",
    "\u0003\u0002\u0002\u0002\u0b19\u0af0\u0003\u0002\u0002\u0002\u0b19\u0afa",
    "\u0003\u0002\u0002\u0002\u0b19\u0b04\u0003\u0002\u0002\u0002\u0b19\u0b09",
    "\u0003\u0002\u0002\u0002\u0b19\u0b16\u0003\u0002\u0002\u0002\u0b19\u0b18",
    "\u0003\u0002\u0002\u0002\u0b1a\u0b1b\u0003\u0002\u0002\u0002\u0b1b\u0b1c",
    "\u0007\t\u0002\u0002\u0b1c\u00bd\u0003\u0002\u0002\u0002\u0b1d\u0b1e",
    "\u0005\u00e4s\u0002\u0b1e\u0b1f\u0007\u0007\u0002\u0002\u0b1f\u0b20",
    "\u0005\u00aeX\u0002\u0b20\u0b21\b`\u0001\u0002\u0b21\u00bf\u0003\u0002",
    "\u0002\u0002\u0b22\u0b23\u0005\u00e4s\u0002\u0b23\u0b24\u0007\u001c",
    "\u0002\u0002\u0b24\u0b25\u0005\u00aeX\u0002\u0b25\u0b26\ba\u0001\u0002",
    "\u0b26\u00c1\u0003\u0002\u0002\u0002\u0b27\u0b28\u0007\u0090\u0002\u0002",
    "\u0b28\u0b2d\bb\u0001\u0002\u0b29\u0b2a\u0005\u00aeX\u0002\u0b2a\u0b2b",
    "\bb\u0001\u0002\u0b2b\u0b2d\u0003\u0002\u0002\u0002\u0b2c\u0b27\u0003",
    "\u0002\u0002\u0002\u0b2c\u0b29\u0003\u0002\u0002\u0002\u0b2d\u00c3\u0003",
    "\u0002\u0002\u0002\u0b2e\u0b30\u0007\u000f\u0002\u0002\u0b2f\u0b31\u0005",
    "\u00c6d\u0002\u0b30\u0b2f\u0003\u0002\u0002\u0002\u0b30\u0b31\u0003",
    "\u0002\u0002\u0002\u0b31\u0b32\u0003\u0002\u0002\u0002\u0b32\u0b33\u0005",
    "\u00c8e\u0002\u0b33\u0b34\u0005\u00a6T\u0002\u0b34\u0b35\bc\u0001\u0002",
    "\u0b35\u0b36\u0007\u0011\u0002\u0002\u0b36\u00c5\u0003\u0002\u0002\u0002",
    "\u0b37\u0b38\bd\u0001\u0002\u0b38\u0b39\u0007>\u0002\u0002\u0b39\u0b3a",
    "\u0007\u0007\u0002\u0002\u0b3a\u0b3b\bd\u0001\u0002\u0b3b\u00c7\u0003",
    "\u0002\u0002\u0002\u0b3c\u0b3d\be\u0001\u0002\u0b3d\u0b3e\u0007<\u0002",
    "\u0002\u0b3e\u00c9\u0003\u0002\u0002\u0002\u0b3f\u0b40\u0007\u0004\u0002",
    "\u0002\u0b40\u0b4e\bf\u0001\u0002\u0b41\u0b42\u0007\u000e\u0002\u0002",
    "\u0b42\u0b45\bf\u0001\u0002\u0b43\u0b45\u0005\u00ccg\u0002\u0b44\u0b41",
    "\u0003\u0002\u0002\u0002\u0b44\u0b43\u0003\u0002\u0002\u0002\u0b45\u0b4b",
    "\u0003\u0002\u0002\u0002\u0b46\u0b47\u0007\u0005\u0002\u0002\u0b47\u0b48",
    "\bf\u0001\u0002\u0b48\u0b4a\u0005\u00ccg\u0002\u0b49\u0b46\u0003\u0002",
    "\u0002\u0002\u0b4a\u0b4d\u0003\u0002\u0002\u0002\u0b4b\u0b49\u0003\u0002",
    "\u0002\u0002\u0b4b\u0b4c\u0003\u0002\u0002\u0002\u0b4c\u0b4f\u0003\u0002",
    "\u0002\u0002\u0b4d\u0b4b\u0003\u0002\u0002\u0002\u0b4e\u0b44\u0003\u0002",
    "\u0002\u0002\u0b4e\u0b4f\u0003\u0002\u0002\u0002\u0b4f\u0b50\u0003\u0002",
    "\u0002\u0002\u0b50\u0b51\u0007\u0006\u0002\u0002\u0b51\u00cb\u0003\u0002",
    "\u0002\u0002\u0b52\u0b56\bg\u0001\u0002\u0b53\u0b55\u0005\u0018\r\u0002",
    "\u0b54\u0b53\u0003\u0002\u0002\u0002\u0b55\u0b58\u0003\u0002\u0002\u0002",
    "\u0b56\u0b54\u0003\u0002\u0002\u0002\u0b56\u0b57\u0003\u0002\u0002\u0002",
    "\u0b57\u0b7c\u0003\u0002\u0002\u0002\u0b58\u0b56\u0003\u0002\u0002\u0002",
    "\u0b59\u0b5a\u0005\u00b8]\u0002\u0b5a\u0b63\bg\u0001\u0002\u0b5b\u0b5c",
    "\u0007)\u0002\u0002\u0b5c\u0b5d\u0005\u00e4s\u0002\u0b5d\u0b5e\bg\u0001",
    "\u0002\u0b5e\u0b64\u0003\u0002\u0002\u0002\u0b5f\u0b60\u0005\u00e4s",
    "\u0002\u0b60\u0b61\bg\u0001\u0002\u0b61\u0b64\u0003\u0002\u0002\u0002",
    "\u0b62\u0b64\bg\u0001\u0002\u0b63\u0b5b\u0003\u0002\u0002\u0002\u0b63",
    "\u0b5f\u0003\u0002\u0002\u0002\u0b63\u0b62\u0003\u0002\u0002\u0002\u0b64",
    "\u0b68\u0003\u0002\u0002\u0002\u0b65\u0b69\u0005\u00caf\u0002\u0b66",
    "\u0b67\u0007\u0091\u0002\u0002\u0b67\u0b69\u0005\u00ceh\u0002\u0b68",
    "\u0b65\u0003\u0002\u0002\u0002\u0b68\u0b66\u0003\u0002\u0002\u0002\u0b68",
    "\u0b69\u0003\u0002\u0002\u0002\u0b69\u0b6a\u0003\u0002\u0002\u0002\u0b6a",
    "\u0b6e\bg\u0001\u0002\u0b6b\u0b6d\u0005\u0014\u000b\u0002\u0b6c\u0b6b",
    "\u0003\u0002\u0002\u0002\u0b6d\u0b70\u0003\u0002\u0002\u0002\u0b6e\u0b6c",
    "\u0003\u0002\u0002\u0002\u0b6e\u0b6f\u0003\u0002\u0002\u0002\u0b6f\u0b7d",
    "\u0003\u0002\u0002\u0002\u0b70\u0b6e\u0003\u0002\u0002\u0002\u0b71\u0b72",
    "\bg\u0001\u0002\u0b72\u0b7a\u0005\u00caf\u0002\u0b73\u0b74\u0007)\u0002",
    "\u0002\u0b74\u0b75\u0005\u00e4s\u0002\u0b75\u0b76\bg\u0001\u0002\u0b76",
    "\u0b7b\u0003\u0002\u0002\u0002\u0b77\u0b78\u0005\u00e4s\u0002\u0b78",
    "\u0b79\bg\u0001\u0002\u0b79\u0b7b\u0003\u0002\u0002\u0002\u0b7a\u0b73",
    "\u0003\u0002\u0002\u0002\u0b7a\u0b77\u0003\u0002\u0002\u0002\u0b7b\u0b7d",
    "\u0003\u0002\u0002\u0002\u0b7c\u0b59\u0003\u0002\u0002\u0002\u0b7c\u0b71",
    "\u0003\u0002\u0002\u0002\u0b7d\u00cd\u0003\u0002\u0002\u0002\u0b7e\u0b82",
    "\u0005\u00caf\u0002\u0b7f\u0b80\u0007\u000e\u0002\u0002\u0b80\u0b82",
    "\bh\u0001\u0002\u0b81\u0b7e\u0003\u0002\u0002\u0002\u0b81\u0b7f\u0003",
    "\u0002\u0002\u0002\u0b82\u00cf\u0003\u0002\u0002\u0002\u0b83\u0b84\b",
    "i\u0001\u0002\u0b84\u0b85\u0007\u0004\u0002\u0002\u0b85\u0b86\bi\u0001",
    "\u0002\u0b86\u0b8c\u0005\u00d4k\u0002\u0b87\u0b88\u0007\u0005\u0002",
    "\u0002\u0b88\u0b89\bi\u0001\u0002\u0b89\u0b8b\u0005\u00d4k\u0002\u0b8a",
    "\u0b87\u0003\u0002\u0002\u0002\u0b8b\u0b8e\u0003\u0002\u0002\u0002\u0b8c",
    "\u0b8a\u0003\u0002\u0002\u0002\u0b8c\u0b8d\u0003\u0002\u0002\u0002\u0b8d",
    "\u0b8f\u0003\u0002\u0002\u0002\u0b8e\u0b8c\u0003\u0002\u0002\u0002\u0b8f",
    "\u0b90\u0007\u0006\u0002\u0002\u0b90\u0bac\u0003\u0002\u0002\u0002\u0b91",
    "\u0b92\bi\u0001\u0002\u0b92\u0b9f\u0007\u000f\u0002\u0002\u0b93\u0b94",
    "\u0005\u00d6l\u0002\u0b94\u0b9c\bi\u0001\u0002\u0b95\u0b96\u0007\u0005",
    "\u0002\u0002\u0b96\u0b97\bi\u0001\u0002\u0b97\u0b98\u0005\u00d6l\u0002",
    "\u0b98\u0b99\bi\u0001\u0002\u0b99\u0b9b\u0003\u0002\u0002\u0002\u0b9a",
    "\u0b95\u0003\u0002\u0002\u0002\u0b9b\u0b9e\u0003\u0002\u0002\u0002\u0b9c",
    "\u0b9a\u0003\u0002\u0002\u0002\u0b9c\u0b9d\u0003\u0002\u0002\u0002\u0b9d",
    "\u0ba0\u0003\u0002\u0002\u0002\u0b9e\u0b9c\u0003\u0002\u0002\u0002\u0b9f",
    "\u0b93\u0003\u0002\u0002\u0002\u0b9f\u0ba0\u0003\u0002\u0002\u0002\u0ba0",
    "\u0ba1\u0003\u0002\u0002\u0002\u0ba1\u0bac\u0007\u0011\u0002\u0002\u0ba2",
    "\u0ba3\u0005\u00dan\u0002\u0ba3\u0ba4\bi\u0001\u0002\u0ba4\u0bac\u0003",
    "\u0002\u0002\u0002\u0ba5\u0ba8\u0007\f\u0002\u0002\u0ba6\u0ba8\u0007",
    "\r\u0002\u0002\u0ba7\u0ba5\u0003\u0002\u0002\u0002\u0ba7\u0ba6\u0003",
    "\u0002\u0002\u0002\u0ba8\u0ba9\u0003\u0002\u0002\u0002\u0ba9\u0baa\u0007",
    ">\u0002\u0002\u0baa\u0bac\bi\u0001\u0002\u0bab\u0b83\u0003\u0002\u0002",
    "\u0002\u0bab\u0b91\u0003\u0002\u0002\u0002\u0bab\u0ba2\u0003\u0002\u0002",
    "\u0002\u0bab\u0ba7\u0003\u0002\u0002\u0002\u0bac\u00d1\u0003\u0002\u0002",
    "\u0002\u0bad\u0bae\u0005\u00d0i\u0002\u0bae\u0baf\bj\u0001\u0002\u0baf",
    "\u0bb9\u0003\u0002\u0002\u0002\u0bb0\u0bb2\bj\u0001\u0002\u0bb1\u0bb3",
    "\u0007\n\u0002\u0002\u0bb2\u0bb1\u0003\u0002\u0002\u0002\u0bb2\u0bb3",
    "\u0003\u0002\u0002\u0002\u0bb3\u0bb4\u0003\u0002\u0002\u0002\u0bb4\u0bb6",
    "\u0005\u00dep\u0002\u0bb5\u0bb7\u0005\u00e0q\u0002\u0bb6\u0bb5\u0003",
    "\u0002\u0002\u0002\u0bb6\u0bb7\u0003\u0002\u0002\u0002\u0bb7\u0bb9\u0003",
    "\u0002\u0002\u0002\u0bb8\u0bad\u0003\u0002\u0002\u0002\u0bb8\u0bb0\u0003",
    "\u0002\u0002\u0002\u0bb9\u00d3\u0003\u0002\u0002\u0002\u0bba\u0bbc\u0007",
    "\n\u0002\u0002\u0bbb\u0bba\u0003\u0002\u0002\u0002\u0bbb\u0bbc\u0003",
    "\u0002\u0002\u0002\u0bbc\u0bbd\u0003\u0002\u0002\u0002\u0bbd\u0bc3\u0005",
    "\u00dep\u0002\u0bbe\u0bbf\u0007\u001d\u0002\u0002\u0bbf\u0bc0\bk\u0001",
    "\u0002\u0bc0\u0bc1\u0005\u00e4s\u0002\u0bc1\u0bc2\bk\u0001\u0002\u0bc2",
    "\u0bc4\u0003\u0002\u0002\u0002\u0bc3\u0bbe\u0003\u0002\u0002\u0002\u0bc3",
    "\u0bc4\u0003\u0002\u0002\u0002\u0bc4\u0bc8\u0003\u0002\u0002\u0002\u0bc5",
    "\u0bc6\u0007\u0007\u0002\u0002\u0bc6\u0bc7\bk\u0001\u0002\u0bc7\u0bc9",
    "\u0005\u00d2j\u0002\u0bc8\u0bc5\u0003\u0002\u0002\u0002\u0bc8\u0bc9",
    "\u0003\u0002\u0002\u0002\u0bc9\u0bca\u0003\u0002\u0002\u0002\u0bca\u0bcb",
    "\bk\u0001\u0002\u0bcb\u00d5\u0003\u0002\u0002\u0002\u0bcc\u0bcd\bl\u0001",
    "\u0002\u0bcd\u0bce\u0007\u0004\u0002\u0002\u0bce\u0bcf\bl\u0001\u0002",
    "\u0bcf\u0bd5\u0005\u00d8m\u0002\u0bd0\u0bd1\u0007\u0005\u0002\u0002",
    "\u0bd1\u0bd2\bl\u0001\u0002\u0bd2\u0bd4\u0005\u00d8m\u0002\u0bd3\u0bd0",
    "\u0003\u0002\u0002\u0002\u0bd4\u0bd7\u0003\u0002\u0002\u0002\u0bd5\u0bd3",
    "\u0003\u0002\u0002\u0002\u0bd5\u0bd6\u0003\u0002\u0002\u0002\u0bd6\u0bd8",
    "\u0003\u0002\u0002\u0002\u0bd7\u0bd5\u0003\u0002\u0002\u0002\u0bd8\u0bd9",
    "\u0007\u0006\u0002\u0002\u0bd9\u0c01\u0003\u0002\u0002\u0002\u0bda\u0bdb",
    "\bl\u0001\u0002\u0bdb\u0be8\u0007\u000f\u0002\u0002\u0bdc\u0bdd\u0005",
    "\u00d6l\u0002\u0bdd\u0be5\bl\u0001\u0002\u0bde\u0bdf\u0007\u0005\u0002",
    "\u0002\u0bdf\u0be0\bl\u0001\u0002\u0be0\u0be1\u0005\u00d6l\u0002\u0be1",
    "\u0be2\bl\u0001\u0002\u0be2\u0be4\u0003\u0002\u0002\u0002\u0be3\u0bde",
    "\u0003\u0002\u0002\u0002\u0be4\u0be7\u0003\u0002\u0002\u0002\u0be5\u0be3",
    "\u0003\u0002\u0002\u0002\u0be5\u0be6\u0003\u0002\u0002\u0002\u0be6\u0be9",
    "\u0003\u0002\u0002\u0002\u0be7\u0be5\u0003\u0002\u0002\u0002\u0be8\u0bdc",
    "\u0003\u0002\u0002\u0002\u0be8\u0be9\u0003\u0002\u0002\u0002\u0be9\u0bea",
    "\u0003\u0002\u0002\u0002\u0bea\u0c01\u0007\u0011\u0002\u0002\u0beb\u0bec",
    "\u0005\u00dan\u0002\u0bec\u0bed\bl\u0001\u0002\u0bed\u0c01\u0003\u0002",
    "\u0002\u0002\u0bee\u0bf1\u0007\f\u0002\u0002\u0bef\u0bf1\u0007\r\u0002",
    "\u0002\u0bf0\u0bee\u0003\u0002\u0002\u0002\u0bf0\u0bef\u0003\u0002\u0002",
    "\u0002\u0bf1\u0bf2\u0003\u0002\u0002\u0002\u0bf2\u0bf3\u0007>\u0002",
    "\u0002\u0bf3\u0c01\bl\u0001\u0002\u0bf4\u0bf6\bl\u0001\u0002\u0bf5\u0bf7",
    "\u0007\n\u0002\u0002\u0bf6\u0bf5\u0003\u0002\u0002\u0002\u0bf6\u0bf7",
    "\u0003\u0002\u0002\u0002\u0bf7\u0bf8\u0003\u0002\u0002\u0002\u0bf8\u0bfe",
    "\u0005\u00dep\u0002\u0bf9\u0bfa\u0007\u001d\u0002\u0002\u0bfa\u0bfb",
    "\bl\u0001\u0002\u0bfb\u0bfc\u0005\u00e4s\u0002\u0bfc\u0bfd\bl\u0001",
    "\u0002\u0bfd\u0bff\u0003\u0002\u0002\u0002\u0bfe\u0bf9\u0003\u0002\u0002",
    "\u0002\u0bfe\u0bff\u0003\u0002\u0002\u0002\u0bff\u0c01\u0003\u0002\u0002",
    "\u0002\u0c00\u0bcc\u0003\u0002\u0002\u0002\u0c00\u0bda\u0003\u0002\u0002",
    "\u0002\u0c00\u0beb\u0003\u0002\u0002\u0002\u0c00\u0bf0\u0003\u0002\u0002",
    "\u0002\u0c00\u0bf4\u0003\u0002\u0002\u0002\u0c01\u00d7\u0003\u0002\u0002",
    "\u0002\u0c02\u0c04\u0007\n\u0002\u0002\u0c03\u0c02\u0003\u0002\u0002",
    "\u0002\u0c03\u0c04\u0003\u0002\u0002\u0002\u0c04\u0c05\u0003\u0002\u0002",
    "\u0002\u0c05\u0c08\u0005\u00dep\u0002\u0c06\u0c07\u0007\u0007\u0002",
    "\u0002\u0c07\u0c09\u0005\u00d6l\u0002\u0c08\u0c06\u0003\u0002\u0002",
    "\u0002\u0c08\u0c09\u0003\u0002\u0002\u0002\u0c09\u0c0a\u0003\u0002\u0002",
    "\u0002\u0c0a\u0c0b\bm\u0001\u0002\u0c0b\u00d9\u0003\u0002\u0002\u0002",
    "\u0c0c\u0c0d\u0007\u001d\u0002\u0002\u0c0d\u0c0e\u0005\u00e4s\u0002",
    "\u0c0e\u0c0f\bn\u0001\u0002\u0c0f\u0c1b\u0003\u0002\u0002\u0002\u0c10",
    "\u0c11\u00075\u0002\u0002\u0c11\u0c1b\bn\u0001\u0002\u0c12\u0c13\u0007",
    "&\u0002\u0002\u0c13\u0c1b\bn\u0001\u0002\u0c14\u0c15\u0007>\u0002\u0002",
    "\u0c15\u0c1b\bn\u0001\u0002\u0c16\u0c17\u0007\"\u0002\u0002\u0c17\u0c1b",
    "\bn\u0001\u0002\u0c18\u0c19\u0007#\u0002\u0002\u0c19\u0c1b\bn\u0001",
    "\u0002\u0c1a\u0c0c\u0003\u0002\u0002\u0002\u0c1a\u0c10\u0003\u0002\u0002",
    "\u0002\u0c1a\u0c12\u0003\u0002\u0002\u0002\u0c1a\u0c14\u0003\u0002\u0002",
    "\u0002\u0c1a\u0c16\u0003\u0002\u0002\u0002\u0c1a\u0c18\u0003\u0002\u0002",
    "\u0002\u0c1b\u00db\u0003\u0002\u0002\u0002\u0c1c\u0c1d\u0005\u00e4s",
    "\u0002\u0c1d\u0c24\bo\u0001\u0002\u0c1e\u0c1f\u0007\u0012\u0002\u0002",
    "\u0c1f\u0c20\u0005\u00e4s\u0002\u0c20\u0c21\bo\u0001\u0002\u0c21\u0c23",
    "\u0003\u0002\u0002\u0002\u0c22\u0c1e\u0003\u0002\u0002\u0002\u0c23\u0c26",
    "\u0003\u0002\u0002\u0002\u0c24\u0c22\u0003\u0002\u0002\u0002\u0c24\u0c25",
    "\u0003\u0002\u0002\u0002\u0c25\u00dd\u0003\u0002\u0002\u0002\u0c26\u0c24",
    "\u0003\u0002\u0002\u0002\u0c27\u0c28\u0005\u00e4s\u0002\u0c28\u0c32",
    "\bp\u0001\u0002\u0c29\u0c2b\u0007\u0012\u0002\u0002\u0c2a\u0c2c\u0007",
    "\n\u0002\u0002\u0c2b\u0c2a\u0003\u0002\u0002\u0002\u0c2b\u0c2c\u0003",
    "\u0002\u0002\u0002\u0c2c\u0c2d\u0003\u0002\u0002\u0002\u0c2d\u0c2e\u0005",
    "\u00e4s\u0002\u0c2e\u0c2f\bp\u0001\u0002\u0c2f\u0c31\u0003\u0002\u0002",
    "\u0002\u0c30\u0c29\u0003\u0002\u0002\u0002\u0c31\u0c34\u0003\u0002\u0002",
    "\u0002\u0c32\u0c30\u0003\u0002\u0002\u0002\u0c32\u0c33\u0003\u0002\u0002",
    "\u0002\u0c33\u00df\u0003\u0002\u0002\u0002\u0c34\u0c32\u0003\u0002\u0002",
    "\u0002\u0c35\u0c36\u0007\u001d\u0002\u0002\u0c36\u0c37\bq\u0001\u0002",
    "\u0c37\u0c38\u0005\u00e4s\u0002\u0c38\u0c39\bq\u0001\u0002\u0c39\u00e1",
    "\u0003\u0002\u0002\u0002\u0c3a\u0c3b\u0007\u008a\u0002\u0002\u0c3b\u00e3",
    "\u0003\u0002\u0002\u0002\u0c3c\u0c3d\t\f\u0002\u0002\u0c3d\u00e5\u0003",
    "\u0002\u0002\u0002\u01a4\u00e9\u00ef\u00f1\u00f7\u00f9\u00fc\u0117\u011c",
    "\u0126\u012d\u012f\u013a\u0140\u0147\u0151\u015b\u015f\u0166\u016d\u016f",
    "\u017b\u0185\u018e\u0190\u0192\u0194\u0199\u019d\u01a3\u01a7\u01b1\u01bb",
    "\u01c0\u01c4\u01cb\u01d2\u01d8\u01dc\u01e2\u01e8\u01ef\u01f5\u01fd\u0201",
    "\u020a\u020d\u0214\u021d\u0221\u022c\u0232\u023c\u0240\u0244\u0246\u024f",
    "\u0255\u0258\u0262\u0267\u026d\u0279\u027c\u0282\u0287\u028c\u0299\u02a0",
    "\u02a6\u02aa\u02b0\u02b9\u02bd\u02c5\u02cb\u02d2\u02d8\u02e3\u02e6\u02ee",
    "\u02f2\u02fa\u0300\u0306\u030f\u0315\u031d\u0323\u032b\u0331\u0339\u033f",
    "\u0347\u0356\u0360\u0364\u036d\u036f\u0374\u0377\u037e\u0388\u038b\u038d",
    "\u0394\u039d\u03a1\u03ab\u03c0\u03ce\u03d8\u03de\u03e4\u03eb\u03f1\u03f3",
    "\u03f9\u03ff\u0406\u040f\u0413\u041b\u0427\u0430\u0436\u043d\u0443\u0449",
    "\u0451\u0458\u045e\u0464\u046c\u0476\u047b\u0482\u0488\u048e\u0496\u049d",
    "\u04a5\u04af\u04b3\u04b8\u04bb\u04c3\u04c9\u04cf\u04db\u04de\u04e5\u04e7",
    "\u04ed\u04f4\u04fa\u04fd\u0500\u0503\u050a\u0512\u0517\u051a\u0535\u053c",
    "\u0540\u0543\u0547\u054d\u0552\u0558\u0561\u0566\u0568\u056a\u0570\u0576",
    "\u0582\u058a\u058d\u0596\u059f\u05a4\u05a7\u05ae\u05b1\u05b5\u05be\u05c3",
    "\u05c6\u05d1\u05d8\u05db\u05e3\u05e8\u05eb\u05f7\u05ff\u060a\u060c\u0612",
    "\u061f\u0622\u0629\u0631\u0634\u0636\u063f\u0642\u064a\u0652\u0659\u0663",
    "\u0666\u066e\u0676\u067e\u0685\u068c\u0693\u0698\u06a0\u06ab\u06ae\u06bc",
    "\u06c1\u06c5\u06cd\u06d1\u06d3\u06d5\u06db\u06e0\u06e4\u06ec\u06f1\u06f3",
    "\u0702\u0705\u070e\u0712\u0718\u071e\u0725\u072b\u0734\u073a\u073c\u0743",
    "\u074f\u075f\u0767\u0770\u0776\u077f\u0788\u078e\u0794\u079d\u07a3\u07ab",
    "\u07b1\u07b3\u07b5\u07bc\u07c6\u07d0\u07d4\u07d8\u07dc\u07e4\u07e8\u07ea",
    "\u07ee\u07f4\u07f8\u0804\u0807\u080e\u0818\u081b\u081f\u0826\u082c\u0841",
    "\u0846\u084c\u084e\u0855\u0860\u086c\u0873\u0879\u087d\u0881\u0883\u088a",
    "\u0890\u0895\u08a2\u08ab\u08b0\u08b8\u08bd\u08c3\u08ca\u08db\u08e0\u08e4",
    "\u08e7\u08f1\u08f6\u08fa\u0900\u0907\u090c\u0912\u091e\u0921\u0927\u0929",
    "\u0934\u0936\u0947\u0949\u0950\u0956\u0959\u095f\u0962\u0968\u096b\u096f",
    "\u0974\u097a\u097e\u0984\u098b\u0994\u09a1\u09a7\u09a9\u09af\u09b2\u09b9",
    "\u09bc\u09c0\u09cb\u09d6\u09e8\u09ef\u09f8\u0a00\u0a02\u0a16\u0a18\u0a22",
    "\u0a2d\u0a38\u0a51\u0a5b\u0a5d\u0a63\u0a74\u0a86\u0a8c\u0a8e\u0a90\u0a9a",
    "\u0aa7\u0aa9\u0abf\u0ac5\u0ac8\u0acf\u0ad2\u0ad6\u0ae0\u0aed\u0af7\u0b01",
    "\u0b13\u0b19\u0b2c\u0b30\u0b44\u0b4b\u0b4e\u0b56\u0b63\u0b68\u0b6e\u0b7a",
    "\u0b7c\u0b81\u0b8c\u0b9c\u0b9f\u0ba7\u0bab\u0bb2\u0bb6\u0bb8\u0bbb\u0bc3",
    "\u0bc8\u0bd5\u0be5\u0be8\u0bf0\u0bf6\u0bfe\u0c00\u0c03\u0c08\u0c1a\u0c24",
    "\u0c2b\u0c32"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "';'", "'{'", "','", "'}'", "':'", "'('", "')'", 
                     "'@'", "'='", "'+'", "'-'", "'*'", "'['", "'..'", "']'", 
                     "'.'", "'?'", "'<>'", "'>'", "'>='", "'<'", "'<='", 
                     "'!='", "'||'", "'/'", "'=>'", "'#'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, "WhiteSpace", "DocComment", "Comment", "LineComment", 
                      "String", "QuotedLiteral", "UnterminatedLiteral", 
                      "UnterminatedDelimitedIdentifier", "Boolean", "ALL", 
                      "ANY", "AS", "BY", "CASE", "CAST", "DISTINCT", "EXISTS", 
                      "EXTRACT", "FROM", "IN", "KEY", "NEW", "NOT", "NULL", 
                      "OF", "ON", "SELECT", "SOME", "WHEN", "TRIM", "WHERE", 
                      "WITH", "Number", "ABSTRACT", "ACTION", "ACTIONS", 
                      "AND", "ANNOTATE", "ANNOTATION", "ARRAY", "ASC", "ASPECT", 
                      "ASSOCIATION", "BETWEEN", "BOTH", "COMPOSITION", "CONTEXT", 
                      "CROSS", "DAY", "DEFAULT", "DEFINE", "DESC", "ELEMENT", 
                      "ELSE", "END", "ENTITY", "ENUM", "EVENT", "ESCAPE", 
                      "EXACT", "EXCEPT", "EXCLUDING", "EXTEND", "FIRST", 
                      "FULL", "FUNCTION", "GROUP", "HAVING", "HOUR", "INNER", 
                      "INTERSECT", "INTO", "IS", "JOIN", "LAST", "LEADING", 
                      "LEFT", "LIKE", "LIMIT", "LOCALIZED", "MANY", "MASKED", 
                      "MINUS", "MINUTE", "MIXIN", "MONTH", "NAMESPACE", 
                      "NULLS", "OFFSET", "ONE", "OR", "ORDER", "OUTER", 
                      "PARAMETERS", "PROJECTION", "REDIRECTED", "RETURNS", 
                      "RIGHT", "SECOND", "SERVICE", "THEN", "TRAILING", 
                      "TO", "TYPE", "UNION", "USING", "VIEW", "YEAR", "Identifier", 
                      "IllegalToken", "VIRTUAL", "HelperToken1", "HelperToken2", 
                      "HideAlternatives", "GenericArgFull", "DOTbeforeBRACE", 
                      "COMPOSITIONofBRACE" ];

var ruleNames =  [ "start", "queryEOF", "conditionEOF", "namespaceDeclaration", 
                   "usingDeclaration", "innerUsing", "externalPath", "annotationAssignment_1", 
                   "annotationAssignment_paren", "annotationAssignment_fix", 
                   "annotationAssignment_ll1", "annotationAssignment_atn", 
                   "requiredSemi", "optionalSemi", "artifactDef", "contextDef", 
                   "extendContext", "entityDef", "projectionSpec", "projectionClauses", 
                   "projectionExclusion", "extendEntity", "extendForEntity", 
                   "extendProjection", "actionFunctionDef", "actionFunctionMainDef", 
                   "eventDef", "aspectDef", "typeDef", "extendType", "extendAspect", 
                   "annotationDef", "extendArtifact", "extendWithOptElements", 
                   "annotateArtifact", "annotateElement", "annotateAction", 
                   "annotateParam", "enumSymbolDef", "elementDefOrExtend", 
                   "elementDef", "mixinElementDef", "misplacedAnnotations", 
                   "elementDefInner", "extendElement", "bracedSelectItemListDef", 
                   "selectItemDef", "parameterListDef", "parameterDef", 
                   "entityParameters", "entityParameterDef", "nullability", 
                   "elementProperties", "viewDef", "includeRef", "typeSpec", 
                   "returnTypeSpec", "typeSpecSemi", "typeStruct", "typeCompoStruct", 
                   "typeArray", "typeAssociationBase", "typeAssociationCont", 
                   "typeAssociationElementCont", "typeToOne", "typeToMany", 
                   "cardinality", "foreignKey", "typeTypeOf", "typeRefOptArgs", 
                   "queryExpression", "orderByClause", "limitClause", "orderBySpec", 
                   "queryTerm", "queryPrimary", "querySource", "tableExpression", 
                   "joinOp", "joinCardinality", "tableTerm", "fromPath", 
                   "condition", "conditionAnd", "conditionTerm", "predicate", 
                   "expression", "expressionSum", "expressionFactor", "expressionTerm", 
                   "specialFunction", "valuePath", "fromArguments", "pathArguments", 
                   "namedExpression", "arrowedExpression", "funcExpression", 
                   "cardinalityAndFilter", "optionalCardinality", "optionalWhereForFilter", 
                   "selectItemInlineList", "selectItemInlineDef", "selectItemInlineSpec", 
                   "annoValueBase", "annoValue", "namedValue", "arrayValue", 
                   "namedValueInArray", "literalValue", "simplePath", "annotationPath", 
                   "annotationPathVariant", "identNoKeyword", "ident" ];

function languageParser (input) {
	genericAntlrParser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

languageParser.prototype = Object.create(genericAntlrParser.prototype);
languageParser.prototype.constructor = languageParser;

Object.defineProperty(languageParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

languageParser.EOF = antlr4.Token.EOF;
languageParser.T__0 = 1;
languageParser.T__1 = 2;
languageParser.T__2 = 3;
languageParser.T__3 = 4;
languageParser.T__4 = 5;
languageParser.T__5 = 6;
languageParser.T__6 = 7;
languageParser.T__7 = 8;
languageParser.T__8 = 9;
languageParser.T__9 = 10;
languageParser.T__10 = 11;
languageParser.T__11 = 12;
languageParser.T__12 = 13;
languageParser.T__13 = 14;
languageParser.T__14 = 15;
languageParser.T__15 = 16;
languageParser.T__16 = 17;
languageParser.T__17 = 18;
languageParser.T__18 = 19;
languageParser.T__19 = 20;
languageParser.T__20 = 21;
languageParser.T__21 = 22;
languageParser.T__22 = 23;
languageParser.T__23 = 24;
languageParser.T__24 = 25;
languageParser.T__25 = 26;
languageParser.T__26 = 27;
languageParser.WhiteSpace = 28;
languageParser.DocComment = 29;
languageParser.Comment = 30;
languageParser.LineComment = 31;
languageParser.String = 32;
languageParser.QuotedLiteral = 33;
languageParser.UnterminatedLiteral = 34;
languageParser.UnterminatedDelimitedIdentifier = 35;
languageParser.Boolean = 36;
languageParser.ALL = 37;
languageParser.ANY = 38;
languageParser.AS = 39;
languageParser.BY = 40;
languageParser.CASE = 41;
languageParser.CAST = 42;
languageParser.DISTINCT = 43;
languageParser.EXISTS = 44;
languageParser.EXTRACT = 45;
languageParser.FROM = 46;
languageParser.IN = 47;
languageParser.KEY = 48;
languageParser.NEW = 49;
languageParser.NOT = 50;
languageParser.NULL = 51;
languageParser.OF = 52;
languageParser.ON = 53;
languageParser.SELECT = 54;
languageParser.SOME = 55;
languageParser.WHEN = 56;
languageParser.TRIM = 57;
languageParser.WHERE = 58;
languageParser.WITH = 59;
languageParser.Number = 60;
languageParser.ABSTRACT = 61;
languageParser.ACTION = 62;
languageParser.ACTIONS = 63;
languageParser.AND = 64;
languageParser.ANNOTATE = 65;
languageParser.ANNOTATION = 66;
languageParser.ARRAY = 67;
languageParser.ASC = 68;
languageParser.ASPECT = 69;
languageParser.ASSOCIATION = 70;
languageParser.BETWEEN = 71;
languageParser.BOTH = 72;
languageParser.COMPOSITION = 73;
languageParser.CONTEXT = 74;
languageParser.CROSS = 75;
languageParser.DAY = 76;
languageParser.DEFAULT = 77;
languageParser.DEFINE = 78;
languageParser.DESC = 79;
languageParser.ELEMENT = 80;
languageParser.ELSE = 81;
languageParser.END = 82;
languageParser.ENTITY = 83;
languageParser.ENUM = 84;
languageParser.EVENT = 85;
languageParser.ESCAPE = 86;
languageParser.EXACT = 87;
languageParser.EXCEPT = 88;
languageParser.EXCLUDING = 89;
languageParser.EXTEND = 90;
languageParser.FIRST = 91;
languageParser.FULL = 92;
languageParser.FUNCTION = 93;
languageParser.GROUP = 94;
languageParser.HAVING = 95;
languageParser.HOUR = 96;
languageParser.INNER = 97;
languageParser.INTERSECT = 98;
languageParser.INTO = 99;
languageParser.IS = 100;
languageParser.JOIN = 101;
languageParser.LAST = 102;
languageParser.LEADING = 103;
languageParser.LEFT = 104;
languageParser.LIKE = 105;
languageParser.LIMIT = 106;
languageParser.LOCALIZED = 107;
languageParser.MANY = 108;
languageParser.MASKED = 109;
languageParser.MINUS = 110;
languageParser.MINUTE = 111;
languageParser.MIXIN = 112;
languageParser.MONTH = 113;
languageParser.NAMESPACE = 114;
languageParser.NULLS = 115;
languageParser.OFFSET = 116;
languageParser.ONE = 117;
languageParser.OR = 118;
languageParser.ORDER = 119;
languageParser.OUTER = 120;
languageParser.PARAMETERS = 121;
languageParser.PROJECTION = 122;
languageParser.REDIRECTED = 123;
languageParser.RETURNS = 124;
languageParser.RIGHT = 125;
languageParser.SECOND = 126;
languageParser.SERVICE = 127;
languageParser.THEN = 128;
languageParser.TRAILING = 129;
languageParser.TO = 130;
languageParser.TYPE = 131;
languageParser.UNION = 132;
languageParser.USING = 133;
languageParser.VIEW = 134;
languageParser.YEAR = 135;
languageParser.Identifier = 136;
languageParser.IllegalToken = 137;
languageParser.VIRTUAL = 138;
languageParser.HelperToken1 = 139;
languageParser.HelperToken2 = 140;
languageParser.HideAlternatives = 141;
languageParser.GenericArgFull = 142;
languageParser.DOTbeforeBRACE = 143;
languageParser.COMPOSITIONofBRACE = 144;

languageParser.RULE_start = 0;
languageParser.RULE_queryEOF = 1;
languageParser.RULE_conditionEOF = 2;
languageParser.RULE_namespaceDeclaration = 3;
languageParser.RULE_usingDeclaration = 4;
languageParser.RULE_innerUsing = 5;
languageParser.RULE_externalPath = 6;
languageParser.RULE_annotationAssignment_1 = 7;
languageParser.RULE_annotationAssignment_paren = 8;
languageParser.RULE_annotationAssignment_fix = 9;
languageParser.RULE_annotationAssignment_ll1 = 10;
languageParser.RULE_annotationAssignment_atn = 11;
languageParser.RULE_requiredSemi = 12;
languageParser.RULE_optionalSemi = 13;
languageParser.RULE_artifactDef = 14;
languageParser.RULE_contextDef = 15;
languageParser.RULE_extendContext = 16;
languageParser.RULE_entityDef = 17;
languageParser.RULE_projectionSpec = 18;
languageParser.RULE_projectionClauses = 19;
languageParser.RULE_projectionExclusion = 20;
languageParser.RULE_extendEntity = 21;
languageParser.RULE_extendForEntity = 22;
languageParser.RULE_extendProjection = 23;
languageParser.RULE_actionFunctionDef = 24;
languageParser.RULE_actionFunctionMainDef = 25;
languageParser.RULE_eventDef = 26;
languageParser.RULE_aspectDef = 27;
languageParser.RULE_typeDef = 28;
languageParser.RULE_extendType = 29;
languageParser.RULE_extendAspect = 30;
languageParser.RULE_annotationDef = 31;
languageParser.RULE_extendArtifact = 32;
languageParser.RULE_extendWithOptElements = 33;
languageParser.RULE_annotateArtifact = 34;
languageParser.RULE_annotateElement = 35;
languageParser.RULE_annotateAction = 36;
languageParser.RULE_annotateParam = 37;
languageParser.RULE_enumSymbolDef = 38;
languageParser.RULE_elementDefOrExtend = 39;
languageParser.RULE_elementDef = 40;
languageParser.RULE_mixinElementDef = 41;
languageParser.RULE_misplacedAnnotations = 42;
languageParser.RULE_elementDefInner = 43;
languageParser.RULE_extendElement = 44;
languageParser.RULE_bracedSelectItemListDef = 45;
languageParser.RULE_selectItemDef = 46;
languageParser.RULE_parameterListDef = 47;
languageParser.RULE_parameterDef = 48;
languageParser.RULE_entityParameters = 49;
languageParser.RULE_entityParameterDef = 50;
languageParser.RULE_nullability = 51;
languageParser.RULE_elementProperties = 52;
languageParser.RULE_viewDef = 53;
languageParser.RULE_includeRef = 54;
languageParser.RULE_typeSpec = 55;
languageParser.RULE_returnTypeSpec = 56;
languageParser.RULE_typeSpecSemi = 57;
languageParser.RULE_typeStruct = 58;
languageParser.RULE_typeCompoStruct = 59;
languageParser.RULE_typeArray = 60;
languageParser.RULE_typeAssociationBase = 61;
languageParser.RULE_typeAssociationCont = 62;
languageParser.RULE_typeAssociationElementCont = 63;
languageParser.RULE_typeToOne = 64;
languageParser.RULE_typeToMany = 65;
languageParser.RULE_cardinality = 66;
languageParser.RULE_foreignKey = 67;
languageParser.RULE_typeTypeOf = 68;
languageParser.RULE_typeRefOptArgs = 69;
languageParser.RULE_queryExpression = 70;
languageParser.RULE_orderByClause = 71;
languageParser.RULE_limitClause = 72;
languageParser.RULE_orderBySpec = 73;
languageParser.RULE_queryTerm = 74;
languageParser.RULE_queryPrimary = 75;
languageParser.RULE_querySource = 76;
languageParser.RULE_tableExpression = 77;
languageParser.RULE_joinOp = 78;
languageParser.RULE_joinCardinality = 79;
languageParser.RULE_tableTerm = 80;
languageParser.RULE_fromPath = 81;
languageParser.RULE_condition = 82;
languageParser.RULE_conditionAnd = 83;
languageParser.RULE_conditionTerm = 84;
languageParser.RULE_predicate = 85;
languageParser.RULE_expression = 86;
languageParser.RULE_expressionSum = 87;
languageParser.RULE_expressionFactor = 88;
languageParser.RULE_expressionTerm = 89;
languageParser.RULE_specialFunction = 90;
languageParser.RULE_valuePath = 91;
languageParser.RULE_fromArguments = 92;
languageParser.RULE_pathArguments = 93;
languageParser.RULE_namedExpression = 94;
languageParser.RULE_arrowedExpression = 95;
languageParser.RULE_funcExpression = 96;
languageParser.RULE_cardinalityAndFilter = 97;
languageParser.RULE_optionalCardinality = 98;
languageParser.RULE_optionalWhereForFilter = 99;
languageParser.RULE_selectItemInlineList = 100;
languageParser.RULE_selectItemInlineDef = 101;
languageParser.RULE_selectItemInlineSpec = 102;
languageParser.RULE_annoValueBase = 103;
languageParser.RULE_annoValue = 104;
languageParser.RULE_namedValue = 105;
languageParser.RULE_arrayValue = 106;
languageParser.RULE_namedValueInArray = 107;
languageParser.RULE_literalValue = 108;
languageParser.RULE_simplePath = 109;
languageParser.RULE_annotationPath = 110;
languageParser.RULE_annotationPathVariant = 111;
languageParser.RULE_identNoKeyword = 112;
languageParser.RULE_ident = 113;


function StartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_start;
    this.source = { kind: 'source' }
    this._sync = 'recover'
    return this;
}

StartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartContext.prototype.constructor = StartContext;

StartContext.prototype.EOF = function() {
    return this.getToken(languageParser.EOF, 0);
};

StartContext.prototype.usingDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UsingDeclarationContext);
    } else {
        return this.getTypedRuleContext(UsingDeclarationContext,i);
    }
};

StartContext.prototype.namespaceDeclaration = function() {
    return this.getTypedRuleContext(NamespaceDeclarationContext,0);
};

StartContext.prototype.artifactDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArtifactDefContext);
    } else {
        return this.getTypedRuleContext(ArtifactDefContext,i);
    }
};




languageParser.StartContext = StartContext;

languageParser.prototype.start = function() {

    var localctx = new StartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, languageParser.RULE_start);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 231;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.USING) {
            this.state = 228;
            this.usingDeclaration(localctx.source);
            this.state = 233;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 250;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case languageParser.NAMESPACE:
        	this.state = 234;
        	this.namespaceDeclaration(localctx.source);
        	this.state = 239;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	while(_la===languageParser.T__7 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.EXTEND - 61)))) !== 0) || _la===languageParser.FUNCTION || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (languageParser.SERVICE - 127)) | (1 << (languageParser.TYPE - 127)) | (1 << (languageParser.USING - 127)) | (1 << (languageParser.VIEW - 127)) | (1 << (languageParser.HideAlternatives - 127)))) !== 0)) {
        	    this.state = 237;
        	    this._errHandler.sync(this);
        	    switch(this._input.LA(1)) {
        	    case languageParser.USING:
        	        this.state = 235;
        	        this.usingDeclaration(localctx.source);
        	        break;
        	    case languageParser.T__7:
        	    case languageParser.ABSTRACT:
        	    case languageParser.ACTION:
        	    case languageParser.ANNOTATE:
        	    case languageParser.ANNOTATION:
        	    case languageParser.ASPECT:
        	    case languageParser.CONTEXT:
        	    case languageParser.DEFINE:
        	    case languageParser.ENTITY:
        	    case languageParser.EVENT:
        	    case languageParser.EXTEND:
        	    case languageParser.FUNCTION:
        	    case languageParser.SERVICE:
        	    case languageParser.TYPE:
        	    case languageParser.VIEW:
        	    case languageParser.HideAlternatives:
        	        this.state = 236;
        	        this.artifactDef(localctx.source);
        	        break;
        	    default:
        	        throw new antlr4.error.NoViableAltException(this);
        	    }
        	    this.state = 241;
        	    this._errHandler.sync(this);
        	    _la = this._input.LA(1);
        	}
        	break;
        case languageParser.T__7:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ASPECT:
        case languageParser.CONTEXT:
        case languageParser.DEFINE:
        case languageParser.ENTITY:
        case languageParser.EVENT:
        case languageParser.EXTEND:
        case languageParser.FUNCTION:
        case languageParser.SERVICE:
        case languageParser.TYPE:
        case languageParser.VIEW:
        case languageParser.HideAlternatives:
        	this.state = 242;
        	this.artifactDef(localctx.source);
        	this.state = 247;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	while(_la===languageParser.T__7 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.EXTEND - 61)))) !== 0) || _la===languageParser.FUNCTION || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (languageParser.SERVICE - 127)) | (1 << (languageParser.TYPE - 127)) | (1 << (languageParser.USING - 127)) | (1 << (languageParser.VIEW - 127)) | (1 << (languageParser.HideAlternatives - 127)))) !== 0)) {
        	    this.state = 245;
        	    this._errHandler.sync(this);
        	    switch(this._input.LA(1)) {
        	    case languageParser.USING:
        	        this.state = 243;
        	        this.usingDeclaration(localctx.source);
        	        break;
        	    case languageParser.T__7:
        	    case languageParser.ABSTRACT:
        	    case languageParser.ACTION:
        	    case languageParser.ANNOTATE:
        	    case languageParser.ANNOTATION:
        	    case languageParser.ASPECT:
        	    case languageParser.CONTEXT:
        	    case languageParser.DEFINE:
        	    case languageParser.ENTITY:
        	    case languageParser.EVENT:
        	    case languageParser.EXTEND:
        	    case languageParser.FUNCTION:
        	    case languageParser.SERVICE:
        	    case languageParser.TYPE:
        	    case languageParser.VIEW:
        	    case languageParser.HideAlternatives:
        	        this.state = 244;
        	        this.artifactDef(localctx.source);
        	        break;
        	    default:
        	        throw new antlr4.error.NoViableAltException(this);
        	    }
        	    this.state = 249;
        	    this._errHandler.sync(this);
        	    _la = this._input.LA(1);
        	}
        	break;
        case languageParser.EOF:
        	break;
        default:
        	break;
        }
        this.state = 252;
        this.match(languageParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryEOFContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_queryEOF;
    this.query = null
    this.q = null; // QueryExpressionContext
    return this;
}

QueryEOFContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryEOFContext.prototype.constructor = QueryEOFContext;

QueryEOFContext.prototype.EOF = function() {
    return this.getToken(languageParser.EOF, 0);
};

QueryEOFContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};




languageParser.QueryEOFContext = QueryEOFContext;

languageParser.prototype.queryEOF = function() {

    var localctx = new QueryEOFContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, languageParser.RULE_queryEOF);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 254;
        localctx.q = this.queryExpression();
         localctx.query =  localctx.q.query 
        this.state = 256;
        this.match(languageParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConditionEOFContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_conditionEOF;
    this.cond = null
    this.c = null; // ConditionContext
    return this;
}

ConditionEOFContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionEOFContext.prototype.constructor = ConditionEOFContext;

ConditionEOFContext.prototype.EOF = function() {
    return this.getToken(languageParser.EOF, 0);
};

ConditionEOFContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};




languageParser.ConditionEOFContext = ConditionEOFContext;

languageParser.prototype.conditionEOF = function() {

    var localctx = new ConditionEOFContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, languageParser.RULE_conditionEOF);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 258;
        localctx.c = this.condition();
         localctx.cond =  localctx.c.cond 
        this.state = 260;
        this.match(languageParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamespaceDeclarationContext(parser, parent, invokingState, source) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_namespaceDeclaration;
    this.source = null
    this.decl = {}
    this.source = source || null;
    return this;
}

NamespaceDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespaceDeclarationContext.prototype.constructor = NamespaceDeclarationContext;

NamespaceDeclarationContext.prototype.NAMESPACE = function() {
    return this.getToken(languageParser.NAMESPACE, 0);
};

NamespaceDeclarationContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};




languageParser.NamespaceDeclarationContext = NamespaceDeclarationContext;

languageParser.prototype.namespaceDeclaration = function(source) {

    var localctx = new NamespaceDeclarationContext(this, this._ctx, this.state, source);
    this.enterRule(localctx, 6, languageParser.RULE_namespaceDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 262;
        this.match(languageParser.NAMESPACE);
        this.state = 263;
        this.simplePath( localctx.decl, 'Namespace' );
        this.state = 264;
        this.match(languageParser.T__0);
        this._ctx.stop = this._input.LT(-1);
         localctx.source.namespace = this.attachLocation(localctx.decl); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UsingDeclarationContext(parser, parent, invokingState, source) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_usingDeclaration;
    this.source = null
    this.decl = null
    this.str = null; // Token
    this.path = null; // ExternalPathContext
    this.name = null; // IdentContext
    this.source = source || null;
    return this;
}

UsingDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsingDeclarationContext.prototype.constructor = UsingDeclarationContext;

UsingDeclarationContext.prototype.USING = function() {
    return this.getToken(languageParser.USING, 0);
};

UsingDeclarationContext.prototype.FROM = function() {
    return this.getToken(languageParser.FROM, 0);
};

UsingDeclarationContext.prototype.innerUsing = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InnerUsingContext);
    } else {
        return this.getTypedRuleContext(InnerUsingContext,i);
    }
};

UsingDeclarationContext.prototype.String = function() {
    return this.getToken(languageParser.String, 0);
};

UsingDeclarationContext.prototype.externalPath = function() {
    return this.getTypedRuleContext(ExternalPathContext,0);
};

UsingDeclarationContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

UsingDeclarationContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};




languageParser.UsingDeclarationContext = UsingDeclarationContext;

languageParser.prototype.usingDeclaration = function(source) {

    var localctx = new UsingDeclarationContext(this, this._ctx, this.state, source);
    this.enterRule(localctx, 8, languageParser.RULE_usingDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 266;
        this.match(languageParser.USING);
        this.state = 301;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.FROM:
            this.state = 267;
            this.match(languageParser.FROM);
            this.state = 268;
            localctx.str = this.match(languageParser.String);

                     if (!localctx.source.dependencies) localctx.source.dependencies = [];
                     localctx.source.dependencies.push( this.quotedLiteral( localctx.str, 'string' ) );
                  
            break;
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
            this.state = 270;
            localctx.path = this.externalPath();
             localctx.decl =  this.addItem( localctx.source, 'usings', 'using', [], { extern: localctx.path.extern } ) 
            this.state = 277;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.AS:
                this.state = 272;
                this.match(languageParser.AS);
                this.state = 273;
                localctx.name = this.ident('Using');
                 localctx.decl.name = localctx.name.id; 
                break;
            case languageParser.T__0:
            case languageParser.FROM:
                 this.classifyImplicitName( 'Using' ); 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 282;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.FROM) {
                this.state = 279;
                this.match(languageParser.FROM);
                this.state = 280;
                localctx.str = this.match(languageParser.String);

                          if (!localctx.source.dependencies) localctx.source.dependencies = [];
                          localctx.source.dependencies.push( localctx.decl.fileDep = this.quotedLiteral( localctx.str, 'string' ) );
                        
            }

            break;
        case languageParser.T__1:
             localctx.decl =  this.addItem( localctx.source, 'usings', 'using', [] ) 
            this.state = 285;
            this.match(languageParser.T__1);
            this.state = 286;
            this.innerUsing( localctx.decl );
            this.state = 292;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 287;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore("}")) break; 
                this.state = 289;
                this.innerUsing( localctx.decl );
                this.state = 294;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 295;
            this.match(languageParser.T__3);
            this.state = 299;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.FROM) {
                this.state = 296;
                this.match(languageParser.FROM);
                this.state = 297;
                localctx.str = this.match(languageParser.String);

                          if (!localctx.source.dependencies) localctx.source.dependencies = [];
                          localctx.source.dependencies.push( localctx.decl.fileDep = this.quotedLiteral( localctx.str, 'string' ) );
                        
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 303;
        this.match(languageParser.T__0);
        this._ctx.stop = this._input.LT(-1);
         if (localctx.decl) this.attachLocation(localctx.decl); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InnerUsingContext(parser, parent, invokingState, using) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_innerUsing;
    this.using = null
    this.decl = null
    this.path = null; // ExternalPathContext
    this.name = null; // IdentContext
    this.using = using || null;
    return this;
}

InnerUsingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InnerUsingContext.prototype.constructor = InnerUsingContext;

InnerUsingContext.prototype.externalPath = function() {
    return this.getTypedRuleContext(ExternalPathContext,0);
};

InnerUsingContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

InnerUsingContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};




languageParser.InnerUsingContext = InnerUsingContext;

languageParser.prototype.innerUsing = function(using) {

    var localctx = new InnerUsingContext(this, this._ctx, this.state, using);
    this.enterRule(localctx, 10, languageParser.RULE_innerUsing);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 305;
        localctx.path = this.externalPath();
         localctx.decl =  this.addItem( localctx.using, 'usings', 'using', null, { extern: localctx.path.extern } ) 
        this.state = 312;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.AS:
            this.state = 307;
            this.match(languageParser.AS);
            this.state = 308;
            localctx.name = this.ident('Using');
             localctx.decl.name = localctx.name.id; 
            break;
        case languageParser.T__2:
        case languageParser.T__3:
             this.classifyImplicitName( 'Using' ); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         if (localctx.decl) this.attachLocation(localctx.decl); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExternalPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_externalPath;
    this.extern = {}
    return this;
}

ExternalPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExternalPathContext.prototype.constructor = ExternalPathContext;

ExternalPathContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};




languageParser.ExternalPathContext = ExternalPathContext;

languageParser.prototype.externalPath = function() {

    var localctx = new ExternalPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, languageParser.RULE_externalPath);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 314;
        this.simplePath( localctx.extern, 'global' );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotationAssignment_1Context(parser, parent, invokingState, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotationAssignment_1;
    this.annos = null
    this.assignment = { name: {} }
    this.val = null; // AnnoValueContext
    this.annos = annos || null;
    return this;
}

AnnotationAssignment_1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationAssignment_1Context.prototype.constructor = AnnotationAssignment_1Context;

AnnotationAssignment_1Context.prototype.annotationPath = function() {
    return this.getTypedRuleContext(AnnotationPathContext,0);
};

AnnotationAssignment_1Context.prototype.annotationPathVariant = function() {
    return this.getTypedRuleContext(AnnotationPathVariantContext,0);
};

AnnotationAssignment_1Context.prototype.annoValue = function() {
    return this.getTypedRuleContext(AnnoValueContext,0);
};




languageParser.AnnotationAssignment_1Context = AnnotationAssignment_1Context;

languageParser.prototype.annotationAssignment_1 = function(annos) {

    var localctx = new AnnotationAssignment_1Context(this, this._ctx, this.state, annos);
    this.enterRule(localctx, 14, languageParser.RULE_annotationAssignment_1);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 316;
        this.annotationPath( localctx.assignment.name, 'anno' );
        this.state = 318;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__26) {
            this.state = 317;
            this.annotationPathVariant( localctx.assignment.name );
        }

        this.state = 325;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__4) {
            this.state = 320;
            this.match(languageParser.T__4);
             this.meltKeywordToIdentifier(true); 
            this.state = 322;
            localctx.val = this.annoValue();
             localctx.assignment.value = localctx.val.val; 
        }

        this._ctx.stop = this._input.LT(-1);
         localctx.annos.push( this.attachLocation(localctx.assignment) ); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotationAssignment_parenContext(parser, parent, invokingState, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotationAssignment_paren;
    this.annos = null
    this.annos = annos || null;
    return this;
}

AnnotationAssignment_parenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationAssignment_parenContext.prototype.constructor = AnnotationAssignment_parenContext;

AnnotationAssignment_parenContext.prototype.annotationAssignment_1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_1Context,i);
    }
};




languageParser.AnnotationAssignment_parenContext = AnnotationAssignment_parenContext;

languageParser.prototype.annotationAssignment_paren = function(annos) {

    var localctx = new AnnotationAssignment_parenContext(this, this._ctx, this.state, annos);
    this.enterRule(localctx, 16, languageParser.RULE_annotationAssignment_paren);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 327;
        this.match(languageParser.T__5);

              this.meltKeywordToIdentifier();
              if (this.isStraightBefore(')')) {
                this.warning( 'syntax-anno-useless',
                              this.tokenLocation( this._input.LT(-2), this.getCurrentToken() ),
                              { code: '@()' },
                              'Ignored useless $(CODE)' );
                this.matchWildcard();   // we know it is the ')' - we do not reach the final match
                return localctx;
              }
            
        this.state = 329;
        this.annotationAssignment_1( localctx.annos );
        this.state = 335;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__2) {
            this.state = 330;
            this.match(languageParser.T__2);

                    this.meltKeywordToIdentifier();
                    if (this.isStraightBefore(')')) break; // allow ',' before ')'
                  
            this.state = 332;
            this.annotationAssignment_1( localctx.annos );
            this.state = 337;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 338;
        this.match(languageParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotationAssignment_fixContext(parser, parent, invokingState, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotationAssignment_fix;
    this.annos = null
    this.assignment = null
    this.annos = annos || null;
    return this;
}

AnnotationAssignment_fixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationAssignment_fixContext.prototype.constructor = AnnotationAssignment_fixContext;

AnnotationAssignment_fixContext.prototype.annotationAssignment_paren = function() {
    return this.getTypedRuleContext(AnnotationAssignment_parenContext,0);
};

AnnotationAssignment_fixContext.prototype.annotationPath = function() {
    return this.getTypedRuleContext(AnnotationPathContext,0);
};

AnnotationAssignment_fixContext.prototype.annotationPathVariant = function() {
    return this.getTypedRuleContext(AnnotationPathVariantContext,0);
};




languageParser.AnnotationAssignment_fixContext = AnnotationAssignment_fixContext;

languageParser.prototype.annotationAssignment_fix = function(annos) {

    var localctx = new AnnotationAssignment_fixContext(this, this._ctx, this.state, annos);
    this.enterRule(localctx, 18, languageParser.RULE_annotationAssignment_fix);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 340;
        this.match(languageParser.T__7);
        this.state = 349;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__5:
            this.state = 341;
            this.annotationAssignment_paren( annos );
            break;
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
             localctx.assignment =  { name: {} } 
            this.state = 343;
            this.annotationPath( localctx.assignment.name, 'anno' );
            this.state = 345;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__26) {
                this.state = 344;
                this.annotationPathVariant( localctx.assignment.name );
            }


                    var t = this.getCurrentToken();
                    if (t.text === ':')
                      this.warning( 'syntax-anno-short', localctx.assignment.name.location,
                                    { code: '@(...)' },
                                    'Better use $(CODE) for annotation assignments here' );
                  
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);

          if (localctx.assignment) {
            localctx.annos.push( this.attachLocation(localctx.assignment) );
            this.docComment( localctx.annos );
          }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotationAssignment_ll1Context(parser, parent, invokingState, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotationAssignment_ll1;
    this.annos = null
    this.assignment = null
    this.val = null; // AnnoValueContext
    this.annos = annos || null;
    return this;
}

AnnotationAssignment_ll1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationAssignment_ll1Context.prototype.constructor = AnnotationAssignment_ll1Context;

AnnotationAssignment_ll1Context.prototype.annotationAssignment_paren = function() {
    return this.getTypedRuleContext(AnnotationAssignment_parenContext,0);
};

AnnotationAssignment_ll1Context.prototype.annotationPath = function() {
    return this.getTypedRuleContext(AnnotationPathContext,0);
};

AnnotationAssignment_ll1Context.prototype.annotationPathVariant = function() {
    return this.getTypedRuleContext(AnnotationPathVariantContext,0);
};

AnnotationAssignment_ll1Context.prototype.annoValue = function() {
    return this.getTypedRuleContext(AnnoValueContext,0);
};




languageParser.AnnotationAssignment_ll1Context = AnnotationAssignment_ll1Context;

languageParser.prototype.annotationAssignment_ll1 = function(annos) {

    var localctx = new AnnotationAssignment_ll1Context(this, this._ctx, this.state, annos);
    this.enterRule(localctx, 20, languageParser.RULE_annotationAssignment_ll1);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 351;
        this.match(languageParser.T__7);
        this.state = 365;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__5:
            this.state = 352;
            this.annotationAssignment_paren( annos );
            break;
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
             localctx.assignment =  { name: {} } 
            this.state = 354;
            this.annotationPath( localctx.assignment.name, 'anno' );
            this.state = 356;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__26) {
                this.state = 355;
                this.annotationPathVariant( localctx.assignment.name );
            }

            this.state = 363;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__4) {
                this.state = 358;
                this.match(languageParser.T__4);
                 this.meltKeywordToIdentifier(true); 
                this.state = 360;
                localctx.val = this.annoValue();
                 localctx.assignment.value = localctx.val.val; 
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);

          if (localctx.assignment) {
            localctx.annos.push( this.attachLocation(localctx.assignment) );
            this.docComment( localctx.annos );
          }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotationAssignment_atnContext(parser, parent, invokingState, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotationAssignment_atn;
    this.annos = null
    this.assignment = null
    this.variant = null; // IdentContext
    this.val = null; // AnnoValueBaseContext
    this.at = null; // Token
    this.annos = annos || null;
    return this;
}

AnnotationAssignment_atnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationAssignment_atnContext.prototype.constructor = AnnotationAssignment_atnContext;

AnnotationAssignment_atnContext.prototype.annotationAssignment_paren = function() {
    return this.getTypedRuleContext(AnnotationAssignment_parenContext,0);
};

AnnotationAssignment_atnContext.prototype.annotationPath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationPathContext);
    } else {
        return this.getTypedRuleContext(AnnotationPathContext,i);
    }
};

AnnotationAssignment_atnContext.prototype.HelperToken1 = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.HelperToken1);
    } else {
        return this.getToken(languageParser.HelperToken1, i);
    }
};


AnnotationAssignment_atnContext.prototype.HelperToken2 = function() {
    return this.getToken(languageParser.HelperToken2, 0);
};

AnnotationAssignment_atnContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};

AnnotationAssignment_atnContext.prototype.annoValueBase = function() {
    return this.getTypedRuleContext(AnnoValueBaseContext,0);
};




languageParser.AnnotationAssignment_atnContext = AnnotationAssignment_atnContext;

languageParser.prototype.annotationAssignment_atn = function(annos) {

    var localctx = new AnnotationAssignment_atnContext(this, this._ctx, this.state, annos);
    this.enterRule(localctx, 22, languageParser.RULE_annotationAssignment_atn);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 367;
        this.match(languageParser.T__7);
        this.state = 402;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__5:
            this.state = 368;
            this.annotationAssignment_paren( annos );
            break;
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
             localctx.assignment =  { name: {} } 
            this.state = 370;
            this.annotationPath( localctx.assignment.name, 'anno' );
             this.setLocalToken( '#', 'HelperToken1', null, true ); 
            this.state = 377;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.HelperToken1) {
                this.state = 372;
                this.match(languageParser.HelperToken1);
                 this.meltKeywordToIdentifier(); 
                this.state = 374;
                localctx.variant = this.ident('variant');
                 localctx.assignment.name.variant = localctx.variant.id; 
            }

             this.setLocalToken( ':', 'HelperToken2', null, true ); 
            this.state = 400;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.HelperToken2) {
                this.state = 380;
                this.match(languageParser.HelperToken2);
                 this.meltKeywordToIdentifier(true); 
                this.state = 398;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.T__1:
                case languageParser.T__9:
                case languageParser.T__10:
                case languageParser.T__12:
                case languageParser.T__26:
                case languageParser.String:
                case languageParser.QuotedLiteral:
                case languageParser.Boolean:
                case languageParser.NULL:
                case languageParser.Number:
                    this.state = 382;
                    localctx.val = this.annoValueBase();
                     localctx.assignment.value = localctx.val.val; 
                    break;
                case languageParser.T__7:
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.BOTH:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.DAY:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.HOUR:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEADING:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MINUTE:
                case languageParser.MIXIN:
                case languageParser.MONTH:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.SECOND:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TRAILING:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.USING:
                case languageParser.VIEW:
                case languageParser.YEAR:
                case languageParser.Identifier:
                     localctx.assignment.value = {}; 
                    this.state = 387;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.T__7) {
                        this.state = 386;
                        localctx.at = this.match(languageParser.T__7);
                    }

                    this.state = 389;
                    this.annotationPath( localctx.assignment.value, 'ref', localctx.at );
                     this.setLocalToken( '#', 'HelperToken1', null, true ); 
                    this.state = 396;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.HelperToken1) {
                        this.state = 391;
                        this.match(languageParser.HelperToken1);
                         this.meltKeywordToIdentifier(); 
                        this.state = 393;
                        localctx.variant = this.ident('variant');
                         localctx.assignment.value.variant = localctx.variant.id; 
                    }

                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);

          if (localctx.assignment) {
            localctx.annos.push( this.attachLocation(localctx.assignment) );
            this.docComment( localctx.annos );
          }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RequiredSemiContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_requiredSemi;
    return this;
}

RequiredSemiContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RequiredSemiContext.prototype.constructor = RequiredSemiContext;





languageParser.RequiredSemiContext = RequiredSemiContext;

languageParser.prototype.requiredSemi = function() {

    var localctx = new RequiredSemiContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, languageParser.RULE_requiredSemi);
    try {
        this.state = 407;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__0:
            this.enterOuterAlt(localctx, 1);
            this.state = 404;
            this.match(languageParser.T__0);
            break;
        case languageParser.T__3:
            this.enterOuterAlt(localctx, 2);
             return localctx; 
            this.state = 406;
            this.match(languageParser.T__3);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionalSemiContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_optionalSemi;
    return this;
}

OptionalSemiContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalSemiContext.prototype.constructor = OptionalSemiContext;





languageParser.OptionalSemiContext = OptionalSemiContext;

languageParser.prototype.optionalSemi = function() {

    var localctx = new OptionalSemiContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, languageParser.RULE_optionalSemi);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.noAssignmentInSameLine(); 
        this.state = 411;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__0) {
            this.state = 410;
            this.match(languageParser.T__0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArtifactDefContext(parser, parent, invokingState, outer, defOnly) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_artifactDef;
    this.outer = null
    this.defOnly = false
    this.annos = []
    this.extend = null; // Token
    this.annotate = null; // Token
    this.outer = outer || null;
    this.defOnly = defOnly || null;
    return this;
}

ArtifactDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArtifactDefContext.prototype.constructor = ArtifactDefContext;

ArtifactDefContext.prototype.annotateArtifact = function() {
    return this.getTypedRuleContext(AnnotateArtifactContext,0);
};

ArtifactDefContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ArtifactDefContext.prototype.EXTEND = function() {
    return this.getToken(languageParser.EXTEND, 0);
};

ArtifactDefContext.prototype.ANNOTATE = function() {
    return this.getToken(languageParser.ANNOTATE, 0);
};

ArtifactDefContext.prototype.contextDef = function() {
    return this.getTypedRuleContext(ContextDefContext,0);
};

ArtifactDefContext.prototype.entityDef = function() {
    return this.getTypedRuleContext(EntityDefContext,0);
};

ArtifactDefContext.prototype.typeDef = function() {
    return this.getTypedRuleContext(TypeDefContext,0);
};

ArtifactDefContext.prototype.aspectDef = function() {
    return this.getTypedRuleContext(AspectDefContext,0);
};

ArtifactDefContext.prototype.annotationDef = function() {
    return this.getTypedRuleContext(AnnotationDefContext,0);
};

ArtifactDefContext.prototype.viewDef = function() {
    return this.getTypedRuleContext(ViewDefContext,0);
};

ArtifactDefContext.prototype.eventDef = function() {
    return this.getTypedRuleContext(EventDefContext,0);
};

ArtifactDefContext.prototype.actionFunctionMainDef = function() {
    return this.getTypedRuleContext(ActionFunctionMainDefContext,0);
};

ArtifactDefContext.prototype.extendContext = function() {
    return this.getTypedRuleContext(ExtendContextContext,0);
};

ArtifactDefContext.prototype.extendEntity = function() {
    return this.getTypedRuleContext(ExtendEntityContext,0);
};

ArtifactDefContext.prototype.extendProjection = function() {
    return this.getTypedRuleContext(ExtendProjectionContext,0);
};

ArtifactDefContext.prototype.extendType = function() {
    return this.getTypedRuleContext(ExtendTypeContext,0);
};

ArtifactDefContext.prototype.extendAspect = function() {
    return this.getTypedRuleContext(ExtendAspectContext,0);
};

ArtifactDefContext.prototype.extendArtifact = function() {
    return this.getTypedRuleContext(ExtendArtifactContext,0);
};

ArtifactDefContext.prototype.DEFINE = function() {
    return this.getToken(languageParser.DEFINE, 0);
};




languageParser.ArtifactDefContext = ArtifactDefContext;

languageParser.prototype.artifactDef = function(outer, defOnly) {

    var localctx = new ArtifactDefContext(this, this._ctx, this.state, outer, defOnly);
    this.enterRule(localctx, 28, languageParser.RULE_artifactDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.docComment( localctx.annos ); 
        this.state = 417;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 414;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 419;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 446;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ANNOTATION:
        case languageParser.ASPECT:
        case languageParser.CONTEXT:
        case languageParser.DEFINE:
        case languageParser.ENTITY:
        case languageParser.EVENT:
        case languageParser.FUNCTION:
        case languageParser.SERVICE:
        case languageParser.TYPE:
        case languageParser.VIEW:
        case languageParser.HideAlternatives:
            this.state = 421;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.DEFINE) {
                this.state = 420;
                this.match(languageParser.DEFINE);
            }

            this.state = 431;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.CONTEXT:
            case languageParser.SERVICE:
                this.state = 423;
                this.contextDef( localctx.outer, this.startLocation(), localctx.annos, defOnly );
                break;
            case languageParser.ENTITY:
                this.state = 424;
                this.entityDef( localctx.outer, this.startLocation(), localctx.annos );
                break;
            case languageParser.TYPE:
                this.state = 425;
                this.typeDef( localctx.outer, this.startLocation(), localctx.annos );
                break;
            case languageParser.ABSTRACT:
            case languageParser.ASPECT:
            case languageParser.HideAlternatives:
                this.state = 426;
                this.aspectDef( localctx.outer, this.startLocation(), localctx.annos );
                break;
            case languageParser.ANNOTATION:
                this.state = 427;
                this.annotationDef( localctx.outer, this.startLocation(), localctx.annos );
                break;
            case languageParser.VIEW:
                this.state = 428;
                this.viewDef( localctx.outer, this.startLocation(), localctx.annos );
                break;
            case languageParser.EVENT:
                this.state = 429;
                this.eventDef( localctx.outer, this.startLocation(), localctx.annos );
                break;
            case languageParser.ACTION:
            case languageParser.FUNCTION:
                this.state = 430;
                this.actionFunctionMainDef( localctx.outer, this.startLocation(), localctx.annos );
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case languageParser.EXTEND:
            this.state = 433;
            localctx.extend = this.match(languageParser.EXTEND);
             if (defOnly) // this is a syntax restriction which is ensured in CSN in
                                 // another way
                      this.error( 'syntax-extend-context', localctx.extend,
                                  { code: 'EXTEND artifact', kind: defOnly },
                                  'No $(CODE) within $(KIND) extensions' ); 
            this.state = 441;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
            switch(la_) {
            case 1:
                this.state = 435;
                this.extendContext( localctx.outer, this.startLocation(), localctx.annos );
                break;

            case 2:
                this.state = 436;
                this.extendEntity( localctx.outer, this.startLocation(), localctx.annos );
                break;

            case 3:
                this.state = 437;
                this.extendProjection( localctx.outer, this.startLocation(), localctx.annos );
                break;

            case 4:
                this.state = 438;
                this.extendType( localctx.outer, this.startLocation(), localctx.annos );
                break;

            case 5:
                this.state = 439;
                this.extendAspect( localctx.outer, this.startLocation(), localctx.annos );
                break;

            case 6:
                this.state = 440;
                this.extendArtifact( localctx.outer, this.startLocation(), localctx.annos );
                break;

            }
            break;
        case languageParser.ANNOTATE:
            this.state = 443;
            localctx.annotate = this.match(languageParser.ANNOTATE);
             if (defOnly) // this is a syntax restriction which is ensured in CSN in
                                 // another way
                      this.error( 'syntax-extend-context', localctx.annotate,
                                  { code: 'ANNOTATE artifact', kind: defOnly },
                                  'No $(CODE) within $(KIND) extensions' );
                    this.meltKeywordToIdentifier();
                  
            this.state = 445;
            this.annotateArtifact( localctx.outer, this.startLocation(), localctx.annos );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ContextDefContext(parser, parent, invokingState, outer, loc, annos, defOnly) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_contextDef;
    this.outer = null
    this.loc = null
    this.annos = null
    this.defOnly = false
    this.art = null
    this.name = {}
    this.service = null; // Token
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    this.defOnly = defOnly || null;
    return this;
}

ContextDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContextDefContext.prototype.constructor = ContextDefContext;

ContextDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ContextDefContext.prototype.CONTEXT = function() {
    return this.getToken(languageParser.CONTEXT, 0);
};

ContextDefContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

ContextDefContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ContextDefContext.prototype.SERVICE = function() {
    return this.getToken(languageParser.SERVICE, 0);
};

ContextDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

ContextDefContext.prototype.artifactDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArtifactDefContext);
    } else {
        return this.getTypedRuleContext(ArtifactDefContext,i);
    }
};




languageParser.ContextDefContext = ContextDefContext;

languageParser.prototype.contextDef = function(outer, loc, annos, defOnly) {

    var localctx = new ContextDefContext(this, this._ctx, this.state, outer, loc, annos, defOnly);
    this.enterRule(localctx, 30, languageParser.RULE_contextDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 450;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.CONTEXT:
            this.state = 448;
            this.match(languageParser.CONTEXT);
            break;
        case languageParser.SERVICE:
            this.state = 449;
            localctx.service = this.match(languageParser.SERVICE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 452;
        this.simplePath( localctx.name, localctx.service ? 'Service' : 'Context' );
         localctx.art =  this.addDef( localctx.outer, 'artifacts', localctx.service ? 'service' : 'context', localctx.name, localctx.annos,
                                  {}, localctx.loc )
              this.docComment( localctx.annos ); 
        this.state = 457;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 454;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 459;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 470;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.state = 460;
            this.match(languageParser.T__1);
            this.state = 464;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.EXTEND - 61)))) !== 0) || _la===languageParser.FUNCTION || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (languageParser.SERVICE - 127)) | (1 << (languageParser.TYPE - 127)) | (1 << (languageParser.VIEW - 127)) | (1 << (languageParser.HideAlternatives - 127)))) !== 0)) {
                this.state = 461;
                this.artifactDef( localctx.art, defOnly, true );
                this.state = 466;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 467;
            this.match(languageParser.T__3);
            this.state = 468;
            this.optionalSemi();
            break;
        case languageParser.T__0:
        case languageParser.T__3:
            this.state = 469;
            this.requiredSemi();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtendContextContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendContext;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.service = null; // Token
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ExtendContextContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendContextContext.prototype.constructor = ExtendContextContext;

ExtendContextContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ExtendContextContext.prototype.CONTEXT = function() {
    return this.getToken(languageParser.CONTEXT, 0);
};

ExtendContextContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

ExtendContextContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ExtendContextContext.prototype.SERVICE = function() {
    return this.getToken(languageParser.SERVICE, 0);
};

ExtendContextContext.prototype.WITH = function() {
    return this.getToken(languageParser.WITH, 0);
};

ExtendContextContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ExtendContextContext.prototype.artifactDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArtifactDefContext);
    } else {
        return this.getTypedRuleContext(ArtifactDefContext,i);
    }
};




languageParser.ExtendContextContext = ExtendContextContext;

languageParser.prototype.extendContext = function(outer, loc, annos) {

    var localctx = new ExtendContextContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 32, languageParser.RULE_extendContext);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 474;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.CONTEXT:
            this.state = 472;
            this.match(languageParser.CONTEXT);
            break;
        case languageParser.SERVICE:
            this.state = 473;
            localctx.service = this.match(languageParser.SERVICE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 476;
        this.simplePath( localctx.name, localctx.service ? 'Service' : 'Context' );
         localctx.art =  this.addItem( localctx.outer, 'extensions', 'extend', localctx.annos,
                                   { name: localctx.name, expectedKind: localctx.service ? 'service' : 'context' },
                                   localctx.loc )  
        this.state = 480;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.WITH) {
            this.state = 478;
            this.match(languageParser.WITH);
             this.noSemicolonHere(); 
        }

         this.docComment( localctx.annos ); 
        this.state = 486;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 483;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 488;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 499;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.state = 489;
            this.match(languageParser.T__1);
            this.state = 493;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.EXTEND - 61)))) !== 0) || _la===languageParser.FUNCTION || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (languageParser.SERVICE - 127)) | (1 << (languageParser.TYPE - 127)) | (1 << (languageParser.VIEW - 127)) | (1 << (languageParser.HideAlternatives - 127)))) !== 0)) {
                this.state = 490;
                this.artifactDef( localctx.art, localctx.service ? 'SERVICE' : 'CONTEXT', true );
                this.state = 495;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 496;
            this.match(languageParser.T__3);
            this.state = 497;
            this.optionalSemi();
            break;
        case languageParser.T__0:
        case languageParser.T__3:
            this.state = 498;
            this.requiredSemi();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EntityDefContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_entityDef;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.qe = null; // QueryExpressionContext
    this.qp = null; // ProjectionSpecContext
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

EntityDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EntityDefContext.prototype.constructor = EntityDefContext;

EntityDefContext.prototype.ENTITY = function() {
    return this.getToken(languageParser.ENTITY, 0);
};

EntityDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

EntityDefContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

EntityDefContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

EntityDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

EntityDefContext.prototype.entityParameters = function() {
    return this.getTypedRuleContext(EntityParametersContext,0);
};

EntityDefContext.prototype.projectionClauses = function() {
    return this.getTypedRuleContext(ProjectionClausesContext,0);
};

EntityDefContext.prototype.includeRef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IncludeRefContext);
    } else {
        return this.getTypedRuleContext(IncludeRefContext,i);
    }
};

EntityDefContext.prototype.elementDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementDefContext);
    } else {
        return this.getTypedRuleContext(ElementDefContext,i);
    }
};

EntityDefContext.prototype.ACTIONS = function() {
    return this.getToken(languageParser.ACTIONS, 0);
};

EntityDefContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

EntityDefContext.prototype.projectionSpec = function() {
    return this.getTypedRuleContext(ProjectionSpecContext,0);
};

EntityDefContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

EntityDefContext.prototype.actionFunctionDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ActionFunctionDefContext);
    } else {
        return this.getTypedRuleContext(ActionFunctionDefContext,i);
    }
};




languageParser.EntityDefContext = EntityDefContext;

languageParser.prototype.entityDef = function(outer, loc, annos) {

    var localctx = new EntityDefContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 34, languageParser.RULE_entityDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 501;
        this.match(languageParser.ENTITY);
        this.state = 502;
        this.simplePath( localctx.name, 'Entity' );
         localctx.art =  this.addDef( localctx.outer, 'artifacts', 'entity', localctx.name, localctx.annos, {}, localctx.loc )
              this.docComment( localctx.annos ); 
        this.state = 507;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 504;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 509;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 511;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__5) {
            this.state = 510;
            this.entityParameters( localctx.art );
        }

        this.state = 580;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
        case languageParser.T__4:
            this.state = 523;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__4) {
                this.state = 513;
                this.match(languageParser.T__4);
                this.state = 514;
                this.includeRef( localctx.art );
                this.state = 520;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__2) {
                    this.state = 515;
                    this.match(languageParser.T__2);
                     if (this.isStraightBefore('{')) break; 
                    this.state = 517;
                    this.includeRef( localctx.art );
                    this.state = 522;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 525;
            this.match(languageParser.T__1);
             localctx.art.elements = Object.create(null); 
            this.state = 530;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.BOTH - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.DAY - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENT - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.HOUR - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEADING - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MASKED - 80)) | (1 << (languageParser.MINUS - 80)) | (1 << (languageParser.MINUTE - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.MIXIN - 112)) | (1 << (languageParser.MONTH - 112)) | (1 << (languageParser.NAMESPACE - 112)) | (1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.SECOND - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TRAILING - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.YEAR - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
                this.state = 527;
                this.elementDef( localctx.art );
                this.state = 532;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 533;
            this.match(languageParser.T__3);
            this.state = 543;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.ACTIONS) {
                this.state = 534;
                this.match(languageParser.ACTIONS);
                this.state = 535;
                this.match(languageParser.T__1);
                this.state = 539;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
                    this.state = 536;
                    this.actionFunctionDef( localctx.art );
                    this.state = 541;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 542;
                this.match(languageParser.T__3);
            }

            this.state = 545;
            this.optionalSemi();
            break;
        case languageParser.AS:
            this.state = 546;
            this.match(languageParser.AS);
            this.state = 578;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.T__5:
            case languageParser.SELECT:
                this.state = 547;
                localctx.qe = this.queryExpression();
                 localctx.art.query = localctx.qe.query; localctx.art['$'+'syntax'] = 'entity' 
                this.state = 560;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.ACTIONS:
                    this.state = 549;
                    this.match(languageParser.ACTIONS);
                    this.state = 550;
                    this.match(languageParser.T__1);
                    this.state = 554;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
                        this.state = 551;
                        this.actionFunctionDef( localctx.art );
                        this.state = 556;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 557;
                    this.match(languageParser.T__3);
                    this.state = 558;
                    this.optionalSemi();
                    break;
                case languageParser.T__0:
                case languageParser.T__3:
                    this.state = 559;
                    this.requiredSemi();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;
            case languageParser.PROJECTION:
                this.state = 562;
                localctx.qp = this.projectionSpec();
                 localctx.art.query = localctx.qp.query; localctx.art['$'+'syntax'] = 'projection'; 
                this.state = 564;
                this.projectionClauses( localctx.qp.query );
                this.state = 574;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.ACTIONS) {
                    this.state = 565;
                    this.match(languageParser.ACTIONS);
                    this.state = 566;
                    this.match(languageParser.T__1);
                    this.state = 570;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
                        this.state = 567;
                        this.actionFunctionDef( localctx.art );
                        this.state = 572;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 573;
                    this.match(languageParser.T__3);
                }

                this.state = 576;
                this.optionalSemi();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProjectionSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_projectionSpec;
    this.query = null
    this.src = null
    this.proj = null; // Token
    this.aliasName = null; // IdentContext
    return this;
}

ProjectionSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProjectionSpecContext.prototype.constructor = ProjectionSpecContext;

ProjectionSpecContext.prototype.ON = function() {
    return this.getToken(languageParser.ON, 0);
};

ProjectionSpecContext.prototype.fromPath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FromPathContext);
    } else {
        return this.getTypedRuleContext(FromPathContext,i);
    }
};

ProjectionSpecContext.prototype.PROJECTION = function() {
    return this.getToken(languageParser.PROJECTION, 0);
};

ProjectionSpecContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

ProjectionSpecContext.prototype.bracedSelectItemListDef = function() {
    return this.getTypedRuleContext(BracedSelectItemListDefContext,0);
};

ProjectionSpecContext.prototype.EXCLUDING = function() {
    return this.getToken(languageParser.EXCLUDING, 0);
};

ProjectionSpecContext.prototype.projectionExclusion = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProjectionExclusionContext);
    } else {
        return this.getTypedRuleContext(ProjectionExclusionContext,i);
    }
};

ProjectionSpecContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};




languageParser.ProjectionSpecContext = ProjectionSpecContext;

languageParser.prototype.projectionSpec = function() {

    var localctx = new ProjectionSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, languageParser.RULE_projectionSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 582;
        localctx.proj = this.match(languageParser.PROJECTION);
        this.state = 583;
        this.match(languageParser.ON);

              localctx.src =  { path: [], scope: 0 }
              localctx.query =  { op: this.tokenLocation( localctx.proj, undefined, 'SELECT' ), from: localctx.src, location: this.startLocation() }
            
        this.state = 585;
        this.fromPath( localctx.src, 'artref');
        this.state = 589;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__4) {
            this.state = 586;
            this.match(languageParser.T__4);
             localctx.src.scope = localctx.src.path.length; 
            this.state = 588;
            this.fromPath( localctx.src, 'ref');
        }

        this.state = 595;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.AS) {
            this.state = 591;
            this.match(languageParser.AS);
            this.state = 592;
            localctx.aliasName = this.ident('FromAlias');
             localctx.src.name = localctx.aliasName.id 
        }

        this.state = 598;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__1) {
            this.state = 597;
            this.bracedSelectItemListDef( localctx.query );
        }

        this.state = 613;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.EXCLUDING) {
            this.state = 600;
            this.match(languageParser.EXCLUDING);
            this.state = 601;
            this.match(languageParser.T__1);
            this.state = 602;
            this.projectionExclusion( localctx.query );
            this.state = 608;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 603;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore("}")) break; 
                this.state = 605;
                this.projectionExclusion( localctx.query );
                this.state = 610;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 611;
            this.match(languageParser.T__3);
        }

        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.query); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProjectionClausesContext(parser, parent, invokingState, query) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_projectionClauses;
    this.query = null
    this.cond = null; // ConditionContext
    this.e1 = null; // ExpressionContext
    this.en = null; // ExpressionContext
    this.having = null; // ConditionContext
    this.ob = null; // OrderByClauseContext
    this.lc = null; // LimitClauseContext
    this.query = query || null;
    return this;
}

ProjectionClausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProjectionClausesContext.prototype.constructor = ProjectionClausesContext;

ProjectionClausesContext.prototype.WHERE = function() {
    return this.getToken(languageParser.WHERE, 0);
};

ProjectionClausesContext.prototype.GROUP = function() {
    return this.getToken(languageParser.GROUP, 0);
};

ProjectionClausesContext.prototype.BY = function() {
    return this.getToken(languageParser.BY, 0);
};

ProjectionClausesContext.prototype.HAVING = function() {
    return this.getToken(languageParser.HAVING, 0);
};

ProjectionClausesContext.prototype.condition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConditionContext);
    } else {
        return this.getTypedRuleContext(ConditionContext,i);
    }
};

ProjectionClausesContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ProjectionClausesContext.prototype.orderByClause = function() {
    return this.getTypedRuleContext(OrderByClauseContext,0);
};

ProjectionClausesContext.prototype.limitClause = function() {
    return this.getTypedRuleContext(LimitClauseContext,0);
};




languageParser.ProjectionClausesContext = ProjectionClausesContext;

languageParser.prototype.projectionClauses = function(query) {

    var localctx = new ProjectionClausesContext(this, this._ctx, this.state, query);
    this.enterRule(localctx, 38, languageParser.RULE_projectionClauses);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 619;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.WHERE) {
            this.state = 615;
            this.match(languageParser.WHERE);
            this.state = 616;
            localctx.cond = this.condition();
             localctx.query.where = localctx.cond.cond; 
        }

        this.state = 634;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.GROUP) {
            this.state = 621;
            this.match(languageParser.GROUP);
            this.state = 622;
            this.match(languageParser.BY);
            this.state = 623;
            localctx.e1 = this.expression();
             localctx.query.groupBy = [ localctx.e1.expr ]; 
            this.state = 631;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 625;
                this.match(languageParser.T__2);
                this.state = 626;
                localctx.en = this.expression();
                 localctx.query.groupBy.push( localctx.en.expr ); 
                this.state = 633;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 640;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.HAVING) {
            this.state = 636;
            this.match(languageParser.HAVING);
            this.state = 637;
            localctx.having = this.condition();
             localctx.query.having = localctx.having.cond; 
        }

        this.state = 645;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.ORDER) {
            this.state = 642;
            localctx.ob = this.orderByClause( localctx.query );
             localctx.query =  localctx.ob.query 
        }

        this.state = 650;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.LIMIT) {
            this.state = 647;
            localctx.lc = this.limitClause( localctx.query );
             localctx.query =  localctx.lc.query 
        }

        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.query); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProjectionExclusionContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_projectionExclusion;
    this.outer = null
    this.art = null
    this.name = null; // IdentContext
    this.outer = outer || null;
    return this;
}

ProjectionExclusionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProjectionExclusionContext.prototype.constructor = ProjectionExclusionContext;

ProjectionExclusionContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};




languageParser.ProjectionExclusionContext = ProjectionExclusionContext;

languageParser.prototype.projectionExclusion = function(outer) {

    var localctx = new ProjectionExclusionContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 40, languageParser.RULE_projectionExclusion);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 652;
        localctx.name = this.ident('ref');
         localctx.art =  this.addDef( localctx.outer, 'excludingDict', '', localctx.name.id ) 
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtendEntityContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendEntity;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ExtendEntityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendEntityContext.prototype.constructor = ExtendEntityContext;

ExtendEntityContext.prototype.ENTITY = function() {
    return this.getToken(languageParser.ENTITY, 0);
};

ExtendEntityContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ExtendEntityContext.prototype.WITH = function() {
    return this.getToken(languageParser.WITH, 0);
};

ExtendEntityContext.prototype.extendForEntity = function() {
    return this.getTypedRuleContext(ExtendForEntityContext,0);
};

ExtendEntityContext.prototype.includeRef = function() {
    return this.getTypedRuleContext(IncludeRefContext,0);
};

ExtendEntityContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ExtendEntityContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};




languageParser.ExtendEntityContext = ExtendEntityContext;

languageParser.prototype.extendEntity = function(outer, loc, annos) {

    var localctx = new ExtendEntityContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 42, languageParser.RULE_extendEntity);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 655;
        this.match(languageParser.ENTITY);
        this.state = 656;
        this.simplePath( localctx.name, 'Extend' );
         localctx.art =  this.addItem( localctx.outer, 'extensions', 'extend', localctx.annos,
                                   { name: localctx.name, expectedKind: 'entity' }, localctx.loc )  
        this.state = 680;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.WITH:
            this.state = 658;
            this.match(languageParser.WITH);
             this.noSemicolonHere(); this.docComment( localctx.annos ); 
            this.state = 663;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7) {
                this.state = 660;
                this.annotationAssignment_ll1( localctx.annos );
                this.state = 665;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 670;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
            switch(la_) {
            case 1:
                this.state = 666;
                this.includeRef( localctx.art );
                this.state = 667;
                this.requiredSemi();
                break;

            case 2:
                this.state = 669;
                this.extendForEntity( localctx.art );
                break;

            }
            break;
        case languageParser.T__0:
        case languageParser.T__1:
        case languageParser.T__3:
        case languageParser.T__7:
        case languageParser.ACTIONS:
             this.docComment( localctx.annos ); 
            this.state = 676;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7) {
                this.state = 673;
                this.annotationAssignment_ll1( localctx.annos );
                this.state = 678;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 679;
            this.extendForEntity( localctx.art );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtendForEntityContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendForEntity;
    this.art = null
    this.art = art || null;
    return this;
}

ExtendForEntityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendForEntityContext.prototype.constructor = ExtendForEntityContext;

ExtendForEntityContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

ExtendForEntityContext.prototype.elementDefOrExtend = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementDefOrExtendContext);
    } else {
        return this.getTypedRuleContext(ElementDefOrExtendContext,i);
    }
};

ExtendForEntityContext.prototype.ACTIONS = function() {
    return this.getToken(languageParser.ACTIONS, 0);
};

ExtendForEntityContext.prototype.actionFunctionDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ActionFunctionDefContext);
    } else {
        return this.getTypedRuleContext(ActionFunctionDefContext,i);
    }
};

ExtendForEntityContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};




languageParser.ExtendForEntityContext = ExtendForEntityContext;

languageParser.prototype.extendForEntity = function(art) {

    var localctx = new ExtendForEntityContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 44, languageParser.RULE_extendForEntity);
    var _la = 0; // Token type
    try {
        this.state = 713;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.enterOuterAlt(localctx, 1);
            this.state = 682;
            this.match(languageParser.T__1);
            this.state = 686;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.BOTH - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.DAY - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENT - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.HOUR - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEADING - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MASKED - 80)) | (1 << (languageParser.MINUS - 80)) | (1 << (languageParser.MINUTE - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.MIXIN - 112)) | (1 << (languageParser.MONTH - 112)) | (1 << (languageParser.NAMESPACE - 112)) | (1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.SECOND - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TRAILING - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.YEAR - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
                this.state = 683;
                this.elementDefOrExtend( localctx.art );
                this.state = 688;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 689;
            this.match(languageParser.T__3);
            this.state = 699;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.ACTIONS) {
                this.state = 690;
                this.match(languageParser.ACTIONS);
                this.state = 691;
                this.match(languageParser.T__1);
                this.state = 695;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
                    this.state = 692;
                    this.actionFunctionDef( localctx.art );
                    this.state = 697;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 698;
                this.match(languageParser.T__3);
            }

            this.state = 701;
            this.optionalSemi();
            break;
        case languageParser.ACTIONS:
            this.enterOuterAlt(localctx, 2);
            this.state = 702;
            this.match(languageParser.ACTIONS);
            this.state = 703;
            this.match(languageParser.T__1);
            this.state = 707;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
                this.state = 704;
                this.actionFunctionDef( localctx.art );
                this.state = 709;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 710;
            this.match(languageParser.T__3);
            this.state = 711;
            this.optionalSemi();
            break;
        case languageParser.T__0:
        case languageParser.T__3:
            this.enterOuterAlt(localctx, 3);
            this.state = 712;
            this.requiredSemi();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtendProjectionContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendProjection;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.expected = null; // Token
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ExtendProjectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendProjectionContext.prototype.constructor = ExtendProjectionContext;

ExtendProjectionContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ExtendProjectionContext.prototype.PROJECTION = function() {
    return this.getToken(languageParser.PROJECTION, 0);
};

ExtendProjectionContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

ExtendProjectionContext.prototype.ACTIONS = function() {
    return this.getToken(languageParser.ACTIONS, 0);
};

ExtendProjectionContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ExtendProjectionContext.prototype.WITH = function() {
    return this.getToken(languageParser.WITH, 0);
};

ExtendProjectionContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ExtendProjectionContext.prototype.selectItemDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectItemDefContext);
    } else {
        return this.getTypedRuleContext(SelectItemDefContext,i);
    }
};

ExtendProjectionContext.prototype.actionFunctionDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ActionFunctionDefContext);
    } else {
        return this.getTypedRuleContext(ActionFunctionDefContext,i);
    }
};




languageParser.ExtendProjectionContext = ExtendProjectionContext;

languageParser.prototype.extendProjection = function(outer, loc, annos) {

    var localctx = new ExtendProjectionContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 46, languageParser.RULE_extendProjection);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 715;
        localctx.expected = this.match(languageParser.PROJECTION);
        this.state = 716;
        this.simplePath( localctx.name, 'Extend' );

              localctx.art =  this.addItem( localctx.outer, 'extensions', 'extend', localctx.annos,
                                   { name: localctx.name, expectedKind: 'entity' }, // or 'projection'?
                                   localctx.loc )  
        this.state = 720;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.WITH) {
            this.state = 718;
            this.match(languageParser.WITH);
             this.noSemicolonHere(); 
        }

         this.docComment( localctx.annos ); 
        this.state = 726;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 723;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 728;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 766;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.state = 729;
            this.match(languageParser.T__1);
             localctx.art.columns = []; 
            this.state = 740;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__1) | (1 << languageParser.T__4) | (1 << languageParser.T__5) | (1 << languageParser.T__7) | (1 << languageParser.T__9) | (1 << languageParser.T__10) | (1 << languageParser.T__16) | (1 << languageParser.T__26))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (languageParser.String - 32)) | (1 << (languageParser.QuotedLiteral - 32)) | (1 << (languageParser.Boolean - 32)) | (1 << (languageParser.CASE - 32)) | (1 << (languageParser.CAST - 32)) | (1 << (languageParser.EXTRACT - 32)) | (1 << (languageParser.KEY - 32)) | (1 << (languageParser.NEW - 32)) | (1 << (languageParser.NULL - 32)) | (1 << (languageParser.TRIM - 32)) | (1 << (languageParser.Number - 32)) | (1 << (languageParser.ABSTRACT - 32)) | (1 << (languageParser.ACTION - 32)) | (1 << (languageParser.ACTIONS - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (languageParser.AND - 64)) | (1 << (languageParser.ANNOTATE - 64)) | (1 << (languageParser.ANNOTATION - 64)) | (1 << (languageParser.ARRAY - 64)) | (1 << (languageParser.ASC - 64)) | (1 << (languageParser.ASPECT - 64)) | (1 << (languageParser.ASSOCIATION - 64)) | (1 << (languageParser.BETWEEN - 64)) | (1 << (languageParser.BOTH - 64)) | (1 << (languageParser.COMPOSITION - 64)) | (1 << (languageParser.CONTEXT - 64)) | (1 << (languageParser.CROSS - 64)) | (1 << (languageParser.DAY - 64)) | (1 << (languageParser.DEFAULT - 64)) | (1 << (languageParser.DEFINE - 64)) | (1 << (languageParser.DESC - 64)) | (1 << (languageParser.ELEMENT - 64)) | (1 << (languageParser.ELSE - 64)) | (1 << (languageParser.END - 64)) | (1 << (languageParser.ENTITY - 64)) | (1 << (languageParser.ENUM - 64)) | (1 << (languageParser.EVENT - 64)) | (1 << (languageParser.ESCAPE - 64)) | (1 << (languageParser.EXACT - 64)) | (1 << (languageParser.EXCEPT - 64)) | (1 << (languageParser.EXCLUDING - 64)) | (1 << (languageParser.EXTEND - 64)) | (1 << (languageParser.FIRST - 64)) | (1 << (languageParser.FULL - 64)) | (1 << (languageParser.FUNCTION - 64)) | (1 << (languageParser.GROUP - 64)) | (1 << (languageParser.HAVING - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (languageParser.HOUR - 96)) | (1 << (languageParser.INNER - 96)) | (1 << (languageParser.INTERSECT - 96)) | (1 << (languageParser.INTO - 96)) | (1 << (languageParser.IS - 96)) | (1 << (languageParser.JOIN - 96)) | (1 << (languageParser.LAST - 96)) | (1 << (languageParser.LEADING - 96)) | (1 << (languageParser.LEFT - 96)) | (1 << (languageParser.LIKE - 96)) | (1 << (languageParser.LIMIT - 96)) | (1 << (languageParser.LOCALIZED - 96)) | (1 << (languageParser.MANY - 96)) | (1 << (languageParser.MASKED - 96)) | (1 << (languageParser.MINUS - 96)) | (1 << (languageParser.MINUTE - 96)) | (1 << (languageParser.MIXIN - 96)) | (1 << (languageParser.MONTH - 96)) | (1 << (languageParser.NAMESPACE - 96)) | (1 << (languageParser.NULLS - 96)) | (1 << (languageParser.OFFSET - 96)) | (1 << (languageParser.ONE - 96)) | (1 << (languageParser.OR - 96)) | (1 << (languageParser.ORDER - 96)) | (1 << (languageParser.OUTER - 96)) | (1 << (languageParser.PARAMETERS - 96)) | (1 << (languageParser.PROJECTION - 96)) | (1 << (languageParser.REDIRECTED - 96)) | (1 << (languageParser.RETURNS - 96)) | (1 << (languageParser.RIGHT - 96)) | (1 << (languageParser.SECOND - 96)) | (1 << (languageParser.SERVICE - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (languageParser.THEN - 128)) | (1 << (languageParser.TRAILING - 128)) | (1 << (languageParser.TO - 128)) | (1 << (languageParser.TYPE - 128)) | (1 << (languageParser.UNION - 128)) | (1 << (languageParser.USING - 128)) | (1 << (languageParser.VIEW - 128)) | (1 << (languageParser.YEAR - 128)) | (1 << (languageParser.Identifier - 128)) | (1 << (languageParser.VIRTUAL - 128)) | (1 << (languageParser.HideAlternatives - 128)))) !== 0)) {
                this.state = 731;
                this.selectItemDef( localctx.art.columns );
                this.state = 737;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__2) {
                    this.state = 732;
                    this.match(languageParser.T__2);
                     if (this.isStraightBefore("}")) break; 
                    this.state = 734;
                    this.selectItemDef( localctx.art.columns );
                    this.state = 739;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 742;
            this.match(languageParser.T__3);
            this.state = 752;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.ACTIONS) {
                this.state = 743;
                this.match(languageParser.ACTIONS);
                this.state = 744;
                this.match(languageParser.T__1);
                this.state = 748;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
                    this.state = 745;
                    this.actionFunctionDef( localctx.art );
                    this.state = 750;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 751;
                this.match(languageParser.T__3);
            }

            this.state = 754;
            this.optionalSemi();
            break;
        case languageParser.ACTIONS:
            this.state = 755;
            this.match(languageParser.ACTIONS);
            this.state = 756;
            this.match(languageParser.T__1);
            this.state = 760;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
                this.state = 757;
                this.actionFunctionDef( localctx.art );
                this.state = 762;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 763;
            this.match(languageParser.T__3);
            this.state = 764;
            this.optionalSemi();
            break;
        case languageParser.T__0:
        case languageParser.T__3:
            this.state = 765;
            this.requiredSemi();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ActionFunctionDefContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_actionFunctionDef;
    this.outer = null
    this.art = null
    this.annos = []
    this.name = null; // IdentContext
    this.outer = outer || null;
    return this;
}

ActionFunctionDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ActionFunctionDefContext.prototype.constructor = ActionFunctionDefContext;

ActionFunctionDefContext.prototype.ACTION = function() {
    return this.getToken(languageParser.ACTION, 0);
};

ActionFunctionDefContext.prototype.parameterListDef = function() {
    return this.getTypedRuleContext(ParameterListDefContext,0);
};

ActionFunctionDefContext.prototype.FUNCTION = function() {
    return this.getToken(languageParser.FUNCTION, 0);
};

ActionFunctionDefContext.prototype.returnTypeSpec = function() {
    return this.getTypedRuleContext(ReturnTypeSpecContext,0);
};

ActionFunctionDefContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ActionFunctionDefContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

ActionFunctionDefContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ActionFunctionDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};




languageParser.ActionFunctionDefContext = ActionFunctionDefContext;

languageParser.prototype.actionFunctionDef = function(outer) {

    var localctx = new ActionFunctionDefContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 48, languageParser.RULE_actionFunctionDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.docComment( localctx.annos ); 
        this.state = 772;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 769;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 774;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 801;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.ACTION:
            this.state = 775;
            this.match(languageParser.ACTION);
            this.state = 776;
            localctx.name = this.ident('BoundAction');
             localctx.art =  this.addDef( localctx.outer, 'actions', 'action', localctx.name.id, localctx.annos )
                    this.docComment( localctx.annos ); 
            this.state = 781;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7) {
                this.state = 778;
                this.annotationAssignment_fix( localctx.annos );
                this.state = 783;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 784;
            this.parameterListDef( localctx.art );
            this.state = 787;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.RETURNS:
                this.state = 785;
                this.returnTypeSpec( localctx.art, localctx.annos );
                break;
            case languageParser.T__0:
            case languageParser.T__3:
                this.state = 786;
                this.requiredSemi();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case languageParser.FUNCTION:
            this.state = 789;
            this.match(languageParser.FUNCTION);
            this.state = 790;
            localctx.name = this.ident('BoundAction');
             localctx.art =  this.addDef( localctx.outer, 'actions', 'function', localctx.name.id, localctx.annos )
                    this.docComment( localctx.annos ); 
            this.state = 795;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7) {
                this.state = 792;
                this.annotationAssignment_fix( localctx.annos );
                this.state = 797;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 798;
            this.parameterListDef( localctx.art );
            this.state = 799;
            this.returnTypeSpec( localctx.art, localctx.annos );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ActionFunctionMainDefContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_actionFunctionMainDef;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ActionFunctionMainDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ActionFunctionMainDefContext.prototype.constructor = ActionFunctionMainDefContext;

ActionFunctionMainDefContext.prototype.ACTION = function() {
    return this.getToken(languageParser.ACTION, 0);
};

ActionFunctionMainDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ActionFunctionMainDefContext.prototype.parameterListDef = function() {
    return this.getTypedRuleContext(ParameterListDefContext,0);
};

ActionFunctionMainDefContext.prototype.returnTypeSpec = function() {
    return this.getTypedRuleContext(ReturnTypeSpecContext,0);
};

ActionFunctionMainDefContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ActionFunctionMainDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

ActionFunctionMainDefContext.prototype.FUNCTION = function() {
    return this.getToken(languageParser.FUNCTION, 0);
};




languageParser.ActionFunctionMainDefContext = ActionFunctionMainDefContext;

languageParser.prototype.actionFunctionMainDef = function(outer, loc, annos) {

    var localctx = new ActionFunctionMainDefContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 50, languageParser.RULE_actionFunctionMainDef);
    var _la = 0; // Token type
    try {
        this.state = 829;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.ACTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 803;
            this.match(languageParser.ACTION);
            this.state = 804;
            this.simplePath( localctx.name, 'Action' );
             localctx.art =  this.addDef( localctx.outer, 'artifacts', 'action', localctx.name, localctx.annos, {}, localctx.loc )
                  this.docComment( localctx.annos ); 
            this.state = 809;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7) {
                this.state = 806;
                this.annotationAssignment_fix( localctx.annos );
                this.state = 811;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 812;
            this.parameterListDef( localctx.art );
            this.state = 815;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.RETURNS:
                this.state = 813;
                this.returnTypeSpec( localctx.art, localctx.annos );
                break;
            case languageParser.T__0:
            case languageParser.T__3:
                this.state = 814;
                this.requiredSemi();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case languageParser.FUNCTION:
            this.enterOuterAlt(localctx, 2);
            this.state = 817;
            this.match(languageParser.FUNCTION);
            this.state = 818;
            this.simplePath( localctx.name, 'Action' );
             localctx.art =  this.addDef( localctx.outer, 'artifacts', 'function', localctx.name, localctx.annos, {}, localctx.loc )
                  this.docComment( localctx.annos ); 
            this.state = 823;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7) {
                this.state = 820;
                this.annotationAssignment_fix( localctx.annos );
                this.state = 825;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 826;
            this.parameterListDef( localctx.art );
            this.state = 827;
            this.returnTypeSpec( localctx.art, localctx.annos );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EventDefContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_eventDef;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.qp = null; // ProjectionSpecContext
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

EventDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventDefContext.prototype.constructor = EventDefContext;

EventDefContext.prototype.EVENT = function() {
    return this.getToken(languageParser.EVENT, 0);
};

EventDefContext.prototype.simplePath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SimplePathContext);
    } else {
        return this.getTypedRuleContext(SimplePathContext,i);
    }
};

EventDefContext.prototype.typeStruct = function() {
    return this.getTypedRuleContext(TypeStructContext,0);
};

EventDefContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

EventDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

EventDefContext.prototype.projectionSpec = function() {
    return this.getTypedRuleContext(ProjectionSpecContext,0);
};

EventDefContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

EventDefContext.prototype.includeRef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IncludeRefContext);
    } else {
        return this.getTypedRuleContext(IncludeRefContext,i);
    }
};

EventDefContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};




languageParser.EventDefContext = EventDefContext;

languageParser.prototype.eventDef = function(outer, loc, annos) {

    var localctx = new EventDefContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 52, languageParser.RULE_eventDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 831;
        this.match(languageParser.EVENT);
        this.state = 832;
        this.simplePath( localctx.name, 'Event' );
         localctx.art =  this.addDef( localctx.outer, 'artifacts', 'event', localctx.name, localctx.annos, {}, localctx.loc )
              this.docComment( localctx.annos ); 
        this.state = 837;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 834;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 839;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 877;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.state = 840;
            this.typeStruct( localctx.art );
            this.state = 841;
            this.optionalSemi();
            break;
        case languageParser.T__4:
            this.state = 843;
            this.match(languageParser.T__4);
            this.state = 875;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
            switch(la_) {
            case 1:
                 localctx.art.type = {}; 
                this.state = 845;
                this.simplePath( localctx.art.type, 'artref' );
                this.state = 866;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.T__1:
                case languageParser.T__2:
                     localctx.art.includes = [ localctx.art.type ]; delete localctx.art.type; 
                    this.state = 852;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__2) {
                        this.state = 847;
                        this.match(languageParser.T__2);
                         if (this.isStraightBefore('{')) break; 
                        this.state = 849;
                        this.includeRef( localctx.art );
                        this.state = 854;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 855;
                    this.typeStruct( localctx.art );
                    this.state = 856;
                    this.optionalSemi();
                    break;
                case languageParser.T__0:
                case languageParser.T__3:
                case languageParser.T__7:
                     this.docComment( localctx.annos ); 
                    this.state = 862;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7) {
                        this.state = 859;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 864;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 865;
                    this.requiredSemi();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;

            case 2:
                this.state = 868;
                this.typeStruct( localctx.art );
                this.state = 869;
                this.optionalSemi();
                break;

            case 3:
                this.state = 871;
                localctx.qp = this.projectionSpec();
                 localctx.art.query = localctx.qp.query; localctx.art['$'+'syntax'] = 'projection'; 
                this.state = 873;
                this.optionalSemi();
                break;

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AspectDefContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_aspectDef;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.abs = null; // Token
    this.ent = null; // Token
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

AspectDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AspectDefContext.prototype.constructor = AspectDefContext;

AspectDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

AspectDefContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

AspectDefContext.prototype.ASPECT = function() {
    return this.getToken(languageParser.ASPECT, 0);
};

AspectDefContext.prototype.ENTITY = function() {
    return this.getToken(languageParser.ENTITY, 0);
};

AspectDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

AspectDefContext.prototype.ACTIONS = function() {
    return this.getToken(languageParser.ACTIONS, 0);
};

AspectDefContext.prototype.HideAlternatives = function() {
    return this.getToken(languageParser.HideAlternatives, 0);
};

AspectDefContext.prototype.ABSTRACT = function() {
    return this.getToken(languageParser.ABSTRACT, 0);
};

AspectDefContext.prototype.elementDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementDefContext);
    } else {
        return this.getTypedRuleContext(ElementDefContext,i);
    }
};

AspectDefContext.prototype.includeRef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IncludeRefContext);
    } else {
        return this.getTypedRuleContext(IncludeRefContext,i);
    }
};

AspectDefContext.prototype.actionFunctionDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ActionFunctionDefContext);
    } else {
        return this.getTypedRuleContext(ActionFunctionDefContext,i);
    }
};




languageParser.AspectDefContext = AspectDefContext;

languageParser.prototype.aspectDef = function(outer, loc, annos) {

    var localctx = new AspectDefContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 54, languageParser.RULE_aspectDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 885;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.ASPECT:
            this.state = 879;
            this.match(languageParser.ASPECT);
            break;
        case languageParser.ABSTRACT:
        case languageParser.HideAlternatives:
            this.state = 882;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.ABSTRACT:
                this.state = 880;
                localctx.abs = this.match(languageParser.ABSTRACT);
                break;
            case languageParser.HideAlternatives:
                this.state = 881;
                this.match(languageParser.HideAlternatives);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 884;
            localctx.ent = this.match(languageParser.ENTITY);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 887;
        this.simplePath( localctx.name, 'Type' );
         localctx.art =  this.addDef( localctx.outer, 'artifacts', 'aspect', localctx.name, localctx.annos, {}, localctx.loc )
              // backends do not like ['$'+'syntax']: (localctx.ent ? 'entity' : 'aspect')
              if (localctx.ent)
                this.warning( 'syntax-deprecated-abstract', this.tokenLocation( localctx.abs, localctx.ent ), {},
                              'Abstract entity definitions are deprecated; use aspect definitions instead' );
              this.docComment( localctx.annos ); 
        this.state = 892;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 889;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 894;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 907;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__4) {
            this.state = 895;
            this.match(languageParser.T__4);
            this.state = 905;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DESC - 61)) | (1 << (languageParser.ELEMENT - 61)) | (1 << (languageParser.ELSE - 61)) | (1 << (languageParser.END - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.ENUM - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.ESCAPE - 61)) | (1 << (languageParser.EXACT - 61)) | (1 << (languageParser.EXCEPT - 61)) | (1 << (languageParser.EXCLUDING - 61)) | (1 << (languageParser.EXTEND - 61)) | (1 << (languageParser.FIRST - 61)) | (1 << (languageParser.FULL - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)) | (1 << (languageParser.INNER - 93)) | (1 << (languageParser.INTERSECT - 93)) | (1 << (languageParser.INTO - 93)) | (1 << (languageParser.IS - 93)) | (1 << (languageParser.JOIN - 93)) | (1 << (languageParser.LAST - 93)) | (1 << (languageParser.LEADING - 93)) | (1 << (languageParser.LEFT - 93)) | (1 << (languageParser.LIKE - 93)) | (1 << (languageParser.LIMIT - 93)) | (1 << (languageParser.LOCALIZED - 93)) | (1 << (languageParser.MANY - 93)) | (1 << (languageParser.MASKED - 93)) | (1 << (languageParser.MINUS - 93)) | (1 << (languageParser.MINUTE - 93)) | (1 << (languageParser.MIXIN - 93)) | (1 << (languageParser.MONTH - 93)) | (1 << (languageParser.NAMESPACE - 93)) | (1 << (languageParser.NULLS - 93)) | (1 << (languageParser.OFFSET - 93)) | (1 << (languageParser.ONE - 93)) | (1 << (languageParser.OR - 93)) | (1 << (languageParser.ORDER - 93)) | (1 << (languageParser.OUTER - 93)) | (1 << (languageParser.PARAMETERS - 93)) | (1 << (languageParser.PROJECTION - 93)) | (1 << (languageParser.REDIRECTED - 93)) | (1 << (languageParser.RETURNS - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.RIGHT - 125)) | (1 << (languageParser.SECOND - 125)) | (1 << (languageParser.SERVICE - 125)) | (1 << (languageParser.THEN - 125)) | (1 << (languageParser.TRAILING - 125)) | (1 << (languageParser.TO - 125)) | (1 << (languageParser.TYPE - 125)) | (1 << (languageParser.UNION - 125)) | (1 << (languageParser.USING - 125)) | (1 << (languageParser.VIEW - 125)) | (1 << (languageParser.YEAR - 125)) | (1 << (languageParser.Identifier - 125)))) !== 0)) {
                this.state = 896;
                this.includeRef( localctx.art );
                this.state = 902;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__2) {
                    this.state = 897;
                    this.match(languageParser.T__2);
                     if (this.isStraightBefore('{')) break; 
                    this.state = 899;
                    this.includeRef( localctx.art );
                    this.state = 904;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

        }

        this.state = 909;
        this.match(languageParser.T__1);
         localctx.art.elements = Object.create(null); 

        this.state = 914;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.BOTH - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.DAY - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENT - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.HOUR - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEADING - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MASKED - 80)) | (1 << (languageParser.MINUS - 80)) | (1 << (languageParser.MINUTE - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.MIXIN - 112)) | (1 << (languageParser.MONTH - 112)) | (1 << (languageParser.NAMESPACE - 112)) | (1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.SECOND - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TRAILING - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.YEAR - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
            this.state = 911;
            this.elementDef( localctx.art );
            this.state = 916;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 917;
        this.match(languageParser.T__3);
        this.state = 927;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.ACTIONS) {
            this.state = 918;
            this.match(languageParser.ACTIONS);
            this.state = 919;
            this.match(languageParser.T__1);
            this.state = 923;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
                this.state = 920;
                this.actionFunctionDef( localctx.art );
                this.state = 925;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 926;
            this.match(languageParser.T__3);
        }

        this.state = 929;
        this.optionalSemi();
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeDefContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeDef;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

TypeDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeDefContext.prototype.constructor = TypeDefContext;

TypeDefContext.prototype.TYPE = function() {
    return this.getToken(languageParser.TYPE, 0);
};

TypeDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

TypeDefContext.prototype.typeSpecSemi = function() {
    return this.getTypedRuleContext(TypeSpecSemiContext,0);
};

TypeDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};




languageParser.TypeDefContext = TypeDefContext;

languageParser.prototype.typeDef = function(outer, loc, annos) {

    var localctx = new TypeDefContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 56, languageParser.RULE_typeDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 931;
        this.match(languageParser.TYPE);
        this.state = 932;
        this.simplePath( localctx.name, 'Type' );
         localctx.art =  this.addDef( localctx.outer, 'artifacts', 'type', localctx.name, localctx.annos, {}, localctx.loc )
              this.docComment( localctx.annos ); 
        this.state = 937;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 934;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 939;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 940;
        this.typeSpecSemi( localctx.art, localctx.annos );
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtendTypeContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendType;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ExtendTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendTypeContext.prototype.constructor = ExtendTypeContext;

ExtendTypeContext.prototype.TYPE = function() {
    return this.getToken(languageParser.TYPE, 0);
};

ExtendTypeContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ExtendTypeContext.prototype.extendWithOptElements = function() {
    return this.getTypedRuleContext(ExtendWithOptElementsContext,0);
};




languageParser.ExtendTypeContext = ExtendTypeContext;

languageParser.prototype.extendType = function(outer, loc, annos) {

    var localctx = new ExtendTypeContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 58, languageParser.RULE_extendType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 942;
        this.match(languageParser.TYPE);
        this.state = 943;
        this.simplePath( localctx.name, 'Extend' );
         localctx.art =  this.addItem( localctx.outer, 'extensions', 'extend', localctx.annos,
                                   { name: localctx.name, expectedKind: 'type' },
                                   localctx.loc )  
        this.state = 945;
        this.extendWithOptElements( localctx.art, localctx.annos );
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtendAspectContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendAspect;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ExtendAspectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendAspectContext.prototype.constructor = ExtendAspectContext;

ExtendAspectContext.prototype.ASPECT = function() {
    return this.getToken(languageParser.ASPECT, 0);
};

ExtendAspectContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ExtendAspectContext.prototype.extendWithOptElements = function() {
    return this.getTypedRuleContext(ExtendWithOptElementsContext,0);
};




languageParser.ExtendAspectContext = ExtendAspectContext;

languageParser.prototype.extendAspect = function(outer, loc, annos) {

    var localctx = new ExtendAspectContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 60, languageParser.RULE_extendAspect);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 947;
        this.match(languageParser.ASPECT);
        this.state = 948;
        this.simplePath( localctx.name, 'Extend' );
         localctx.art =  this.addItem( localctx.outer, 'extensions', 'extend', localctx.annos,
                                   { name: localctx.name, expectedKind: 'aspect' },
                                   localctx.loc )  
        this.state = 950;
        this.extendWithOptElements( localctx.art, localctx.annos );
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotationDefContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotationDef;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.annotation = null; // Token
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

AnnotationDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationDefContext.prototype.constructor = AnnotationDefContext;

AnnotationDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

AnnotationDefContext.prototype.typeSpecSemi = function() {
    return this.getTypedRuleContext(TypeSpecSemiContext,0);
};

AnnotationDefContext.prototype.ANNOTATION = function() {
    return this.getToken(languageParser.ANNOTATION, 0);
};

AnnotationDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};




languageParser.AnnotationDefContext = AnnotationDefContext;

languageParser.prototype.annotationDef = function(outer, loc, annos) {

    var localctx = new AnnotationDefContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 62, languageParser.RULE_annotationDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 952;
        localctx.annotation = this.match(languageParser.ANNOTATION);
        this.state = 953;
        this.simplePath( localctx.name, 'AnnoDef' );
         if (localctx.outer.kind !== 'source') { // this is a syntax restriction to avoid confusion
                this.error( 'syntax-no-inner-vocabulary', localctx.annotation, {},
                            'Annotation definitions can\'t be defined inside contexts or services' );
                localctx.art =  {} }
              else
                localctx.art =  this.addDef( localctx.outer, 'vocabularies', 'annotation', localctx.name, localctx.annos, {}, localctx.loc )
              this.docComment( localctx.annos ); 
        this.state = 958;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 955;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 960;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 961;
        this.typeSpecSemi( localctx.art, localctx.annos );
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtendArtifactContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendArtifact;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ExtendArtifactContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendArtifactContext.prototype.constructor = ExtendArtifactContext;

ExtendArtifactContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ExtendArtifactContext.prototype.extendWithOptElements = function() {
    return this.getTypedRuleContext(ExtendWithOptElementsContext,0);
};




languageParser.ExtendArtifactContext = ExtendArtifactContext;

languageParser.prototype.extendArtifact = function(outer, loc, annos) {

    var localctx = new ExtendArtifactContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 64, languageParser.RULE_extendArtifact);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 963;
        this.simplePath( localctx.name, 'Extend' );
         localctx.art =  this.addItem( localctx.outer, 'extensions', 'extend', localctx.annos,
                                   { name: localctx.name }, localctx.loc )  
        this.state = 965;
        this.extendWithOptElements( localctx.art, localctx.annos );
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtendWithOptElementsContext(parser, parent, invokingState, art, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendWithOptElements;
    this.art = null
    this.annos = null
    this.art = art || null;
    this.annos = annos || null;
    return this;
}

ExtendWithOptElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendWithOptElementsContext.prototype.constructor = ExtendWithOptElementsContext;

ExtendWithOptElementsContext.prototype.WITH = function() {
    return this.getToken(languageParser.WITH, 0);
};

ExtendWithOptElementsContext.prototype.includeRef = function() {
    return this.getTypedRuleContext(IncludeRefContext,0);
};

ExtendWithOptElementsContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ExtendWithOptElementsContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

ExtendWithOptElementsContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ExtendWithOptElementsContext.prototype.elementDefOrExtend = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementDefOrExtendContext);
    } else {
        return this.getTypedRuleContext(ElementDefOrExtendContext,i);
    }
};




languageParser.ExtendWithOptElementsContext = ExtendWithOptElementsContext;

languageParser.prototype.extendWithOptElements = function(art, annos) {

    var localctx = new ExtendWithOptElementsContext(this, this._ctx, this.state, art, annos);
    this.enterRule(localctx, 66, languageParser.RULE_extendWithOptElements);
    var _la = 0; // Token type
    try {
        this.state = 1009;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.WITH:
            this.enterOuterAlt(localctx, 1);
            this.state = 967;
            this.match(languageParser.WITH);
             this.noSemicolonHere(); this.docComment( localctx.annos ); 
            this.state = 972;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7) {
                this.state = 969;
                this.annotationAssignment_ll1( localctx.annos );
                this.state = 974;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 988;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.COMPOSITION:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DESC:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.ESCAPE:
            case languageParser.EXACT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FIRST:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.LAST:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MIXIN:
            case languageParser.MONTH:
            case languageParser.NAMESPACE:
            case languageParser.NULLS:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OUTER:
            case languageParser.PARAMETERS:
            case languageParser.PROJECTION:
            case languageParser.REDIRECTED:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.SECOND:
            case languageParser.SERVICE:
            case languageParser.THEN:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.YEAR:
            case languageParser.Identifier:
                this.state = 975;
                this.includeRef( localctx.art );
                this.state = 976;
                this.requiredSemi();
                break;
            case languageParser.T__1:
                this.state = 978;
                this.match(languageParser.T__1);
                this.state = 982;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.BOTH - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.DAY - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENT - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.HOUR - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEADING - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MASKED - 80)) | (1 << (languageParser.MINUS - 80)) | (1 << (languageParser.MINUTE - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.MIXIN - 112)) | (1 << (languageParser.MONTH - 112)) | (1 << (languageParser.NAMESPACE - 112)) | (1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.SECOND - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TRAILING - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.YEAR - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
                    this.state = 979;
                    this.elementDefOrExtend( localctx.art );
                    this.state = 984;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 985;
                this.match(languageParser.T__3);
                this.state = 986;
                this.optionalSemi();
                break;
            case languageParser.T__0:
            case languageParser.T__3:
                this.state = 987;
                this.requiredSemi();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case languageParser.T__0:
        case languageParser.T__1:
        case languageParser.T__3:
        case languageParser.T__7:
            this.enterOuterAlt(localctx, 2);
             this.docComment( localctx.annos ); 
            this.state = 994;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7) {
                this.state = 991;
                this.annotationAssignment_ll1( localctx.annos );
                this.state = 996;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1007;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.T__1:
                this.state = 997;
                this.match(languageParser.T__1);
                this.state = 1001;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.BOTH - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.DAY - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENT - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.HOUR - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEADING - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MASKED - 80)) | (1 << (languageParser.MINUS - 80)) | (1 << (languageParser.MINUTE - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.MIXIN - 112)) | (1 << (languageParser.MONTH - 112)) | (1 << (languageParser.NAMESPACE - 112)) | (1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.SECOND - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TRAILING - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.YEAR - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
                    this.state = 998;
                    this.elementDefOrExtend( localctx.art );
                    this.state = 1003;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1004;
                this.match(languageParser.T__3);
                this.state = 1005;
                this.optionalSemi();
                break;
            case languageParser.T__0:
            case languageParser.T__3:
                this.state = 1006;
                this.requiredSemi();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotateArtifactContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotateArtifact;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

AnnotateArtifactContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotateArtifactContext.prototype.constructor = AnnotateArtifactContext;

AnnotateArtifactContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

AnnotateArtifactContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

AnnotateArtifactContext.prototype.ACTIONS = function() {
    return this.getToken(languageParser.ACTIONS, 0);
};

AnnotateArtifactContext.prototype.annotateParam = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotateParamContext);
    } else {
        return this.getTypedRuleContext(AnnotateParamContext,i);
    }
};

AnnotateArtifactContext.prototype.RETURNS = function() {
    return this.getToken(languageParser.RETURNS, 0);
};

AnnotateArtifactContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

AnnotateArtifactContext.prototype.WITH = function() {
    return this.getToken(languageParser.WITH, 0);
};

AnnotateArtifactContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

AnnotateArtifactContext.prototype.annotateElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotateElementContext);
    } else {
        return this.getTypedRuleContext(AnnotateElementContext,i);
    }
};

AnnotateArtifactContext.prototype.annotateAction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotateActionContext);
    } else {
        return this.getTypedRuleContext(AnnotateActionContext,i);
    }
};




languageParser.AnnotateArtifactContext = AnnotateArtifactContext;

languageParser.prototype.annotateArtifact = function(outer, loc, annos) {

    var localctx = new AnnotateArtifactContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 68, languageParser.RULE_annotateArtifact);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1011;
        this.simplePath( localctx.name, 'Annotate' );
         localctx.art =  this.addItem( localctx.outer, 'extensions', 'annotate', localctx.annos, { name: localctx.name }, localctx.loc ) 
        this.state = 1015;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.WITH) {
            this.state = 1013;
            this.match(languageParser.WITH);
             this.noSemicolonHere(); 
        }

         this.docComment( localctx.annos ); 
        this.state = 1021;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1018;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1023;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1089;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.state = 1024;
            this.match(languageParser.T__1);
            this.state = 1028;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DESC - 61)) | (1 << (languageParser.ELEMENT - 61)) | (1 << (languageParser.ELSE - 61)) | (1 << (languageParser.END - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.ENUM - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.ESCAPE - 61)) | (1 << (languageParser.EXACT - 61)) | (1 << (languageParser.EXCEPT - 61)) | (1 << (languageParser.EXCLUDING - 61)) | (1 << (languageParser.EXTEND - 61)) | (1 << (languageParser.FIRST - 61)) | (1 << (languageParser.FULL - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)) | (1 << (languageParser.INNER - 93)) | (1 << (languageParser.INTERSECT - 93)) | (1 << (languageParser.INTO - 93)) | (1 << (languageParser.IS - 93)) | (1 << (languageParser.JOIN - 93)) | (1 << (languageParser.LAST - 93)) | (1 << (languageParser.LEADING - 93)) | (1 << (languageParser.LEFT - 93)) | (1 << (languageParser.LIKE - 93)) | (1 << (languageParser.LIMIT - 93)) | (1 << (languageParser.LOCALIZED - 93)) | (1 << (languageParser.MANY - 93)) | (1 << (languageParser.MASKED - 93)) | (1 << (languageParser.MINUS - 93)) | (1 << (languageParser.MINUTE - 93)) | (1 << (languageParser.MIXIN - 93)) | (1 << (languageParser.MONTH - 93)) | (1 << (languageParser.NAMESPACE - 93)) | (1 << (languageParser.NULLS - 93)) | (1 << (languageParser.OFFSET - 93)) | (1 << (languageParser.ONE - 93)) | (1 << (languageParser.OR - 93)) | (1 << (languageParser.ORDER - 93)) | (1 << (languageParser.OUTER - 93)) | (1 << (languageParser.PARAMETERS - 93)) | (1 << (languageParser.PROJECTION - 93)) | (1 << (languageParser.REDIRECTED - 93)) | (1 << (languageParser.RETURNS - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.RIGHT - 125)) | (1 << (languageParser.SECOND - 125)) | (1 << (languageParser.SERVICE - 125)) | (1 << (languageParser.THEN - 125)) | (1 << (languageParser.TRAILING - 125)) | (1 << (languageParser.TO - 125)) | (1 << (languageParser.TYPE - 125)) | (1 << (languageParser.UNION - 125)) | (1 << (languageParser.USING - 125)) | (1 << (languageParser.VIEW - 125)) | (1 << (languageParser.YEAR - 125)) | (1 << (languageParser.Identifier - 125)))) !== 0)) {
                this.state = 1025;
                this.annotateElement( localctx.art );
                this.state = 1030;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1031;
            this.match(languageParser.T__3);
            this.state = 1041;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.ACTIONS) {
                this.state = 1032;
                this.match(languageParser.ACTIONS);
                this.state = 1033;
                this.match(languageParser.T__1);
                this.state = 1037;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DESC - 61)) | (1 << (languageParser.ELEMENT - 61)) | (1 << (languageParser.ELSE - 61)) | (1 << (languageParser.END - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.ENUM - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.ESCAPE - 61)) | (1 << (languageParser.EXACT - 61)) | (1 << (languageParser.EXCEPT - 61)) | (1 << (languageParser.EXCLUDING - 61)) | (1 << (languageParser.EXTEND - 61)) | (1 << (languageParser.FIRST - 61)) | (1 << (languageParser.FULL - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)) | (1 << (languageParser.INNER - 93)) | (1 << (languageParser.INTERSECT - 93)) | (1 << (languageParser.INTO - 93)) | (1 << (languageParser.IS - 93)) | (1 << (languageParser.JOIN - 93)) | (1 << (languageParser.LAST - 93)) | (1 << (languageParser.LEADING - 93)) | (1 << (languageParser.LEFT - 93)) | (1 << (languageParser.LIKE - 93)) | (1 << (languageParser.LIMIT - 93)) | (1 << (languageParser.LOCALIZED - 93)) | (1 << (languageParser.MANY - 93)) | (1 << (languageParser.MASKED - 93)) | (1 << (languageParser.MINUS - 93)) | (1 << (languageParser.MINUTE - 93)) | (1 << (languageParser.MIXIN - 93)) | (1 << (languageParser.MONTH - 93)) | (1 << (languageParser.NAMESPACE - 93)) | (1 << (languageParser.NULLS - 93)) | (1 << (languageParser.OFFSET - 93)) | (1 << (languageParser.ONE - 93)) | (1 << (languageParser.OR - 93)) | (1 << (languageParser.ORDER - 93)) | (1 << (languageParser.OUTER - 93)) | (1 << (languageParser.PARAMETERS - 93)) | (1 << (languageParser.PROJECTION - 93)) | (1 << (languageParser.REDIRECTED - 93)) | (1 << (languageParser.RETURNS - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.RIGHT - 125)) | (1 << (languageParser.SECOND - 125)) | (1 << (languageParser.SERVICE - 125)) | (1 << (languageParser.THEN - 125)) | (1 << (languageParser.TRAILING - 125)) | (1 << (languageParser.TO - 125)) | (1 << (languageParser.TYPE - 125)) | (1 << (languageParser.UNION - 125)) | (1 << (languageParser.USING - 125)) | (1 << (languageParser.VIEW - 125)) | (1 << (languageParser.YEAR - 125)) | (1 << (languageParser.Identifier - 125)))) !== 0)) {
                    this.state = 1034;
                    this.annotateAction( localctx.art );
                    this.state = 1039;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1040;
                this.match(languageParser.T__3);
            }

            this.state = 1043;
            this.optionalSemi();
            break;
        case languageParser.ACTIONS:
            this.state = 1044;
            this.match(languageParser.ACTIONS);
            this.state = 1045;
            this.match(languageParser.T__1);
            this.state = 1049;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DESC - 61)) | (1 << (languageParser.ELEMENT - 61)) | (1 << (languageParser.ELSE - 61)) | (1 << (languageParser.END - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.ENUM - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.ESCAPE - 61)) | (1 << (languageParser.EXACT - 61)) | (1 << (languageParser.EXCEPT - 61)) | (1 << (languageParser.EXCLUDING - 61)) | (1 << (languageParser.EXTEND - 61)) | (1 << (languageParser.FIRST - 61)) | (1 << (languageParser.FULL - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)) | (1 << (languageParser.INNER - 93)) | (1 << (languageParser.INTERSECT - 93)) | (1 << (languageParser.INTO - 93)) | (1 << (languageParser.IS - 93)) | (1 << (languageParser.JOIN - 93)) | (1 << (languageParser.LAST - 93)) | (1 << (languageParser.LEADING - 93)) | (1 << (languageParser.LEFT - 93)) | (1 << (languageParser.LIKE - 93)) | (1 << (languageParser.LIMIT - 93)) | (1 << (languageParser.LOCALIZED - 93)) | (1 << (languageParser.MANY - 93)) | (1 << (languageParser.MASKED - 93)) | (1 << (languageParser.MINUS - 93)) | (1 << (languageParser.MINUTE - 93)) | (1 << (languageParser.MIXIN - 93)) | (1 << (languageParser.MONTH - 93)) | (1 << (languageParser.NAMESPACE - 93)) | (1 << (languageParser.NULLS - 93)) | (1 << (languageParser.OFFSET - 93)) | (1 << (languageParser.ONE - 93)) | (1 << (languageParser.OR - 93)) | (1 << (languageParser.ORDER - 93)) | (1 << (languageParser.OUTER - 93)) | (1 << (languageParser.PARAMETERS - 93)) | (1 << (languageParser.PROJECTION - 93)) | (1 << (languageParser.REDIRECTED - 93)) | (1 << (languageParser.RETURNS - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.RIGHT - 125)) | (1 << (languageParser.SECOND - 125)) | (1 << (languageParser.SERVICE - 125)) | (1 << (languageParser.THEN - 125)) | (1 << (languageParser.TRAILING - 125)) | (1 << (languageParser.TO - 125)) | (1 << (languageParser.TYPE - 125)) | (1 << (languageParser.UNION - 125)) | (1 << (languageParser.USING - 125)) | (1 << (languageParser.VIEW - 125)) | (1 << (languageParser.YEAR - 125)) | (1 << (languageParser.Identifier - 125)))) !== 0)) {
                this.state = 1046;
                this.annotateAction( localctx.art );
                this.state = 1051;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1052;
            this.match(languageParser.T__3);
            this.state = 1053;
            this.optionalSemi();
            break;
        case languageParser.T__5:
            this.state = 1054;
            this.match(languageParser.T__5);
            this.state = 1055;
            this.annotateParam( localctx.art );
            this.state = 1061;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 1056;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore(')')) break; 
                this.state = 1058;
                this.annotateParam( localctx.art );
                this.state = 1063;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1064;
            this.match(languageParser.T__6);
            this.state = 1076;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.RETURNS:
                this.state = 1065;
                this.match(languageParser.RETURNS);
                this.state = 1066;
                this.match(languageParser.T__1);
                this.state = 1070;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DESC - 61)) | (1 << (languageParser.ELEMENT - 61)) | (1 << (languageParser.ELSE - 61)) | (1 << (languageParser.END - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.ENUM - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.ESCAPE - 61)) | (1 << (languageParser.EXACT - 61)) | (1 << (languageParser.EXCEPT - 61)) | (1 << (languageParser.EXCLUDING - 61)) | (1 << (languageParser.EXTEND - 61)) | (1 << (languageParser.FIRST - 61)) | (1 << (languageParser.FULL - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)) | (1 << (languageParser.INNER - 93)) | (1 << (languageParser.INTERSECT - 93)) | (1 << (languageParser.INTO - 93)) | (1 << (languageParser.IS - 93)) | (1 << (languageParser.JOIN - 93)) | (1 << (languageParser.LAST - 93)) | (1 << (languageParser.LEADING - 93)) | (1 << (languageParser.LEFT - 93)) | (1 << (languageParser.LIKE - 93)) | (1 << (languageParser.LIMIT - 93)) | (1 << (languageParser.LOCALIZED - 93)) | (1 << (languageParser.MANY - 93)) | (1 << (languageParser.MASKED - 93)) | (1 << (languageParser.MINUS - 93)) | (1 << (languageParser.MINUTE - 93)) | (1 << (languageParser.MIXIN - 93)) | (1 << (languageParser.MONTH - 93)) | (1 << (languageParser.NAMESPACE - 93)) | (1 << (languageParser.NULLS - 93)) | (1 << (languageParser.OFFSET - 93)) | (1 << (languageParser.ONE - 93)) | (1 << (languageParser.OR - 93)) | (1 << (languageParser.ORDER - 93)) | (1 << (languageParser.OUTER - 93)) | (1 << (languageParser.PARAMETERS - 93)) | (1 << (languageParser.PROJECTION - 93)) | (1 << (languageParser.REDIRECTED - 93)) | (1 << (languageParser.RETURNS - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.RIGHT - 125)) | (1 << (languageParser.SECOND - 125)) | (1 << (languageParser.SERVICE - 125)) | (1 << (languageParser.THEN - 125)) | (1 << (languageParser.TRAILING - 125)) | (1 << (languageParser.TO - 125)) | (1 << (languageParser.TYPE - 125)) | (1 << (languageParser.UNION - 125)) | (1 << (languageParser.USING - 125)) | (1 << (languageParser.VIEW - 125)) | (1 << (languageParser.YEAR - 125)) | (1 << (languageParser.Identifier - 125)))) !== 0)) {
                    this.state = 1067;
                    this.annotateElement( localctx.art );
                    this.state = 1072;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1073;
                this.match(languageParser.T__3);
                this.state = 1074;
                this.optionalSemi();
                break;
            case languageParser.T__0:
            case languageParser.T__3:
                this.state = 1075;
                this.requiredSemi();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case languageParser.RETURNS:
            this.state = 1078;
            this.match(languageParser.RETURNS);
            this.state = 1079;
            this.match(languageParser.T__1);
            this.state = 1083;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DESC - 61)) | (1 << (languageParser.ELEMENT - 61)) | (1 << (languageParser.ELSE - 61)) | (1 << (languageParser.END - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.ENUM - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.ESCAPE - 61)) | (1 << (languageParser.EXACT - 61)) | (1 << (languageParser.EXCEPT - 61)) | (1 << (languageParser.EXCLUDING - 61)) | (1 << (languageParser.EXTEND - 61)) | (1 << (languageParser.FIRST - 61)) | (1 << (languageParser.FULL - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)) | (1 << (languageParser.INNER - 93)) | (1 << (languageParser.INTERSECT - 93)) | (1 << (languageParser.INTO - 93)) | (1 << (languageParser.IS - 93)) | (1 << (languageParser.JOIN - 93)) | (1 << (languageParser.LAST - 93)) | (1 << (languageParser.LEADING - 93)) | (1 << (languageParser.LEFT - 93)) | (1 << (languageParser.LIKE - 93)) | (1 << (languageParser.LIMIT - 93)) | (1 << (languageParser.LOCALIZED - 93)) | (1 << (languageParser.MANY - 93)) | (1 << (languageParser.MASKED - 93)) | (1 << (languageParser.MINUS - 93)) | (1 << (languageParser.MINUTE - 93)) | (1 << (languageParser.MIXIN - 93)) | (1 << (languageParser.MONTH - 93)) | (1 << (languageParser.NAMESPACE - 93)) | (1 << (languageParser.NULLS - 93)) | (1 << (languageParser.OFFSET - 93)) | (1 << (languageParser.ONE - 93)) | (1 << (languageParser.OR - 93)) | (1 << (languageParser.ORDER - 93)) | (1 << (languageParser.OUTER - 93)) | (1 << (languageParser.PARAMETERS - 93)) | (1 << (languageParser.PROJECTION - 93)) | (1 << (languageParser.REDIRECTED - 93)) | (1 << (languageParser.RETURNS - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.RIGHT - 125)) | (1 << (languageParser.SECOND - 125)) | (1 << (languageParser.SERVICE - 125)) | (1 << (languageParser.THEN - 125)) | (1 << (languageParser.TRAILING - 125)) | (1 << (languageParser.TO - 125)) | (1 << (languageParser.TYPE - 125)) | (1 << (languageParser.UNION - 125)) | (1 << (languageParser.USING - 125)) | (1 << (languageParser.VIEW - 125)) | (1 << (languageParser.YEAR - 125)) | (1 << (languageParser.Identifier - 125)))) !== 0)) {
                this.state = 1080;
                this.annotateElement( localctx.art );
                this.state = 1085;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1086;
            this.match(languageParser.T__3);
            this.state = 1087;
            this.optionalSemi();
            break;
        case languageParser.T__0:
        case languageParser.T__3:
            this.state = 1088;
            this.requiredSemi();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotateElementContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotateElement;
    this.outer = null
    this.art = null
    this.annos = []
    this.name = null; // IdentContext
    this.outer = outer || null;
    return this;
}

AnnotateElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotateElementContext.prototype.constructor = AnnotateElementContext;

AnnotateElementContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

AnnotateElementContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

AnnotateElementContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

AnnotateElementContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

AnnotateElementContext.prototype.annotateElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotateElementContext);
    } else {
        return this.getTypedRuleContext(AnnotateElementContext,i);
    }
};




languageParser.AnnotateElementContext = AnnotateElementContext;

languageParser.prototype.annotateElement = function(outer) {

    var localctx = new AnnotateElementContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 70, languageParser.RULE_annotateElement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.docComment( localctx.annos ); 
        this.state = 1095;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1092;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1097;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1098;
        localctx.name = this.ident('Element');
         localctx.art =  this.addDef( localctx.outer, 'elements', 'annotate', localctx.name.id, localctx.annos )
              this.docComment( localctx.annos ); 
        this.state = 1103;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1100;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1105;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1116;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.state = 1106;
            this.match(languageParser.T__1);
            this.state = 1110;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DESC - 61)) | (1 << (languageParser.ELEMENT - 61)) | (1 << (languageParser.ELSE - 61)) | (1 << (languageParser.END - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.ENUM - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.ESCAPE - 61)) | (1 << (languageParser.EXACT - 61)) | (1 << (languageParser.EXCEPT - 61)) | (1 << (languageParser.EXCLUDING - 61)) | (1 << (languageParser.EXTEND - 61)) | (1 << (languageParser.FIRST - 61)) | (1 << (languageParser.FULL - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)) | (1 << (languageParser.INNER - 93)) | (1 << (languageParser.INTERSECT - 93)) | (1 << (languageParser.INTO - 93)) | (1 << (languageParser.IS - 93)) | (1 << (languageParser.JOIN - 93)) | (1 << (languageParser.LAST - 93)) | (1 << (languageParser.LEADING - 93)) | (1 << (languageParser.LEFT - 93)) | (1 << (languageParser.LIKE - 93)) | (1 << (languageParser.LIMIT - 93)) | (1 << (languageParser.LOCALIZED - 93)) | (1 << (languageParser.MANY - 93)) | (1 << (languageParser.MASKED - 93)) | (1 << (languageParser.MINUS - 93)) | (1 << (languageParser.MINUTE - 93)) | (1 << (languageParser.MIXIN - 93)) | (1 << (languageParser.MONTH - 93)) | (1 << (languageParser.NAMESPACE - 93)) | (1 << (languageParser.NULLS - 93)) | (1 << (languageParser.OFFSET - 93)) | (1 << (languageParser.ONE - 93)) | (1 << (languageParser.OR - 93)) | (1 << (languageParser.ORDER - 93)) | (1 << (languageParser.OUTER - 93)) | (1 << (languageParser.PARAMETERS - 93)) | (1 << (languageParser.PROJECTION - 93)) | (1 << (languageParser.REDIRECTED - 93)) | (1 << (languageParser.RETURNS - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.RIGHT - 125)) | (1 << (languageParser.SECOND - 125)) | (1 << (languageParser.SERVICE - 125)) | (1 << (languageParser.THEN - 125)) | (1 << (languageParser.TRAILING - 125)) | (1 << (languageParser.TO - 125)) | (1 << (languageParser.TYPE - 125)) | (1 << (languageParser.UNION - 125)) | (1 << (languageParser.USING - 125)) | (1 << (languageParser.VIEW - 125)) | (1 << (languageParser.YEAR - 125)) | (1 << (languageParser.Identifier - 125)))) !== 0)) {
                this.state = 1107;
                this.annotateElement( localctx.art );
                this.state = 1112;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1113;
            this.match(languageParser.T__3);
            this.state = 1114;
            this.optionalSemi();
            break;
        case languageParser.T__0:
        case languageParser.T__3:
            this.state = 1115;
            this.requiredSemi();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotateActionContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotateAction;
    this.outer = null
    this.art = null
    this.annos = []
    this.name = null; // IdentContext
    this.outer = outer || null;
    return this;
}

AnnotateActionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotateActionContext.prototype.constructor = AnnotateActionContext;

AnnotateActionContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

AnnotateActionContext.prototype.RETURNS = function() {
    return this.getToken(languageParser.RETURNS, 0);
};

AnnotateActionContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

AnnotateActionContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

AnnotateActionContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

AnnotateActionContext.prototype.annotateParam = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotateParamContext);
    } else {
        return this.getTypedRuleContext(AnnotateParamContext,i);
    }
};

AnnotateActionContext.prototype.annotateElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotateElementContext);
    } else {
        return this.getTypedRuleContext(AnnotateElementContext,i);
    }
};




languageParser.AnnotateActionContext = AnnotateActionContext;

languageParser.prototype.annotateAction = function(outer) {

    var localctx = new AnnotateActionContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 72, languageParser.RULE_annotateAction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.docComment( localctx.annos ); 
        this.state = 1122;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1119;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1124;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1125;
        localctx.name = this.ident('BoundAction');
         localctx.art =  this.addDef( localctx.outer, 'actions', 'annotate', localctx.name.id, localctx.annos )
              this.docComment( localctx.annos ); 
        this.state = 1130;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1127;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1132;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1145;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__5) {
            this.state = 1133;
            this.match(languageParser.T__5);
            this.state = 1134;
            this.annotateParam( localctx.art );
            this.state = 1140;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 1135;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore(')')) break; 
                this.state = 1137;
                this.annotateParam( localctx.art );
                this.state = 1142;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1143;
            this.match(languageParser.T__6);
        }

        this.state = 1158;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.RETURNS:
            this.state = 1147;
            this.match(languageParser.RETURNS);
            this.state = 1148;
            this.match(languageParser.T__1);
            this.state = 1152;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DESC - 61)) | (1 << (languageParser.ELEMENT - 61)) | (1 << (languageParser.ELSE - 61)) | (1 << (languageParser.END - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.ENUM - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.ESCAPE - 61)) | (1 << (languageParser.EXACT - 61)) | (1 << (languageParser.EXCEPT - 61)) | (1 << (languageParser.EXCLUDING - 61)) | (1 << (languageParser.EXTEND - 61)) | (1 << (languageParser.FIRST - 61)) | (1 << (languageParser.FULL - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)) | (1 << (languageParser.INNER - 93)) | (1 << (languageParser.INTERSECT - 93)) | (1 << (languageParser.INTO - 93)) | (1 << (languageParser.IS - 93)) | (1 << (languageParser.JOIN - 93)) | (1 << (languageParser.LAST - 93)) | (1 << (languageParser.LEADING - 93)) | (1 << (languageParser.LEFT - 93)) | (1 << (languageParser.LIKE - 93)) | (1 << (languageParser.LIMIT - 93)) | (1 << (languageParser.LOCALIZED - 93)) | (1 << (languageParser.MANY - 93)) | (1 << (languageParser.MASKED - 93)) | (1 << (languageParser.MINUS - 93)) | (1 << (languageParser.MINUTE - 93)) | (1 << (languageParser.MIXIN - 93)) | (1 << (languageParser.MONTH - 93)) | (1 << (languageParser.NAMESPACE - 93)) | (1 << (languageParser.NULLS - 93)) | (1 << (languageParser.OFFSET - 93)) | (1 << (languageParser.ONE - 93)) | (1 << (languageParser.OR - 93)) | (1 << (languageParser.ORDER - 93)) | (1 << (languageParser.OUTER - 93)) | (1 << (languageParser.PARAMETERS - 93)) | (1 << (languageParser.PROJECTION - 93)) | (1 << (languageParser.REDIRECTED - 93)) | (1 << (languageParser.RETURNS - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.RIGHT - 125)) | (1 << (languageParser.SECOND - 125)) | (1 << (languageParser.SERVICE - 125)) | (1 << (languageParser.THEN - 125)) | (1 << (languageParser.TRAILING - 125)) | (1 << (languageParser.TO - 125)) | (1 << (languageParser.TYPE - 125)) | (1 << (languageParser.UNION - 125)) | (1 << (languageParser.USING - 125)) | (1 << (languageParser.VIEW - 125)) | (1 << (languageParser.YEAR - 125)) | (1 << (languageParser.Identifier - 125)))) !== 0)) {
                this.state = 1149;
                this.annotateElement( localctx.art );
                this.state = 1154;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1155;
            this.match(languageParser.T__3);
            this.state = 1156;
            this.optionalSemi();
            break;
        case languageParser.T__0:
        case languageParser.T__3:
            this.state = 1157;
            this.requiredSemi();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotateParamContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotateParam;
    this.outer = null
    this.art = null
    this.annos = []
    this.param = null; // IdentContext
    this.outer = outer || null;
    return this;
}

AnnotateParamContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotateParamContext.prototype.constructor = AnnotateParamContext;

AnnotateParamContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

AnnotateParamContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};




languageParser.AnnotateParamContext = AnnotateParamContext;

languageParser.prototype.annotateParam = function(outer) {

    var localctx = new AnnotateParamContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 74, languageParser.RULE_annotateParam);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.docComment( localctx.annos ); 
        this.state = 1164;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1161;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1166;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1167;
        localctx.param = this.ident('Param');
         localctx.art =  this.addDef( localctx.outer, 'params', 'annotate', localctx.param.id, localctx.annos )
              this.docComment( localctx.annos ); 
        this.state = 1172;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1169;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1174;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumSymbolDefContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_enumSymbolDef;
    this.outer = null
    this.art = null
    this.annos = []
    this.name = null; // IdentContext
    this.val = null; // LiteralValueContext
    this.plus = null; // Token
    this.min = null; // Token
    this.num = null; // Token
    this.outer = outer || null;
    return this;
}

EnumSymbolDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumSymbolDefContext.prototype.constructor = EnumSymbolDefContext;

EnumSymbolDefContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

EnumSymbolDefContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

EnumSymbolDefContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

EnumSymbolDefContext.prototype.literalValue = function() {
    return this.getTypedRuleContext(LiteralValueContext,0);
};

EnumSymbolDefContext.prototype.Number = function() {
    return this.getToken(languageParser.Number, 0);
};




languageParser.EnumSymbolDefContext = EnumSymbolDefContext;

languageParser.prototype.enumSymbolDef = function(outer) {

    var localctx = new EnumSymbolDefContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 76, languageParser.RULE_enumSymbolDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.docComment( localctx.annos ); 
        this.state = 1179;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1176;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1181;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1182;
        localctx.name = this.ident('Enum');
         localctx.art =  this.addDef( localctx.outer, 'enum', 'enum', localctx.name.id, localctx.annos )
              this.docComment( localctx.annos ); 
        this.state = 1187;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1184;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1189;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1209;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__8) {
            this.state = 1190;
            this.match(languageParser.T__8);
             this.excludeExpected( ['Boolean', 'QuotedLiteral', "'#'", 'NULL'] ); 
            this.state = 1201;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.T__26:
            case languageParser.String:
            case languageParser.QuotedLiteral:
            case languageParser.Boolean:
            case languageParser.NULL:
            case languageParser.Number:
                this.state = 1192;
                localctx.val = this.literalValue();
                 localctx.art.value = localctx.val.val; this.docComment( localctx.annos ); 
                break;
            case languageParser.T__9:
            case languageParser.T__10:
                this.state = 1197;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.T__9:
                    this.state = 1195;
                    localctx.plus = this.match(languageParser.T__9);
                    break;
                case languageParser.T__10:
                    this.state = 1196;
                    localctx.min = this.match(languageParser.T__10);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 1199;
                localctx.num = this.match(languageParser.Number);
                 localctx.art.value = this.numberLiteral( localctx.num, localctx.plus||localctx.min ); 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1206;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7) {
                this.state = 1203;
                this.annotationAssignment_ll1( localctx.annos );
                this.state = 1208;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1211;
        this.requiredSemi();
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementDefOrExtendContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_elementDefOrExtend;
    this.outer = null
    this.annos = []
    this.art = null; // ElementDefInnerContext
    this.outer = outer || null;
    return this;
}

ElementDefOrExtendContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementDefOrExtendContext.prototype.constructor = ElementDefOrExtendContext;

ElementDefOrExtendContext.prototype.EXTEND = function() {
    return this.getToken(languageParser.EXTEND, 0);
};

ElementDefOrExtendContext.prototype.extendElement = function() {
    return this.getTypedRuleContext(ExtendElementContext,0);
};

ElementDefOrExtendContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ElementDefOrExtendContext.prototype.elementDefInner = function() {
    return this.getTypedRuleContext(ElementDefInnerContext,0);
};




languageParser.ElementDefOrExtendContext = ElementDefOrExtendContext;

languageParser.prototype.elementDefOrExtend = function(outer) {

    var localctx = new ElementDefOrExtendContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 78, languageParser.RULE_elementDefOrExtend);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.docComment( localctx.annos ); 
        this.state = 1217;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1214;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1219;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1223;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1220;
            this.match(languageParser.EXTEND);
            this.state = 1221;
            this.extendElement( localctx.outer, this.startLocation(), localctx.annos );
            break;

        case 2:
            this.state = 1222;
            localctx.art = this.elementDefInner( localctx.outer, this.startLocation(), localctx.annos, true );
            break;

        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ if (localctx.art) this.attachLocation(localctx.art.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementDefContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_elementDef;
    this.outer = null
    this.annos = []
    this.art = null; // ElementDefInnerContext
    this.outer = outer || null;
    return this;
}

ElementDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementDefContext.prototype.constructor = ElementDefContext;

ElementDefContext.prototype.elementDefInner = function() {
    return this.getTypedRuleContext(ElementDefInnerContext,0);
};

ElementDefContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};




languageParser.ElementDefContext = ElementDefContext;

languageParser.prototype.elementDef = function(outer) {

    var localctx = new ElementDefContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 80, languageParser.RULE_elementDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.docComment( localctx.annos ); 
        this.state = 1229;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1226;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1231;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1232;
        localctx.art = this.elementDefInner( localctx.outer, this.startLocation(), localctx.annos, false );
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MixinElementDefContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_mixinElementDef;
    this.outer = null
    this.art = null
    this.name = null; // IdentContext
    this.as = null; // Token
    this.outer = outer || null;
    return this;
}

MixinElementDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MixinElementDefContext.prototype.constructor = MixinElementDefContext;

MixinElementDefContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

MixinElementDefContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

MixinElementDefContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

MixinElementDefContext.prototype.typeAssociationBase = function() {
    return this.getTypedRuleContext(TypeAssociationBaseContext,0);
};

MixinElementDefContext.prototype.typeRefOptArgs = function() {
    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
};

MixinElementDefContext.prototype.typeToMany = function() {
    return this.getTypedRuleContext(TypeToManyContext,0);
};

MixinElementDefContext.prototype.typeToOne = function() {
    return this.getTypedRuleContext(TypeToOneContext,0);
};

MixinElementDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

MixinElementDefContext.prototype.typeAssociationCont = function() {
    return this.getTypedRuleContext(TypeAssociationContContext,0);
};




languageParser.MixinElementDefContext = MixinElementDefContext;

languageParser.prototype.mixinElementDef = function(outer) {

    var localctx = new MixinElementDefContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 82, languageParser.RULE_mixinElementDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1234;
        localctx.name = this.ident('Mixin');
         localctx.art =  this.addDef( localctx.outer, 'mixin', 'mixin', localctx.name.id ) 
        this.state = 1259;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__4:
            this.state = 1236;
            this.match(languageParser.T__4);
            this.state = 1253;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1237;
                this.typeAssociationBase( localctx.art, false );
                this.state = 1241;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1238;
                    this.typeToMany( localctx.art );
                    break;

                case 2:
                    this.state = 1239;
                    this.typeToOne( localctx.art );
                    break;

                case 3:
                    this.state = 1240;
                    this.simplePath( localctx.art.target, 'artref' );
                    break;

                }
                this.state = 1244;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.T__1 || _la===languageParser.ON) {
                    this.state = 1243;
                    this.typeAssociationCont( localctx.art );
                }

                break;

            case 2:
                this.state = 1246;
                this.typeRefOptArgs( localctx.art );
                this.state = 1251;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.T__8) {
                    this.state = 1247;
                    localctx.as = this.match(languageParser.T__8);
                    this.state = 1248;
                    this.expression();
                     this.notSupportedYet( 'Calculated fields are not supported yet', localctx.as ); 
                }

                break;

            }
            break;
        case languageParser.T__8:
            this.state = 1255;
            localctx.as = this.match(languageParser.T__8);
            this.state = 1256;
            this.expression();
             this.notSupportedYet( 'Calculated fields are not supported yet', localctx.as ); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1261;
        this.requiredSemi();
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 2 */ this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MisplacedAnnotationsContext(parser, parent, invokingState, annos, messageId) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_misplacedAnnotations;
    this.annos = null
    this.messageId = null
    this.annos = annos || null;
    this.messageId = messageId || null;
    return this;
}

MisplacedAnnotationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MisplacedAnnotationsContext.prototype.constructor = MisplacedAnnotationsContext;

MisplacedAnnotationsContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};




languageParser.MisplacedAnnotationsContext = MisplacedAnnotationsContext;

languageParser.prototype.misplacedAnnotations = function(annos, messageId) {

    var localctx = new MisplacedAnnotationsContext(this, this._ctx, this.state, annos, messageId);
    this.enterRule(localctx, 84, languageParser.RULE_misplacedAnnotations);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1264; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1263;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1266; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===languageParser.T__7);
         if (localctx.messageId)           // issue specified in central registry
                this.message( messageId, this.tokenLocation( localctx.start, this.getCurrentToken() ) );
            
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementDefInnerContext(parser, parent, invokingState, outer, loc, annos, allowEq) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_elementDefInner;
    this.outer = null
    this.loc = null
    this.annos = null
    this.allowEq = null
    this.art = null
    this.virtual = null; // Token
    this.key = null; // Token
    this.masked = null; // Token
    this.name = null; // IdentContext
    this.one = null; // Token
    this.many = null; // Token
    this.array = null; // Token
    this.of = null; // Token
    this.l = null; // Token
    this.eq = null; // Token
    this.e = null; // ExpressionContext
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    this.allowEq = allowEq || null;
    return this;
}

ElementDefInnerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementDefInnerContext.prototype.constructor = ElementDefInnerContext;

ElementDefInnerContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

ElementDefInnerContext.prototype.typeStruct = function() {
    return this.getTypedRuleContext(TypeStructContext,0);
};

ElementDefInnerContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ElementDefInnerContext.prototype.ELEMENT = function() {
    return this.getToken(languageParser.ELEMENT, 0);
};

ElementDefInnerContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

ElementDefInnerContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ElementDefInnerContext.prototype.VIRTUAL = function() {
    return this.getToken(languageParser.VIRTUAL, 0);
};

ElementDefInnerContext.prototype.KEY = function() {
    return this.getToken(languageParser.KEY, 0);
};

ElementDefInnerContext.prototype.MASKED = function() {
    return this.getToken(languageParser.MASKED, 0);
};

ElementDefInnerContext.prototype.nullability = function() {
    return this.getTypedRuleContext(NullabilityContext,0);
};

ElementDefInnerContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

ElementDefInnerContext.prototype.typeAssociationBase = function() {
    return this.getTypedRuleContext(TypeAssociationBaseContext,0);
};

ElementDefInnerContext.prototype.typeTypeOf = function() {
    return this.getTypedRuleContext(TypeTypeOfContext,0);
};

ElementDefInnerContext.prototype.typeRefOptArgs = function() {
    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
};

ElementDefInnerContext.prototype.LOCALIZED = function() {
    return this.getToken(languageParser.LOCALIZED, 0);
};

ElementDefInnerContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ElementDefInnerContext.prototype.typeCompoStruct = function() {
    return this.getTypedRuleContext(TypeCompoStructContext,0);
};

ElementDefInnerContext.prototype.typeToMany = function() {
    return this.getTypedRuleContext(TypeToManyContext,0);
};

ElementDefInnerContext.prototype.typeAssociationElementCont = function() {
    return this.getTypedRuleContext(TypeAssociationElementContContext,0);
};

ElementDefInnerContext.prototype.typeToOne = function() {
    return this.getTypedRuleContext(TypeToOneContext,0);
};

ElementDefInnerContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ElementDefInnerContext.prototype.misplacedAnnotations = function() {
    return this.getTypedRuleContext(MisplacedAnnotationsContext,0);
};

ElementDefInnerContext.prototype.ONE = function() {
    return this.getToken(languageParser.ONE, 0);
};

ElementDefInnerContext.prototype.MANY = function() {
    return this.getToken(languageParser.MANY, 0);
};

ElementDefInnerContext.prototype.ARRAY = function() {
    return this.getToken(languageParser.ARRAY, 0);
};

ElementDefInnerContext.prototype.OF = function() {
    return this.getToken(languageParser.OF, 0);
};

ElementDefInnerContext.prototype.elementProperties = function() {
    return this.getTypedRuleContext(ElementPropertiesContext,0);
};

ElementDefInnerContext.prototype.ENUM = function() {
    return this.getToken(languageParser.ENUM, 0);
};

ElementDefInnerContext.prototype.enumSymbolDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumSymbolDefContext);
    } else {
        return this.getTypedRuleContext(EnumSymbolDefContext,i);
    }
};




languageParser.ElementDefInnerContext = ElementDefInnerContext;

languageParser.prototype.elementDefInner = function(outer, loc, annos, allowEq) {

    var localctx = new ElementDefInnerContext(this, this._ctx, this.state, outer, loc, annos, allowEq);
    this.enterRule(localctx, 86, languageParser.RULE_elementDefInner);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.setLocalToken( 'VIRTUAL', 'VIRTUAL', /^[:{@=}]$/ ); 
        this.state = 1272;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.VIRTUAL) {
            this.state = 1271;
            localctx.virtual = this.match(languageParser.VIRTUAL);
        }

        this.state = 1275;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.KEY) {
            this.state = 1274;
            localctx.key = this.match(languageParser.KEY);
        }

        this.state = 1278;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
        if(la_===1) {
            this.state = 1277;
            localctx.masked = this.match(languageParser.MASKED);

        }
        this.state = 1281;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
        if(la_===1) {
            this.state = 1280;
            this.match(languageParser.ELEMENT);

        }
        this.state = 1283;
        localctx.name = this.ident('Element');
         localctx.art =  this.addDef( localctx.outer, 'elements', 'element', localctx.name.id, localctx.annos,
                                  { virtual: localctx.virtual, key: localctx.key, masked: localctx.masked },
                                  localctx.loc )
              this.docComment( localctx.annos ); 
        this.state = 1288;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1285;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 1290;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1473;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.state = 1291;
            this.typeStruct( localctx.art );
            this.state = 1296;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.NOT:
            case languageParser.NULL:
                this.state = 1292;
                this.nullability( localctx.art );
                this.state = 1293;
                this.requiredSemi();
                break;
            case languageParser.T__0:
            case languageParser.T__3:
            case languageParser.T__7:
            case languageParser.KEY:
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.COMPOSITION:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DESC:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.ESCAPE:
            case languageParser.EXACT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FIRST:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.LAST:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MIXIN:
            case languageParser.MONTH:
            case languageParser.NAMESPACE:
            case languageParser.NULLS:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OUTER:
            case languageParser.PARAMETERS:
            case languageParser.PROJECTION:
            case languageParser.REDIRECTED:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.SECOND:
            case languageParser.SERVICE:
            case languageParser.THEN:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.YEAR:
            case languageParser.Identifier:
            case languageParser.VIRTUAL:
                this.state = 1295;
                this.optionalSemi();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case languageParser.T__4:
            this.state = 1298;
            this.match(languageParser.T__4);
            this.state = 1459;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1299;
                this.typeStruct( localctx.art );
                this.state = 1301;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.NOT || _la===languageParser.NULL) {
                    this.state = 1300;
                    this.nullability( localctx.art );
                }

                this.state = 1304;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.T__7) {
                    this.state = 1303;
                    this.misplacedAnnotations( localctx.annos, 'syntax-anno-after-struct' );
                }

                this.state = 1306;
                this.requiredSemi();
                break;

            case 2:
                this.state = 1308;
                this.typeAssociationBase( localctx.art, true );
                this.state = 1331;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1309;
                    this.typeStruct( localctx.art.target, true );
                    this.state = 1310;
                    this.optionalSemi();
                    break;

                case 2:
                    this.state = 1312;
                    localctx.one = this.match(languageParser.ONE);
                     this.setMaxCardinality( localctx.art, localctx.one, this.numberLiteral( localctx.one, null, '1' ) ); 
                    this.state = 1314;
                    this.typeCompoStruct( localctx.art.target );
                    this.state = 1315;
                    this.optionalSemi();
                    break;

                case 3:
                    this.state = 1317;
                    localctx.many = this.match(languageParser.MANY);
                     this.setMaxCardinality( localctx.art, localctx.many, { literal: 'string', val: '*' } ); 
                    this.state = 1319;
                    this.typeCompoStruct( localctx.art.target );
                    this.state = 1320;
                    this.optionalSemi();
                    break;

                case 4:
                    this.state = 1322;
                    this.typeToMany( localctx.art );
                    this.state = 1323;
                    this.typeAssociationElementCont( localctx.art, localctx.annos );
                    break;

                case 5:
                    this.state = 1325;
                    this.typeToOne( localctx.art );
                    this.state = 1326;
                    this.typeAssociationElementCont( localctx.art, localctx.annos );
                    break;

                case 6:
                    this.state = 1328;
                    this.simplePath( localctx.art.target, 'artref' );
                    this.state = 1329;
                    this.typeAssociationElementCont( localctx.art, localctx.annos );
                    break;

                }
                break;

            case 3:
                this.state = 1338;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.ARRAY:
                    this.state = 1333;
                    localctx.array = this.match(languageParser.ARRAY);
                    this.state = 1334;
                    localctx.of = this.match(languageParser.OF);
                     localctx.art.items = { location: this.tokenLocation( localctx.array, localctx.of ) }; 
                    break;
                case languageParser.MANY:
                    this.state = 1336;
                    localctx.many = this.match(languageParser.MANY);
                     localctx.art.items = { location: this.tokenLocation( localctx.many ) };
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 1384;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1340;
                    this.typeStruct( localctx.art.items );
                    this.state = 1342;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.NOT || _la===languageParser.NULL) {
                        this.state = 1341;
                        this.nullability( localctx.art.items );
                    }

                    this.state = 1345;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.T__7) {
                        this.state = 1344;
                        this.misplacedAnnotations( localctx.annos, 'syntax-anno-after-struct' );
                    }

                    break;

                case 2:
                    this.state = 1347;
                    this.typeTypeOf( localctx.art.items );
                    this.state = 1349;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.NOT || _la===languageParser.NULL) {
                        this.state = 1348;
                        this.nullability( localctx.art.items );
                    }

                     this.docComment( localctx.annos ); 
                    this.state = 1355;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7) {
                        this.state = 1352;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 1357;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;

                case 3:
                    this.state = 1358;
                    this.typeRefOptArgs( localctx.art.items );
                    this.state = 1360;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.NOT || _la===languageParser.NULL) {
                        this.state = 1359;
                        this.nullability( localctx.art.items );
                    }

                     this.docComment( localctx.annos ); 
                    this.state = 1366;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7) {
                        this.state = 1363;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 1368;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1382;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.ENUM) {
                        this.state = 1369;
                        this.match(languageParser.ENUM);
                        this.state = 1370;
                        this.match(languageParser.T__1);
                         localctx.art.items.enum = Object.create(null); 
                        this.state = 1375;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while(_la===languageParser.T__7 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DESC - 61)) | (1 << (languageParser.ELEMENT - 61)) | (1 << (languageParser.ELSE - 61)) | (1 << (languageParser.END - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.ENUM - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.ESCAPE - 61)) | (1 << (languageParser.EXACT - 61)) | (1 << (languageParser.EXCEPT - 61)) | (1 << (languageParser.EXCLUDING - 61)) | (1 << (languageParser.EXTEND - 61)) | (1 << (languageParser.FIRST - 61)) | (1 << (languageParser.FULL - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)) | (1 << (languageParser.INNER - 93)) | (1 << (languageParser.INTERSECT - 93)) | (1 << (languageParser.INTO - 93)) | (1 << (languageParser.IS - 93)) | (1 << (languageParser.JOIN - 93)) | (1 << (languageParser.LAST - 93)) | (1 << (languageParser.LEADING - 93)) | (1 << (languageParser.LEFT - 93)) | (1 << (languageParser.LIKE - 93)) | (1 << (languageParser.LIMIT - 93)) | (1 << (languageParser.LOCALIZED - 93)) | (1 << (languageParser.MANY - 93)) | (1 << (languageParser.MASKED - 93)) | (1 << (languageParser.MINUS - 93)) | (1 << (languageParser.MINUTE - 93)) | (1 << (languageParser.MIXIN - 93)) | (1 << (languageParser.MONTH - 93)) | (1 << (languageParser.NAMESPACE - 93)) | (1 << (languageParser.NULLS - 93)) | (1 << (languageParser.OFFSET - 93)) | (1 << (languageParser.ONE - 93)) | (1 << (languageParser.OR - 93)) | (1 << (languageParser.ORDER - 93)) | (1 << (languageParser.OUTER - 93)) | (1 << (languageParser.PARAMETERS - 93)) | (1 << (languageParser.PROJECTION - 93)) | (1 << (languageParser.REDIRECTED - 93)) | (1 << (languageParser.RETURNS - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.RIGHT - 125)) | (1 << (languageParser.SECOND - 125)) | (1 << (languageParser.SERVICE - 125)) | (1 << (languageParser.THEN - 125)) | (1 << (languageParser.TRAILING - 125)) | (1 << (languageParser.TO - 125)) | (1 << (languageParser.TYPE - 125)) | (1 << (languageParser.UNION - 125)) | (1 << (languageParser.USING - 125)) | (1 << (languageParser.VIEW - 125)) | (1 << (languageParser.YEAR - 125)) | (1 << (languageParser.Identifier - 125)))) !== 0)) {
                            this.state = 1372;
                            this.enumSymbolDef( localctx.art.items );
                            this.state = 1377;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1378;
                        this.match(languageParser.T__3);
                        this.state = 1380;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===languageParser.T__7) {
                            this.state = 1379;
                            this.misplacedAnnotations( localctx.annos, 'syntax-anno-after-enum' );
                        }

                    }

                    break;

                }
                this.state = 1386;
                this.requiredSemi();
                break;

            case 4:
                this.state = 1388;
                this.typeTypeOf( localctx.art );
                this.state = 1390;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.T__8 || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (languageParser.NOT - 50)) | (1 << (languageParser.NULL - 50)) | (1 << (languageParser.DEFAULT - 50)))) !== 0)) {
                    this.state = 1389;
                    this.elementProperties( localctx.art );
                }

                 this.docComment( localctx.annos ); 
                this.state = 1396;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7) {
                    this.state = 1393;
                    this.annotationAssignment_ll1( localctx.annos );
                    this.state = 1398;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1399;
                this.requiredSemi();
                break;

            case 5:
                this.state = 1401;
                localctx.l = this.match(languageParser.LOCALIZED);
                 localctx.art.localized = this.tokenLocation( localctx.l, undefined, true ); 
                this.state = 1403;
                this.typeRefOptArgs( localctx.art );
                 this.docComment( localctx.annos ); 
                this.state = 1408;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7) {
                    this.state = 1405;
                    this.annotationAssignment_ll1( localctx.annos );
                    this.state = 1410;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1419;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.T__8 || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (languageParser.NOT - 50)) | (1 << (languageParser.NULL - 50)) | (1 << (languageParser.DEFAULT - 50)))) !== 0)) {
                    this.state = 1411;
                    this.elementProperties( localctx.art );
                     this.docComment( localctx.annos ); 
                    this.state = 1416;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7) {
                        this.state = 1413;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 1418;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                }

                this.state = 1421;
                this.requiredSemi();
                break;

            case 6:
                this.state = 1423;
                this.typeRefOptArgs( localctx.art );
                 this.docComment( localctx.annos ); 
                this.state = 1428;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7) {
                    this.state = 1425;
                    this.annotationAssignment_ll1( localctx.annos );
                    this.state = 1430;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1455;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                case languageParser.ENUM:
                	this.state = 1431;
                	this.match(languageParser.ENUM);
                	this.state = 1432;
                	this.match(languageParser.T__1);
                	 localctx.art.enum = Object.create(null); 
                	this.state = 1437;
                	this._errHandler.sync(this);
                	_la = this._input.LA(1);
                	while(_la===languageParser.T__7 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DESC - 61)) | (1 << (languageParser.ELEMENT - 61)) | (1 << (languageParser.ELSE - 61)) | (1 << (languageParser.END - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.ENUM - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.ESCAPE - 61)) | (1 << (languageParser.EXACT - 61)) | (1 << (languageParser.EXCEPT - 61)) | (1 << (languageParser.EXCLUDING - 61)) | (1 << (languageParser.EXTEND - 61)) | (1 << (languageParser.FIRST - 61)) | (1 << (languageParser.FULL - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)) | (1 << (languageParser.INNER - 93)) | (1 << (languageParser.INTERSECT - 93)) | (1 << (languageParser.INTO - 93)) | (1 << (languageParser.IS - 93)) | (1 << (languageParser.JOIN - 93)) | (1 << (languageParser.LAST - 93)) | (1 << (languageParser.LEADING - 93)) | (1 << (languageParser.LEFT - 93)) | (1 << (languageParser.LIKE - 93)) | (1 << (languageParser.LIMIT - 93)) | (1 << (languageParser.LOCALIZED - 93)) | (1 << (languageParser.MANY - 93)) | (1 << (languageParser.MASKED - 93)) | (1 << (languageParser.MINUS - 93)) | (1 << (languageParser.MINUTE - 93)) | (1 << (languageParser.MIXIN - 93)) | (1 << (languageParser.MONTH - 93)) | (1 << (languageParser.NAMESPACE - 93)) | (1 << (languageParser.NULLS - 93)) | (1 << (languageParser.OFFSET - 93)) | (1 << (languageParser.ONE - 93)) | (1 << (languageParser.OR - 93)) | (1 << (languageParser.ORDER - 93)) | (1 << (languageParser.OUTER - 93)) | (1 << (languageParser.PARAMETERS - 93)) | (1 << (languageParser.PROJECTION - 93)) | (1 << (languageParser.REDIRECTED - 93)) | (1 << (languageParser.RETURNS - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.RIGHT - 125)) | (1 << (languageParser.SECOND - 125)) | (1 << (languageParser.SERVICE - 125)) | (1 << (languageParser.THEN - 125)) | (1 << (languageParser.TRAILING - 125)) | (1 << (languageParser.TO - 125)) | (1 << (languageParser.TYPE - 125)) | (1 << (languageParser.UNION - 125)) | (1 << (languageParser.USING - 125)) | (1 << (languageParser.VIEW - 125)) | (1 << (languageParser.YEAR - 125)) | (1 << (languageParser.Identifier - 125)))) !== 0)) {
                	    this.state = 1434;
                	    this.enumSymbolDef( localctx.art );
                	    this.state = 1439;
                	    this._errHandler.sync(this);
                	    _la = this._input.LA(1);
                	}
                	this.state = 1440;
                	this.match(languageParser.T__3);
                	this.state = 1442;
                	this._errHandler.sync(this);
                	_la = this._input.LA(1);
                	if(_la===languageParser.T__8 || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (languageParser.NOT - 50)) | (1 << (languageParser.NULL - 50)) | (1 << (languageParser.DEFAULT - 50)))) !== 0)) {
                	    this.state = 1441;
                	    this.elementProperties( localctx.art );
                	}

                	this.state = 1445;
                	this._errHandler.sync(this);
                	_la = this._input.LA(1);
                	if(_la===languageParser.T__7) {
                	    this.state = 1444;
                	    this.misplacedAnnotations( localctx.annos, 'syntax-anno-after-enum' );
                	}

                	break;
                case languageParser.T__8:
                case languageParser.NOT:
                case languageParser.NULL:
                case languageParser.DEFAULT:
                	this.state = 1447;
                	this.elementProperties( localctx.art );
                	 this.docComment( localctx.annos ); 
                	this.state = 1452;
                	this._errHandler.sync(this);
                	_la = this._input.LA(1);
                	while(_la===languageParser.T__7) {
                	    this.state = 1449;
                	    this.annotationAssignment_ll1( localctx.annos );
                	    this.state = 1454;
                	    this._errHandler.sync(this);
                	    _la = this._input.LA(1);
                	}
                	break;
                case languageParser.T__0:
                case languageParser.T__3:
                	break;
                default:
                	break;
                }
                this.state = 1457;
                this.requiredSemi();
                break;

            }
            break;
        case languageParser.T__8:
            this.state = 1461;
            localctx.eq = this.match(languageParser.T__8);
            this.state = 1462;
            localctx.e = this.expression();

                    if (!localctx.allowEq || localctx.e.expr && !localctx.e.expr.literal )
                      this.notSupportedYet( 'Calculated fields are not supported yet', localctx.eq );
                    else if (localctx.e.expr)
                      localctx.art.value = localctx.e.expr;
                  
             this.docComment( localctx.annos ); 
            this.state = 1468;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7) {
                this.state = 1465;
                this.annotationAssignment_ll1( localctx.annos );
                this.state = 1470;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1471;
            this.requiredSemi();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 5 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtendElementContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendElement;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.expected = null; // Token
    this.name = null; // IdentContext
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ExtendElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendElementContext.prototype.constructor = ExtendElementContext;

ExtendElementContext.prototype.extendWithOptElements = function() {
    return this.getTypedRuleContext(ExtendWithOptElementsContext,0);
};

ExtendElementContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

ExtendElementContext.prototype.ELEMENT = function() {
    return this.getToken(languageParser.ELEMENT, 0);
};




languageParser.ExtendElementContext = ExtendElementContext;

languageParser.prototype.extendElement = function(outer, loc, annos) {

    var localctx = new ExtendElementContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 88, languageParser.RULE_extendElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1476;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,188,this._ctx);
        if(la_===1) {
            this.state = 1475;
            localctx.expected = this.match(languageParser.ELEMENT);

        }
        this.state = 1478;
        localctx.name = this.ident('Element');
         localctx.art =  this.addDef( localctx.outer, 'elements', 'extend', localctx.name.id, localctx.annos,
                                  { expectedKind: localctx.expected && 'element' },
                                  localctx.loc ) 
        this.state = 1480;
        this.extendWithOptElements( localctx.art, localctx.annos );
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BracedSelectItemListDefContext(parser, parent, invokingState, query) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_bracedSelectItemListDef;
    this.query = null
    this.star = null; // Token
    this.query = query || null;
    return this;
}

BracedSelectItemListDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BracedSelectItemListDefContext.prototype.constructor = BracedSelectItemListDefContext;

BracedSelectItemListDefContext.prototype.selectItemDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectItemDefContext);
    } else {
        return this.getTypedRuleContext(SelectItemDefContext,i);
    }
};




languageParser.BracedSelectItemListDefContext = BracedSelectItemListDefContext;

languageParser.prototype.bracedSelectItemListDef = function(query) {

    var localctx = new BracedSelectItemListDefContext(this, this._ctx, this.state, query);
    this.enterRule(localctx, 90, languageParser.RULE_bracedSelectItemListDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1482;
        this.match(languageParser.T__1);
         if (!localctx.query.columns) localctx.query.columns = []; 
        this.state = 1497;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__1) | (1 << languageParser.T__4) | (1 << languageParser.T__5) | (1 << languageParser.T__7) | (1 << languageParser.T__9) | (1 << languageParser.T__10) | (1 << languageParser.T__11) | (1 << languageParser.T__16) | (1 << languageParser.T__26))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (languageParser.String - 32)) | (1 << (languageParser.QuotedLiteral - 32)) | (1 << (languageParser.Boolean - 32)) | (1 << (languageParser.CASE - 32)) | (1 << (languageParser.CAST - 32)) | (1 << (languageParser.EXTRACT - 32)) | (1 << (languageParser.KEY - 32)) | (1 << (languageParser.NEW - 32)) | (1 << (languageParser.NULL - 32)) | (1 << (languageParser.TRIM - 32)) | (1 << (languageParser.Number - 32)) | (1 << (languageParser.ABSTRACT - 32)) | (1 << (languageParser.ACTION - 32)) | (1 << (languageParser.ACTIONS - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (languageParser.AND - 64)) | (1 << (languageParser.ANNOTATE - 64)) | (1 << (languageParser.ANNOTATION - 64)) | (1 << (languageParser.ARRAY - 64)) | (1 << (languageParser.ASC - 64)) | (1 << (languageParser.ASPECT - 64)) | (1 << (languageParser.ASSOCIATION - 64)) | (1 << (languageParser.BETWEEN - 64)) | (1 << (languageParser.BOTH - 64)) | (1 << (languageParser.COMPOSITION - 64)) | (1 << (languageParser.CONTEXT - 64)) | (1 << (languageParser.CROSS - 64)) | (1 << (languageParser.DAY - 64)) | (1 << (languageParser.DEFAULT - 64)) | (1 << (languageParser.DEFINE - 64)) | (1 << (languageParser.DESC - 64)) | (1 << (languageParser.ELEMENT - 64)) | (1 << (languageParser.ELSE - 64)) | (1 << (languageParser.END - 64)) | (1 << (languageParser.ENTITY - 64)) | (1 << (languageParser.ENUM - 64)) | (1 << (languageParser.EVENT - 64)) | (1 << (languageParser.ESCAPE - 64)) | (1 << (languageParser.EXACT - 64)) | (1 << (languageParser.EXCEPT - 64)) | (1 << (languageParser.EXCLUDING - 64)) | (1 << (languageParser.EXTEND - 64)) | (1 << (languageParser.FIRST - 64)) | (1 << (languageParser.FULL - 64)) | (1 << (languageParser.FUNCTION - 64)) | (1 << (languageParser.GROUP - 64)) | (1 << (languageParser.HAVING - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (languageParser.HOUR - 96)) | (1 << (languageParser.INNER - 96)) | (1 << (languageParser.INTERSECT - 96)) | (1 << (languageParser.INTO - 96)) | (1 << (languageParser.IS - 96)) | (1 << (languageParser.JOIN - 96)) | (1 << (languageParser.LAST - 96)) | (1 << (languageParser.LEADING - 96)) | (1 << (languageParser.LEFT - 96)) | (1 << (languageParser.LIKE - 96)) | (1 << (languageParser.LIMIT - 96)) | (1 << (languageParser.LOCALIZED - 96)) | (1 << (languageParser.MANY - 96)) | (1 << (languageParser.MASKED - 96)) | (1 << (languageParser.MINUS - 96)) | (1 << (languageParser.MINUTE - 96)) | (1 << (languageParser.MIXIN - 96)) | (1 << (languageParser.MONTH - 96)) | (1 << (languageParser.NAMESPACE - 96)) | (1 << (languageParser.NULLS - 96)) | (1 << (languageParser.OFFSET - 96)) | (1 << (languageParser.ONE - 96)) | (1 << (languageParser.OR - 96)) | (1 << (languageParser.ORDER - 96)) | (1 << (languageParser.OUTER - 96)) | (1 << (languageParser.PARAMETERS - 96)) | (1 << (languageParser.PROJECTION - 96)) | (1 << (languageParser.REDIRECTED - 96)) | (1 << (languageParser.RETURNS - 96)) | (1 << (languageParser.RIGHT - 96)) | (1 << (languageParser.SECOND - 96)) | (1 << (languageParser.SERVICE - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (languageParser.THEN - 128)) | (1 << (languageParser.TRAILING - 128)) | (1 << (languageParser.TO - 128)) | (1 << (languageParser.TYPE - 128)) | (1 << (languageParser.UNION - 128)) | (1 << (languageParser.USING - 128)) | (1 << (languageParser.VIEW - 128)) | (1 << (languageParser.YEAR - 128)) | (1 << (languageParser.Identifier - 128)) | (1 << (languageParser.VIRTUAL - 128)) | (1 << (languageParser.HideAlternatives - 128)))) !== 0)) {
            this.state = 1487;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.T__11:
                this.state = 1484;
                localctx.star = this.match(languageParser.T__11);

                          localctx.query.columns = [ this.tokenLocation( localctx.star, undefined, '*' ) ];
                        
                break;
            case languageParser.T__1:
            case languageParser.T__4:
            case languageParser.T__5:
            case languageParser.T__7:
            case languageParser.T__9:
            case languageParser.T__10:
            case languageParser.T__16:
            case languageParser.T__26:
            case languageParser.String:
            case languageParser.QuotedLiteral:
            case languageParser.Boolean:
            case languageParser.CASE:
            case languageParser.CAST:
            case languageParser.EXTRACT:
            case languageParser.KEY:
            case languageParser.NEW:
            case languageParser.NULL:
            case languageParser.TRIM:
            case languageParser.Number:
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.COMPOSITION:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DESC:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.ESCAPE:
            case languageParser.EXACT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FIRST:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.LAST:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MIXIN:
            case languageParser.MONTH:
            case languageParser.NAMESPACE:
            case languageParser.NULLS:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OUTER:
            case languageParser.PARAMETERS:
            case languageParser.PROJECTION:
            case languageParser.REDIRECTED:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.SECOND:
            case languageParser.SERVICE:
            case languageParser.THEN:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.YEAR:
            case languageParser.Identifier:
            case languageParser.VIRTUAL:
            case languageParser.HideAlternatives:
                this.state = 1486;
                this.selectItemDef( localctx.query.columns );
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1494;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 1489;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore("}")) break; 
                this.state = 1491;
                this.selectItemDef( localctx.query.columns );
                this.state = 1496;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1499;
        this.match(languageParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectItemDefContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_selectItemDef;
    this.outer = null
    this.art = {}
    this.annos = []
    this.item = {}
    this.virtual = null; // Token
    this.key = null; // Token
    this.e = null; // ExpressionContext
    this.n1 = null; // IdentContext
    this.n2 = null; // IdentContext
    this.re = null; // Token
    this.to = null; // Token
    this.outer = outer || null;
    return this;
}

SelectItemDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectItemDefContext.prototype.constructor = SelectItemDefContext;

SelectItemDefContext.prototype.selectItemInlineList = function() {
    return this.getTypedRuleContext(SelectItemInlineListContext,0);
};

SelectItemDefContext.prototype.annotationAssignment_atn = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_atnContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_atnContext,i);
    }
};

SelectItemDefContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SelectItemDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

SelectItemDefContext.prototype.VIRTUAL = function() {
    return this.getToken(languageParser.VIRTUAL, 0);
};

SelectItemDefContext.prototype.KEY = function() {
    return this.getToken(languageParser.KEY, 0);
};

SelectItemDefContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

SelectItemDefContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

SelectItemDefContext.prototype.DOTbeforeBRACE = function() {
    return this.getToken(languageParser.DOTbeforeBRACE, 0);
};

SelectItemDefContext.prototype.selectItemInlineSpec = function() {
    return this.getTypedRuleContext(SelectItemInlineSpecContext,0);
};

SelectItemDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

SelectItemDefContext.prototype.typeTypeOf = function() {
    return this.getTypedRuleContext(TypeTypeOfContext,0);
};

SelectItemDefContext.prototype.typeRefOptArgs = function() {
    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
};

SelectItemDefContext.prototype.REDIRECTED = function() {
    return this.getToken(languageParser.REDIRECTED, 0);
};

SelectItemDefContext.prototype.TO = function() {
    return this.getToken(languageParser.TO, 0);
};

SelectItemDefContext.prototype.typeAssociationCont = function() {
    return this.getTypedRuleContext(TypeAssociationContContext,0);
};

SelectItemDefContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};




languageParser.SelectItemDefContext = SelectItemDefContext;

languageParser.prototype.selectItemDef = function(outer) {

    var localctx = new SelectItemDefContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 92, languageParser.RULE_selectItemDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.docComment( localctx.annos ); 
        this.state = 1505;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1502;
            this.annotationAssignment_atn( localctx.annos );
            this.state = 1507;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
         this.setLocalToken( 'VIRTUAL', 'VIRTUAL', /^([,.:\[@]|as)$/i ) ; 
        this.state = 1510;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.VIRTUAL) {
            this.state = 1509;
            localctx.virtual = this.match(languageParser.VIRTUAL);
        }

        this.state = 1513;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.KEY) {
            this.state = 1512;
            localctx.key = this.match(languageParser.KEY);
        }

        this.state = 1546;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__4:
        case languageParser.T__5:
        case languageParser.T__9:
        case languageParser.T__10:
        case languageParser.T__16:
        case languageParser.T__26:
        case languageParser.String:
        case languageParser.QuotedLiteral:
        case languageParser.Boolean:
        case languageParser.CASE:
        case languageParser.CAST:
        case languageParser.EXTRACT:
        case languageParser.NEW:
        case languageParser.NULL:
        case languageParser.TRIM:
        case languageParser.Number:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
        case languageParser.HideAlternatives:
            this.state = 1515;
            localctx.e = this.expression();

                    localctx.art =  this.addItem( localctx.outer, null, null, localctx.annos,
                                         { value: localctx.e.expr, key: localctx.key, virtual: localctx.virtual } )
                  
            this.state = 1525;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.AS:
                this.state = 1517;
                this.match(languageParser.AS);
                this.state = 1518;
                localctx.n1 = this.ident('Item');
                 localctx.art.name = localctx.n1.id 
                break;
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.COMPOSITION:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DESC:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.ESCAPE:
            case languageParser.EXACT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FIRST:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.LAST:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MIXIN:
            case languageParser.MONTH:
            case languageParser.NAMESPACE:
            case languageParser.NULLS:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OUTER:
            case languageParser.PARAMETERS:
            case languageParser.PROJECTION:
            case languageParser.REDIRECTED:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.SECOND:
            case languageParser.SERVICE:
            case languageParser.THEN:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.YEAR:
            case languageParser.Identifier:
                this.state = 1521;
                localctx.n2 = this.ident('Item');
                 this.fragileAlias( localctx.n2.id, true );; localctx.art.name = localctx.n2.id 
                break;
            case languageParser.T__1:
            case languageParser.T__2:
            case languageParser.T__3:
            case languageParser.T__4:
            case languageParser.T__7:
            case languageParser.FROM:
            case languageParser.DOTbeforeBRACE:
                 if (this.getCurrentToken().text !== '.') this.classifyImplicitName( 'Item', localctx.e.expr ); 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
             if (localctx.art.value && !localctx.art.value.path) this.excludeExpected( ["'.'", "'{'"] ); 
            this.state = 1533;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case languageParser.T__1:
            	 if (localctx.art.value && !localctx.art.value.path) this.reportExpandInline( 'expand' ); 
            	this.state = 1529;
            	this.selectItemInlineList( localctx.art, 'expand' );
            	break;
            case languageParser.DOTbeforeBRACE:
            	 if (localctx.art.value && !localctx.art.value.path) this.reportExpandInline( 'inline' ); 
            	this.state = 1531;
            	this.match(languageParser.DOTbeforeBRACE);
            	this.state = 1532;
            	this.selectItemInlineSpec( localctx.art );
            	break;
            case languageParser.T__2:
            case languageParser.T__3:
            case languageParser.T__4:
            case languageParser.T__7:
            case languageParser.FROM:
            	break;
            default:
            	break;
            }
            break;
        case languageParser.T__1:

                    localctx.art =  this.addItem( localctx.outer, null, null, localctx.annos, { key: localctx.key, virtual: localctx.virtual } )
                  
            this.state = 1536;
            this.selectItemInlineList( localctx.art, 'expand' );
            this.state = 1544;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.AS:
                this.state = 1537;
                this.match(languageParser.AS);
                this.state = 1538;
                localctx.n1 = this.ident('Item');
                 localctx.art.name = localctx.n1.id 
                break;
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.COMPOSITION:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DESC:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.ESCAPE:
            case languageParser.EXACT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FIRST:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.LAST:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MIXIN:
            case languageParser.MONTH:
            case languageParser.NAMESPACE:
            case languageParser.NULLS:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OUTER:
            case languageParser.PARAMETERS:
            case languageParser.PROJECTION:
            case languageParser.REDIRECTED:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.SECOND:
            case languageParser.SERVICE:
            case languageParser.THEN:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.YEAR:
            case languageParser.Identifier:
                this.state = 1541;
                localctx.n2 = this.ident('Item');
                 this.fragileAlias( localctx.n2.id, true );; localctx.art.name = localctx.n2.id 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
         this.docComment( localctx.annos ); 
        this.state = 1552;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1549;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 1554;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1588;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__4) {
            this.state = 1555;
            this.match(languageParser.T__4);
            this.state = 1586;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,204,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1556;
                localctx.re = this.match(languageParser.REDIRECTED);
                this.state = 1557;
                localctx.to = this.match(languageParser.TO);
                 localctx.art.target = {}; 
                this.state = 1559;
                this.simplePath( localctx.art.target, 'artref' );
                this.state = 1568;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.T__1:
                case languageParser.ON:
                    this.state = 1560;
                    this.typeAssociationCont( localctx.art );
                    break;
                case languageParser.T__2:
                case languageParser.T__3:
                case languageParser.T__7:
                case languageParser.FROM:
                     this.docComment( localctx.annos ); 
                    this.state = 1565;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7) {
                        this.state = 1562;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 1567;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;

            case 2:
                this.state = 1570;
                this.typeTypeOf( localctx.art );
                 this.docComment( localctx.annos ); 
                this.state = 1575;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7) {
                    this.state = 1572;
                    this.annotationAssignment_ll1( localctx.annos );
                    this.state = 1577;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;

            case 3:
                this.state = 1578;
                this.typeRefOptArgs( localctx.art );
                 this.docComment( localctx.annos ); 
                this.state = 1583;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7) {
                    this.state = 1580;
                    this.annotationAssignment_ll1( localctx.annos );
                    this.state = 1585;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;

            }
        }

        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterListDefContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_parameterListDef;
    this.art = null
    this.art = art || null;
    return this;
}

ParameterListDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterListDefContext.prototype.constructor = ParameterListDefContext;

ParameterListDefContext.prototype.parameterDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterDefContext);
    } else {
        return this.getTypedRuleContext(ParameterDefContext,i);
    }
};




languageParser.ParameterListDefContext = ParameterListDefContext;

languageParser.prototype.parameterListDef = function(art) {

    var localctx = new ParameterListDefContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 94, languageParser.RULE_parameterListDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1590;
        this.match(languageParser.T__5);
        this.state = 1600;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__7 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DESC - 61)) | (1 << (languageParser.ELEMENT - 61)) | (1 << (languageParser.ELSE - 61)) | (1 << (languageParser.END - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.ENUM - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.ESCAPE - 61)) | (1 << (languageParser.EXACT - 61)) | (1 << (languageParser.EXCEPT - 61)) | (1 << (languageParser.EXCLUDING - 61)) | (1 << (languageParser.EXTEND - 61)) | (1 << (languageParser.FIRST - 61)) | (1 << (languageParser.FULL - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)) | (1 << (languageParser.INNER - 93)) | (1 << (languageParser.INTERSECT - 93)) | (1 << (languageParser.INTO - 93)) | (1 << (languageParser.IS - 93)) | (1 << (languageParser.JOIN - 93)) | (1 << (languageParser.LAST - 93)) | (1 << (languageParser.LEADING - 93)) | (1 << (languageParser.LEFT - 93)) | (1 << (languageParser.LIKE - 93)) | (1 << (languageParser.LIMIT - 93)) | (1 << (languageParser.LOCALIZED - 93)) | (1 << (languageParser.MANY - 93)) | (1 << (languageParser.MASKED - 93)) | (1 << (languageParser.MINUS - 93)) | (1 << (languageParser.MINUTE - 93)) | (1 << (languageParser.MIXIN - 93)) | (1 << (languageParser.MONTH - 93)) | (1 << (languageParser.NAMESPACE - 93)) | (1 << (languageParser.NULLS - 93)) | (1 << (languageParser.OFFSET - 93)) | (1 << (languageParser.ONE - 93)) | (1 << (languageParser.OR - 93)) | (1 << (languageParser.ORDER - 93)) | (1 << (languageParser.OUTER - 93)) | (1 << (languageParser.PARAMETERS - 93)) | (1 << (languageParser.PROJECTION - 93)) | (1 << (languageParser.REDIRECTED - 93)) | (1 << (languageParser.RETURNS - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.RIGHT - 125)) | (1 << (languageParser.SECOND - 125)) | (1 << (languageParser.SERVICE - 125)) | (1 << (languageParser.THEN - 125)) | (1 << (languageParser.TRAILING - 125)) | (1 << (languageParser.TO - 125)) | (1 << (languageParser.TYPE - 125)) | (1 << (languageParser.UNION - 125)) | (1 << (languageParser.USING - 125)) | (1 << (languageParser.VIEW - 125)) | (1 << (languageParser.YEAR - 125)) | (1 << (languageParser.Identifier - 125)))) !== 0)) {
            this.state = 1591;
            this.parameterDef( localctx.art );
            this.state = 1597;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 1592;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore(')')) break; 
                this.state = 1594;
                this.parameterDef( localctx.art );
                this.state = 1599;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1602;
        this.match(languageParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterDefContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_parameterDef;
    this.outer = null
    this.art = null
    this.annos = []
    this.name = null; // IdentContext
    this.outer = outer || null;
    return this;
}

ParameterDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterDefContext.prototype.constructor = ParameterDefContext;

ParameterDefContext.prototype.typeSpec = function() {
    return this.getTypedRuleContext(TypeSpecContext,0);
};

ParameterDefContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

ParameterDefContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ParameterDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};




languageParser.ParameterDefContext = ParameterDefContext;

languageParser.prototype.parameterDef = function(outer) {

    var localctx = new ParameterDefContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 96, languageParser.RULE_parameterDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.docComment( localctx.annos ); 
        this.state = 1608;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1605;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1610;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1611;
        localctx.name = this.ident('Param');
         localctx.art =  this.addDef( localctx.outer, 'params', 'param', localctx.name.id, localctx.annos )
              this.docComment( localctx.annos ); 
        this.state = 1616;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1613;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 1618;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1619;
        this.typeSpec( localctx.art );
        this.state = 1623;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1620;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1625;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EntityParametersContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_entityParameters;
    this.art = null
    this.art = art || null;
    return this;
}

EntityParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EntityParametersContext.prototype.constructor = EntityParametersContext;

EntityParametersContext.prototype.entityParameterDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EntityParameterDefContext);
    } else {
        return this.getTypedRuleContext(EntityParameterDefContext,i);
    }
};




languageParser.EntityParametersContext = EntityParametersContext;

languageParser.prototype.entityParameters = function(art) {

    var localctx = new EntityParametersContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 98, languageParser.RULE_entityParameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1626;
        this.match(languageParser.T__5);
        this.state = 1636;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__7 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DESC - 61)) | (1 << (languageParser.ELEMENT - 61)) | (1 << (languageParser.ELSE - 61)) | (1 << (languageParser.END - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.ENUM - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.ESCAPE - 61)) | (1 << (languageParser.EXACT - 61)) | (1 << (languageParser.EXCEPT - 61)) | (1 << (languageParser.EXCLUDING - 61)) | (1 << (languageParser.EXTEND - 61)) | (1 << (languageParser.FIRST - 61)) | (1 << (languageParser.FULL - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)) | (1 << (languageParser.INNER - 93)) | (1 << (languageParser.INTERSECT - 93)) | (1 << (languageParser.INTO - 93)) | (1 << (languageParser.IS - 93)) | (1 << (languageParser.JOIN - 93)) | (1 << (languageParser.LAST - 93)) | (1 << (languageParser.LEADING - 93)) | (1 << (languageParser.LEFT - 93)) | (1 << (languageParser.LIKE - 93)) | (1 << (languageParser.LIMIT - 93)) | (1 << (languageParser.LOCALIZED - 93)) | (1 << (languageParser.MANY - 93)) | (1 << (languageParser.MASKED - 93)) | (1 << (languageParser.MINUS - 93)) | (1 << (languageParser.MINUTE - 93)) | (1 << (languageParser.MIXIN - 93)) | (1 << (languageParser.MONTH - 93)) | (1 << (languageParser.NAMESPACE - 93)) | (1 << (languageParser.NULLS - 93)) | (1 << (languageParser.OFFSET - 93)) | (1 << (languageParser.ONE - 93)) | (1 << (languageParser.OR - 93)) | (1 << (languageParser.ORDER - 93)) | (1 << (languageParser.OUTER - 93)) | (1 << (languageParser.PARAMETERS - 93)) | (1 << (languageParser.PROJECTION - 93)) | (1 << (languageParser.REDIRECTED - 93)) | (1 << (languageParser.RETURNS - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.RIGHT - 125)) | (1 << (languageParser.SECOND - 125)) | (1 << (languageParser.SERVICE - 125)) | (1 << (languageParser.THEN - 125)) | (1 << (languageParser.TRAILING - 125)) | (1 << (languageParser.TO - 125)) | (1 << (languageParser.TYPE - 125)) | (1 << (languageParser.UNION - 125)) | (1 << (languageParser.USING - 125)) | (1 << (languageParser.VIEW - 125)) | (1 << (languageParser.YEAR - 125)) | (1 << (languageParser.Identifier - 125)))) !== 0)) {
            this.state = 1627;
            this.entityParameterDef( localctx.art );
            this.state = 1633;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 1628;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore(')')) break; 
                this.state = 1630;
                this.entityParameterDef( localctx.art );
                this.state = 1635;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1638;
        this.match(languageParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EntityParameterDefContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_entityParameterDef;
    this.outer = null
    this.art = null
    this.annos = []
    this.name = null; // IdentContext
    this.expr = null; // ExpressionContext
    this.outer = outer || null;
    return this;
}

EntityParameterDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EntityParameterDefContext.prototype.constructor = EntityParameterDefContext;

EntityParameterDefContext.prototype.typeSpec = function() {
    return this.getTypedRuleContext(TypeSpecContext,0);
};

EntityParameterDefContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

EntityParameterDefContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

EntityParameterDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

EntityParameterDefContext.prototype.DEFAULT = function() {
    return this.getToken(languageParser.DEFAULT, 0);
};

EntityParameterDefContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};




languageParser.EntityParameterDefContext = EntityParameterDefContext;

languageParser.prototype.entityParameterDef = function(outer) {

    var localctx = new EntityParameterDefContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 100, languageParser.RULE_entityParameterDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.docComment( localctx.annos ); 
        this.state = 1644;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1641;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1646;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1647;
        localctx.name = this.ident('Param');
         localctx.art =  this.addDef( localctx.outer, 'params', 'param', localctx.name.id, localctx.annos )
              this.docComment( localctx.annos ); 
        this.state = 1652;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1649;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 1654;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1655;
        this.typeSpec( localctx.art );
        this.state = 1660;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.DEFAULT) {
            this.state = 1656;
            this.match(languageParser.DEFAULT);
            this.state = 1657;
            localctx.expr = this.expression();
             localctx.art.default = localctx.expr.expr; 
        }

        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NullabilityContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_nullability;
    this.art = null
    this.not = null; // Token
    this.n1 = null; // Token
    this.n2 = null; // Token
    this.art = art || null;
    return this;
}

NullabilityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NullabilityContext.prototype.constructor = NullabilityContext;

NullabilityContext.prototype.NOT = function() {
    return this.getToken(languageParser.NOT, 0);
};

NullabilityContext.prototype.NULL = function() {
    return this.getToken(languageParser.NULL, 0);
};




languageParser.NullabilityContext = NullabilityContext;

languageParser.prototype.nullability = function(art) {

    var localctx = new NullabilityContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 102, languageParser.RULE_nullability);
    try {
        this.state = 1667;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.NOT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1662;
            localctx.not = this.match(languageParser.NOT);
            this.state = 1663;
            localctx.n1 = this.match(languageParser.NULL);
             localctx.art.notNull = this.tokenLocation(localctx.not,localctx.n1,true); 
            break;
        case languageParser.NULL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1665;
            localctx.n2 = this.match(languageParser.NULL);
             localctx.art.notNull = this.tokenLocation(localctx.n2,undefined,false); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementPropertiesContext(parser, parent, invokingState, elem) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_elementProperties;
    this.elem = null
    this.expr = null; // ExpressionContext
    this.eq = null; // Token
    this.elem = elem || null;
    return this;
}

ElementPropertiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementPropertiesContext.prototype.constructor = ElementPropertiesContext;

ElementPropertiesContext.prototype.nullability = function() {
    return this.getTypedRuleContext(NullabilityContext,0);
};

ElementPropertiesContext.prototype.DEFAULT = function() {
    return this.getToken(languageParser.DEFAULT, 0);
};

ElementPropertiesContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};




languageParser.ElementPropertiesContext = ElementPropertiesContext;

languageParser.prototype.elementProperties = function(elem) {

    var localctx = new ElementPropertiesContext(this, this._ctx, this.state, elem);
    this.enterRule(localctx, 104, languageParser.RULE_elementProperties);
    var _la = 0; // Token type
    try {
        this.state = 1686;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.NOT:
        case languageParser.NULL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1669;
            this.nullability(localctx.elem);
            this.state = 1674;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.DEFAULT) {
                this.state = 1670;
                this.match(languageParser.DEFAULT);
                this.state = 1671;
                localctx.expr = this.expression();
                 localctx.elem.default = localctx.expr.expr; 
            }

            break;
        case languageParser.DEFAULT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1676;
            this.match(languageParser.DEFAULT);
            this.state = 1677;
            localctx.expr = this.expression();
             localctx.elem.default = localctx.expr.expr; 
            this.state = 1681;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.NOT || _la===languageParser.NULL) {
                this.state = 1680;
                this.nullability(localctx.elem);
            }

            break;
        case languageParser.T__8:
            this.enterOuterAlt(localctx, 3);
            this.state = 1683;
            localctx.eq = this.match(languageParser.T__8);
             this.notSupportedYet( 'Calculated fields are not supported yet', localctx.eq ); 
            this.state = 1685;
            this.expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ViewDefContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_viewDef;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.v = null; // Token
    this.qe = null; // QueryExpressionContext
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ViewDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ViewDefContext.prototype.constructor = ViewDefContext;

ViewDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ViewDefContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

ViewDefContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ViewDefContext.prototype.VIEW = function() {
    return this.getToken(languageParser.VIEW, 0);
};

ViewDefContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

ViewDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

ViewDefContext.prototype.entityParameters = function() {
    return this.getTypedRuleContext(EntityParametersContext,0);
};

ViewDefContext.prototype.PARAMETERS = function() {
    return this.getToken(languageParser.PARAMETERS, 0);
};

ViewDefContext.prototype.entityParameterDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EntityParameterDefContext);
    } else {
        return this.getTypedRuleContext(EntityParameterDefContext,i);
    }
};

ViewDefContext.prototype.HideAlternatives = function() {
    return this.getToken(languageParser.HideAlternatives, 0);
};

ViewDefContext.prototype.WITH = function() {
    return this.getToken(languageParser.WITH, 0);
};




languageParser.ViewDefContext = ViewDefContext;

languageParser.prototype.viewDef = function(outer, loc, annos) {

    var localctx = new ViewDefContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 106, languageParser.RULE_viewDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1688;
        localctx.v = this.match(languageParser.VIEW);
        this.state = 1689;
        this.simplePath( localctx.name, 'Entity' );
         localctx.art =  this.addDef( localctx.outer, 'artifacts', 'entity', localctx.name, localctx.annos, { ['$'+'syntax']: 'view' }, localctx.loc )
              this.docComment( localctx.annos ); 
        this.state = 1694;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1691;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 1696;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1708;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case languageParser.T__5:
        	this.state = 1697;
        	this.entityParameters( localctx.art );
        	break;
        case languageParser.WITH:
        case languageParser.HideAlternatives:
        	this.state = 1698;
        	_la = this._input.LA(1);
        	if(!(_la===languageParser.WITH || _la===languageParser.HideAlternatives)) {
        	this._errHandler.recoverInline(this);
        	}
        	else {
        		this._errHandler.reportMatch(this);
        	    this.consume();
        	}
        	this.state = 1699;
        	this.match(languageParser.PARAMETERS);
        	this.state = 1700;
        	this.entityParameterDef( localctx.art );
        	this.state = 1705;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	while(_la===languageParser.T__2) {
        	    this.state = 1701;
        	    this.match(languageParser.T__2);
        	    this.state = 1702;
        	    this.entityParameterDef( localctx.art );
        	    this.state = 1707;
        	    this._errHandler.sync(this);
        	    _la = this._input.LA(1);
        	}
        	break;
        case languageParser.AS:
        	break;
        default:
        	break;
        }
        this.state = 1710;
        this.match(languageParser.AS);
        this.state = 1711;
        localctx.qe = this.queryExpression();
         localctx.art.query = localctx.qe.query; 
        this.state = 1713;
        this.requiredSemi();
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IncludeRefContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_includeRef;
    this.art = null
    this.incl = {}
    this.art = art || null;
    return this;
}

IncludeRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IncludeRefContext.prototype.constructor = IncludeRefContext;

IncludeRefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};




languageParser.IncludeRefContext = IncludeRefContext;

languageParser.prototype.includeRef = function(art) {

    var localctx = new IncludeRefContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 108, languageParser.RULE_includeRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1715;
        this.simplePath( localctx.incl, 'artref' );
         if (localctx.art.includes) localctx.art.includes.push(localctx.incl); else localctx.art.includes = [localctx.incl]; 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeSpecContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeSpec;
    this.art = null
    this.art = art || null;
    return this;
}

TypeSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeSpecContext.prototype.constructor = TypeSpecContext;

TypeSpecContext.prototype.typeStruct = function() {
    return this.getTypedRuleContext(TypeStructContext,0);
};

TypeSpecContext.prototype.typeArray = function() {
    return this.getTypedRuleContext(TypeArrayContext,0);
};

TypeSpecContext.prototype.typeTypeOf = function() {
    return this.getTypedRuleContext(TypeTypeOfContext,0);
};

TypeSpecContext.prototype.typeRefOptArgs = function() {
    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
};

TypeSpecContext.prototype.nullability = function() {
    return this.getTypedRuleContext(NullabilityContext,0);
};

TypeSpecContext.prototype.ENUM = function() {
    return this.getToken(languageParser.ENUM, 0);
};

TypeSpecContext.prototype.enumSymbolDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumSymbolDefContext);
    } else {
        return this.getTypedRuleContext(EnumSymbolDefContext,i);
    }
};




languageParser.TypeSpecContext = TypeSpecContext;

languageParser.prototype.typeSpec = function(art) {

    var localctx = new TypeSpecContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 110, languageParser.RULE_typeSpec);
    var _la = 0; // Token type
    try {
        this.state = 1747;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1718;
            this.typeStruct( localctx.art );
            break;
        case languageParser.T__4:
            this.enterOuterAlt(localctx, 2);
            this.state = 1719;
            this.match(languageParser.T__4);
            this.state = 1745;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,228,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1720;
                this.typeStruct( localctx.art );
                this.state = 1722;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.NOT || _la===languageParser.NULL) {
                    this.state = 1721;
                    this.nullability( localctx.art );
                }

                break;

            case 2:
                this.state = 1724;
                this.typeArray( localctx.art );
                break;

            case 3:
                this.state = 1725;
                this.typeTypeOf( localctx.art );
                this.state = 1727;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.NOT || _la===languageParser.NULL) {
                    this.state = 1726;
                    this.nullability( localctx.art );
                }

                break;

            case 4:
                this.state = 1729;
                this.typeRefOptArgs( localctx.art );
                this.state = 1731;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.NOT || _la===languageParser.NULL) {
                    this.state = 1730;
                    this.nullability( localctx.art );
                }

                this.state = 1743;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.ENUM) {
                    this.state = 1733;
                    this.match(languageParser.ENUM);
                    this.state = 1734;
                    this.match(languageParser.T__1);
                     localctx.art.enum = Object.create(null); 
                    this.state = 1739;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DESC - 61)) | (1 << (languageParser.ELEMENT - 61)) | (1 << (languageParser.ELSE - 61)) | (1 << (languageParser.END - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.ENUM - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.ESCAPE - 61)) | (1 << (languageParser.EXACT - 61)) | (1 << (languageParser.EXCEPT - 61)) | (1 << (languageParser.EXCLUDING - 61)) | (1 << (languageParser.EXTEND - 61)) | (1 << (languageParser.FIRST - 61)) | (1 << (languageParser.FULL - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)) | (1 << (languageParser.INNER - 93)) | (1 << (languageParser.INTERSECT - 93)) | (1 << (languageParser.INTO - 93)) | (1 << (languageParser.IS - 93)) | (1 << (languageParser.JOIN - 93)) | (1 << (languageParser.LAST - 93)) | (1 << (languageParser.LEADING - 93)) | (1 << (languageParser.LEFT - 93)) | (1 << (languageParser.LIKE - 93)) | (1 << (languageParser.LIMIT - 93)) | (1 << (languageParser.LOCALIZED - 93)) | (1 << (languageParser.MANY - 93)) | (1 << (languageParser.MASKED - 93)) | (1 << (languageParser.MINUS - 93)) | (1 << (languageParser.MINUTE - 93)) | (1 << (languageParser.MIXIN - 93)) | (1 << (languageParser.MONTH - 93)) | (1 << (languageParser.NAMESPACE - 93)) | (1 << (languageParser.NULLS - 93)) | (1 << (languageParser.OFFSET - 93)) | (1 << (languageParser.ONE - 93)) | (1 << (languageParser.OR - 93)) | (1 << (languageParser.ORDER - 93)) | (1 << (languageParser.OUTER - 93)) | (1 << (languageParser.PARAMETERS - 93)) | (1 << (languageParser.PROJECTION - 93)) | (1 << (languageParser.REDIRECTED - 93)) | (1 << (languageParser.RETURNS - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.RIGHT - 125)) | (1 << (languageParser.SECOND - 125)) | (1 << (languageParser.SERVICE - 125)) | (1 << (languageParser.THEN - 125)) | (1 << (languageParser.TRAILING - 125)) | (1 << (languageParser.TO - 125)) | (1 << (languageParser.TYPE - 125)) | (1 << (languageParser.UNION - 125)) | (1 << (languageParser.USING - 125)) | (1 << (languageParser.VIEW - 125)) | (1 << (languageParser.YEAR - 125)) | (1 << (languageParser.Identifier - 125)))) !== 0)) {
                        this.state = 1736;
                        this.enumSymbolDef( localctx.art );
                        this.state = 1741;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1742;
                    this.match(languageParser.T__3);
                }

                break;

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReturnTypeSpecContext(parser, parent, invokingState, art, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_returnTypeSpec;
    this.art = null
    this.annos = null
    this.ret = null; // Token
    this.art = art || null;
    this.annos = annos || null;
    return this;
}

ReturnTypeSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnTypeSpecContext.prototype.constructor = ReturnTypeSpecContext;

ReturnTypeSpecContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ReturnTypeSpecContext.prototype.RETURNS = function() {
    return this.getToken(languageParser.RETURNS, 0);
};

ReturnTypeSpecContext.prototype.typeStruct = function() {
    return this.getTypedRuleContext(TypeStructContext,0);
};

ReturnTypeSpecContext.prototype.typeArray = function() {
    return this.getTypedRuleContext(TypeArrayContext,0);
};

ReturnTypeSpecContext.prototype.typeTypeOf = function() {
    return this.getTypedRuleContext(TypeTypeOfContext,0);
};

ReturnTypeSpecContext.prototype.typeRefOptArgs = function() {
    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
};

ReturnTypeSpecContext.prototype.nullability = function() {
    return this.getTypedRuleContext(NullabilityContext,0);
};

ReturnTypeSpecContext.prototype.ENUM = function() {
    return this.getToken(languageParser.ENUM, 0);
};

ReturnTypeSpecContext.prototype.misplacedAnnotations = function() {
    return this.getTypedRuleContext(MisplacedAnnotationsContext,0);
};

ReturnTypeSpecContext.prototype.enumSymbolDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumSymbolDefContext);
    } else {
        return this.getTypedRuleContext(EnumSymbolDefContext,i);
    }
};




languageParser.ReturnTypeSpecContext = ReturnTypeSpecContext;

languageParser.prototype.returnTypeSpec = function(art, annos) {

    var localctx = new ReturnTypeSpecContext(this, this._ctx, this.state, art, annos);
    this.enterRule(localctx, 112, languageParser.RULE_returnTypeSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1749;
        localctx.ret = this.match(languageParser.RETURNS);
         localctx.art.returns = { location: this.tokenLocation( localctx.ret ), kind: 'param' }; 
        this.state = 1777;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,235,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1751;
            this.typeStruct( localctx.art.returns );
            this.state = 1753;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.NOT || _la===languageParser.NULL) {
                this.state = 1752;
                this.nullability( localctx.art.returns );
            }

            break;

        case 2:
            this.state = 1755;
            this.typeArray( localctx.art.returns );
            break;

        case 3:
            this.state = 1756;
            this.typeTypeOf( localctx.art.returns );
            this.state = 1758;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.NOT || _la===languageParser.NULL) {
                this.state = 1757;
                this.nullability( localctx.art.returns );
            }

            break;

        case 4:
            this.state = 1760;
            this.typeRefOptArgs( localctx.art.returns );
            this.state = 1762;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.NOT || _la===languageParser.NULL) {
                this.state = 1761;
                this.nullability( localctx.art.returns );
            }

            this.state = 1775;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case languageParser.ENUM:
            	this.state = 1764;
            	this.match(languageParser.ENUM);
            	this.state = 1765;
            	this.match(languageParser.T__1);
            	 localctx.art.returns.enum = Object.create(null); 
            	this.state = 1770;
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	while(_la===languageParser.T__7 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DESC - 61)) | (1 << (languageParser.ELEMENT - 61)) | (1 << (languageParser.ELSE - 61)) | (1 << (languageParser.END - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.ENUM - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.ESCAPE - 61)) | (1 << (languageParser.EXACT - 61)) | (1 << (languageParser.EXCEPT - 61)) | (1 << (languageParser.EXCLUDING - 61)) | (1 << (languageParser.EXTEND - 61)) | (1 << (languageParser.FIRST - 61)) | (1 << (languageParser.FULL - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)) | (1 << (languageParser.INNER - 93)) | (1 << (languageParser.INTERSECT - 93)) | (1 << (languageParser.INTO - 93)) | (1 << (languageParser.IS - 93)) | (1 << (languageParser.JOIN - 93)) | (1 << (languageParser.LAST - 93)) | (1 << (languageParser.LEADING - 93)) | (1 << (languageParser.LEFT - 93)) | (1 << (languageParser.LIKE - 93)) | (1 << (languageParser.LIMIT - 93)) | (1 << (languageParser.LOCALIZED - 93)) | (1 << (languageParser.MANY - 93)) | (1 << (languageParser.MASKED - 93)) | (1 << (languageParser.MINUS - 93)) | (1 << (languageParser.MINUTE - 93)) | (1 << (languageParser.MIXIN - 93)) | (1 << (languageParser.MONTH - 93)) | (1 << (languageParser.NAMESPACE - 93)) | (1 << (languageParser.NULLS - 93)) | (1 << (languageParser.OFFSET - 93)) | (1 << (languageParser.ONE - 93)) | (1 << (languageParser.OR - 93)) | (1 << (languageParser.ORDER - 93)) | (1 << (languageParser.OUTER - 93)) | (1 << (languageParser.PARAMETERS - 93)) | (1 << (languageParser.PROJECTION - 93)) | (1 << (languageParser.REDIRECTED - 93)) | (1 << (languageParser.RETURNS - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.RIGHT - 125)) | (1 << (languageParser.SECOND - 125)) | (1 << (languageParser.SERVICE - 125)) | (1 << (languageParser.THEN - 125)) | (1 << (languageParser.TRAILING - 125)) | (1 << (languageParser.TO - 125)) | (1 << (languageParser.TYPE - 125)) | (1 << (languageParser.UNION - 125)) | (1 << (languageParser.USING - 125)) | (1 << (languageParser.VIEW - 125)) | (1 << (languageParser.YEAR - 125)) | (1 << (languageParser.Identifier - 125)))) !== 0)) {
            	    this.state = 1767;
            	    this.enumSymbolDef( localctx.art.returns );
            	    this.state = 1772;
            	    this._errHandler.sync(this);
            	    _la = this._input.LA(1);
            	}
            	this.state = 1773;
            	this.match(languageParser.T__3);
            	break;
            case languageParser.T__7:
            	this.state = 1774;
            	this.misplacedAnnotations( localctx.annos, 'syntax-anno-after-params' );
            	break;
            case languageParser.T__0:
            case languageParser.T__3:
            	break;
            default:
            	break;
            }
            break;

        }
        this.state = 1779;
        this.requiredSemi();
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeSpecSemiContext(parser, parent, invokingState, art, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeSpecSemi;
    this.art = null
    this.annos = null
    this.array = null; // Token
    this.of = null; // Token
    this.many = null; // Token
    this.l = null; // Token
    this.head = null; // Token
    this.tail = null; // Token
    this.art = art || null;
    this.annos = annos || null;
    return this;
}

TypeSpecSemiContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeSpecSemiContext.prototype.constructor = TypeSpecSemiContext;

TypeSpecSemiContext.prototype.typeStruct = function() {
    return this.getTypedRuleContext(TypeStructContext,0);
};

TypeSpecSemiContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

TypeSpecSemiContext.prototype.typeAssociationBase = function() {
    return this.getTypedRuleContext(TypeAssociationBaseContext,0);
};

TypeSpecSemiContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

TypeSpecSemiContext.prototype.typeTypeOf = function() {
    return this.getTypedRuleContext(TypeTypeOfContext,0);
};

TypeSpecSemiContext.prototype.typeRefOptArgs = function() {
    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
};

TypeSpecSemiContext.prototype.simplePath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SimplePathContext);
    } else {
        return this.getTypedRuleContext(SimplePathContext,i);
    }
};

TypeSpecSemiContext.prototype.LOCALIZED = function() {
    return this.getToken(languageParser.LOCALIZED, 0);
};

TypeSpecSemiContext.prototype.typeToMany = function() {
    return this.getTypedRuleContext(TypeToManyContext,0);
};

TypeSpecSemiContext.prototype.typeToOne = function() {
    return this.getTypedRuleContext(TypeToOneContext,0);
};

TypeSpecSemiContext.prototype.typeAssociationCont = function() {
    return this.getTypedRuleContext(TypeAssociationContContext,0);
};

TypeSpecSemiContext.prototype.ARRAY = function() {
    return this.getToken(languageParser.ARRAY, 0);
};

TypeSpecSemiContext.prototype.OF = function() {
    return this.getToken(languageParser.OF, 0);
};

TypeSpecSemiContext.prototype.MANY = function() {
    return this.getToken(languageParser.MANY, 0);
};

TypeSpecSemiContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

TypeSpecSemiContext.prototype.Number = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.Number);
    } else {
        return this.getToken(languageParser.Number, i);
    }
};


TypeSpecSemiContext.prototype.ENUM = function() {
    return this.getToken(languageParser.ENUM, 0);
};

TypeSpecSemiContext.prototype.nullability = function() {
    return this.getTypedRuleContext(NullabilityContext,0);
};

TypeSpecSemiContext.prototype.includeRef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IncludeRefContext);
    } else {
        return this.getTypedRuleContext(IncludeRefContext,i);
    }
};

TypeSpecSemiContext.prototype.enumSymbolDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumSymbolDefContext);
    } else {
        return this.getTypedRuleContext(EnumSymbolDefContext,i);
    }
};




languageParser.TypeSpecSemiContext = TypeSpecSemiContext;

languageParser.prototype.typeSpecSemi = function(art, annos) {

    var localctx = new TypeSpecSemiContext(this, this._ctx, this.state, art, annos);
    this.enterRule(localctx, 114, languageParser.RULE_typeSpecSemi);
    var _la = 0; // Token type
    try {
        this.state = 1971;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1781;
            this.typeStruct( localctx.art );
            this.state = 1782;
            this.optionalSemi();
            break;
        case languageParser.T__4:
            this.enterOuterAlt(localctx, 2);
            this.state = 1784;
            this.match(languageParser.T__4);
            this.state = 1969;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,261,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1785;
                this.typeStruct( localctx.art );
                this.state = 1786;
                this.optionalSemi();
                break;

            case 2:
                this.state = 1788;
                this.typeAssociationBase( localctx.art, false );
                this.state = 1792;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,236,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1789;
                    this.typeToMany( localctx.art );
                    break;

                case 2:
                    this.state = 1790;
                    this.typeToOne( localctx.art );
                    break;

                case 3:
                    this.state = 1791;
                    this.simplePath( localctx.art.target, 'artref' );
                    break;

                }
                this.state = 1795;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.T__1 || _la===languageParser.ON) {
                    this.state = 1794;
                    this.typeAssociationCont( localctx.art );
                }

                this.state = 1797;
                this.requiredSemi();
                break;

            case 3:
                this.state = 1804;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.ARRAY:
                    this.state = 1799;
                    localctx.array = this.match(languageParser.ARRAY);
                    this.state = 1800;
                    localctx.of = this.match(languageParser.OF);
                     localctx.art.items = { location: this.tokenLocation( localctx.array, localctx.of ) }; 
                    break;
                case languageParser.MANY:
                    this.state = 1802;
                    localctx.many = this.match(languageParser.MANY);
                     localctx.art.items = { location: this.tokenLocation( localctx.many ) };
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 1850;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,246,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1806;
                    this.typeStruct( localctx.art.items );
                    this.state = 1808;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.NOT || _la===languageParser.NULL) {
                        this.state = 1807;
                        this.nullability( localctx.art.items );
                    }

                    this.state = 1810;
                    this.optionalSemi();
                    break;

                case 2:
                    this.state = 1812;
                    this.typeTypeOf( localctx.art.items );
                    this.state = 1814;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.NOT || _la===languageParser.NULL) {
                        this.state = 1813;
                        this.nullability( localctx.art.items );
                    }

                     this.docComment( localctx.annos ); 
                    this.state = 1820;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7) {
                        this.state = 1817;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 1822;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1823;
                    this.requiredSemi();
                    break;

                case 3:
                    this.state = 1825;
                    this.typeRefOptArgs( localctx.art.items );
                    this.state = 1827;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.NOT || _la===languageParser.NULL) {
                        this.state = 1826;
                        this.nullability( localctx.art.items );
                    }

                     this.docComment( localctx.annos ); 
                    this.state = 1833;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7) {
                        this.state = 1830;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 1835;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1848;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case languageParser.ENUM:
                        this.state = 1836;
                        this.match(languageParser.ENUM);
                        this.state = 1837;
                        this.match(languageParser.T__1);
                         localctx.art.items.enum = Object.create(null); 
                        this.state = 1842;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while(_la===languageParser.T__7 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DESC - 61)) | (1 << (languageParser.ELEMENT - 61)) | (1 << (languageParser.ELSE - 61)) | (1 << (languageParser.END - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.ENUM - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.ESCAPE - 61)) | (1 << (languageParser.EXACT - 61)) | (1 << (languageParser.EXCEPT - 61)) | (1 << (languageParser.EXCLUDING - 61)) | (1 << (languageParser.EXTEND - 61)) | (1 << (languageParser.FIRST - 61)) | (1 << (languageParser.FULL - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)) | (1 << (languageParser.INNER - 93)) | (1 << (languageParser.INTERSECT - 93)) | (1 << (languageParser.INTO - 93)) | (1 << (languageParser.IS - 93)) | (1 << (languageParser.JOIN - 93)) | (1 << (languageParser.LAST - 93)) | (1 << (languageParser.LEADING - 93)) | (1 << (languageParser.LEFT - 93)) | (1 << (languageParser.LIKE - 93)) | (1 << (languageParser.LIMIT - 93)) | (1 << (languageParser.LOCALIZED - 93)) | (1 << (languageParser.MANY - 93)) | (1 << (languageParser.MASKED - 93)) | (1 << (languageParser.MINUS - 93)) | (1 << (languageParser.MINUTE - 93)) | (1 << (languageParser.MIXIN - 93)) | (1 << (languageParser.MONTH - 93)) | (1 << (languageParser.NAMESPACE - 93)) | (1 << (languageParser.NULLS - 93)) | (1 << (languageParser.OFFSET - 93)) | (1 << (languageParser.ONE - 93)) | (1 << (languageParser.OR - 93)) | (1 << (languageParser.ORDER - 93)) | (1 << (languageParser.OUTER - 93)) | (1 << (languageParser.PARAMETERS - 93)) | (1 << (languageParser.PROJECTION - 93)) | (1 << (languageParser.REDIRECTED - 93)) | (1 << (languageParser.RETURNS - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.RIGHT - 125)) | (1 << (languageParser.SECOND - 125)) | (1 << (languageParser.SERVICE - 125)) | (1 << (languageParser.THEN - 125)) | (1 << (languageParser.TRAILING - 125)) | (1 << (languageParser.TO - 125)) | (1 << (languageParser.TYPE - 125)) | (1 << (languageParser.UNION - 125)) | (1 << (languageParser.USING - 125)) | (1 << (languageParser.VIEW - 125)) | (1 << (languageParser.YEAR - 125)) | (1 << (languageParser.Identifier - 125)))) !== 0)) {
                            this.state = 1839;
                            this.enumSymbolDef( localctx.art.items );
                            this.state = 1844;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1845;
                        this.match(languageParser.T__3);
                        this.state = 1846;
                        this.optionalSemi();
                        break;
                    case languageParser.T__0:
                    case languageParser.T__3:
                        this.state = 1847;
                        this.requiredSemi();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    break;

                }
                break;

            case 4:
                this.state = 1852;
                this.typeTypeOf( localctx.art );
                 this.docComment( localctx.annos ); 
                this.state = 1857;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7) {
                    this.state = 1854;
                    this.annotationAssignment_ll1( localctx.annos );
                    this.state = 1859;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1860;
                this.requiredSemi();
                break;

            case 5:
                this.state = 1862;
                localctx.l = this.match(languageParser.LOCALIZED);
                 localctx.art.localized = this.tokenLocation( localctx.l, undefined, true ); 
                this.state = 1864;
                this.typeRefOptArgs( localctx.art );
                 this.docComment( localctx.annos ); 
                this.state = 1869;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7) {
                    this.state = 1866;
                    this.annotationAssignment_ll1( localctx.annos );
                    this.state = 1871;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1872;
                this.requiredSemi();
                break;

            case 6:
                 localctx.art.type = {}; 
                this.state = 1875;
                this.simplePath( localctx.art.type, 'artref' );
                this.state = 1967;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.T__5:
                    this.state = 1876;
                    this.match(languageParser.T__5);
                    this.state = 1877;
                    localctx.head = this.match(languageParser.Number);
                     localctx.art['$'+'typeArgs'] = [ this.numberLiteral( localctx.head ) ]; 
                    this.state = 1885;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__2) {
                        this.state = 1879;
                        this.match(languageParser.T__2);
                         if (this.isStraightBefore(')')) break; 
                        this.state = 1881;
                        localctx.tail = this.match(languageParser.Number);
                         localctx.art['$'+'typeArgs'].push( this.numberLiteral( localctx.tail ) ); 
                        this.state = 1887;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1888;
                    this.match(languageParser.T__6);
                     this.docComment( localctx.annos ); 
                    this.state = 1893;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7) {
                        this.state = 1890;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 1895;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1908;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case languageParser.ENUM:
                        this.state = 1896;
                        this.match(languageParser.ENUM);
                        this.state = 1897;
                        this.match(languageParser.T__1);
                         localctx.art.enum = Object.create(null); 
                        this.state = 1902;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while(_la===languageParser.T__7 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DESC - 61)) | (1 << (languageParser.ELEMENT - 61)) | (1 << (languageParser.ELSE - 61)) | (1 << (languageParser.END - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.ENUM - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.ESCAPE - 61)) | (1 << (languageParser.EXACT - 61)) | (1 << (languageParser.EXCEPT - 61)) | (1 << (languageParser.EXCLUDING - 61)) | (1 << (languageParser.EXTEND - 61)) | (1 << (languageParser.FIRST - 61)) | (1 << (languageParser.FULL - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)) | (1 << (languageParser.INNER - 93)) | (1 << (languageParser.INTERSECT - 93)) | (1 << (languageParser.INTO - 93)) | (1 << (languageParser.IS - 93)) | (1 << (languageParser.JOIN - 93)) | (1 << (languageParser.LAST - 93)) | (1 << (languageParser.LEADING - 93)) | (1 << (languageParser.LEFT - 93)) | (1 << (languageParser.LIKE - 93)) | (1 << (languageParser.LIMIT - 93)) | (1 << (languageParser.LOCALIZED - 93)) | (1 << (languageParser.MANY - 93)) | (1 << (languageParser.MASKED - 93)) | (1 << (languageParser.MINUS - 93)) | (1 << (languageParser.MINUTE - 93)) | (1 << (languageParser.MIXIN - 93)) | (1 << (languageParser.MONTH - 93)) | (1 << (languageParser.NAMESPACE - 93)) | (1 << (languageParser.NULLS - 93)) | (1 << (languageParser.OFFSET - 93)) | (1 << (languageParser.ONE - 93)) | (1 << (languageParser.OR - 93)) | (1 << (languageParser.ORDER - 93)) | (1 << (languageParser.OUTER - 93)) | (1 << (languageParser.PARAMETERS - 93)) | (1 << (languageParser.PROJECTION - 93)) | (1 << (languageParser.REDIRECTED - 93)) | (1 << (languageParser.RETURNS - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.RIGHT - 125)) | (1 << (languageParser.SECOND - 125)) | (1 << (languageParser.SERVICE - 125)) | (1 << (languageParser.THEN - 125)) | (1 << (languageParser.TRAILING - 125)) | (1 << (languageParser.TO - 125)) | (1 << (languageParser.TYPE - 125)) | (1 << (languageParser.UNION - 125)) | (1 << (languageParser.USING - 125)) | (1 << (languageParser.VIEW - 125)) | (1 << (languageParser.YEAR - 125)) | (1 << (languageParser.Identifier - 125)))) !== 0)) {
                            this.state = 1899;
                            this.enumSymbolDef( localctx.art );
                            this.state = 1904;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1905;
                        this.match(languageParser.T__3);
                        this.state = 1906;
                        this.optionalSemi();
                        break;
                    case languageParser.T__0:
                    case languageParser.T__3:
                        this.state = 1907;
                        this.requiredSemi();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    break;
                case languageParser.T__4:
                    this.state = 1910;
                    this.match(languageParser.T__4);
                     localctx.art.type.scope = localctx.art.type.path.length; 
                    this.state = 1912;
                    this.simplePath( localctx.art.type, 'ref');
                     this.docComment( localctx.annos ); 
                    this.state = 1917;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7) {
                        this.state = 1914;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 1919;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1932;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case languageParser.ENUM:
                        this.state = 1920;
                        this.match(languageParser.ENUM);
                        this.state = 1921;
                        this.match(languageParser.T__1);
                         localctx.art.enum = Object.create(null); 
                        this.state = 1926;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while(_la===languageParser.T__7 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DESC - 61)) | (1 << (languageParser.ELEMENT - 61)) | (1 << (languageParser.ELSE - 61)) | (1 << (languageParser.END - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.ENUM - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.ESCAPE - 61)) | (1 << (languageParser.EXACT - 61)) | (1 << (languageParser.EXCEPT - 61)) | (1 << (languageParser.EXCLUDING - 61)) | (1 << (languageParser.EXTEND - 61)) | (1 << (languageParser.FIRST - 61)) | (1 << (languageParser.FULL - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)) | (1 << (languageParser.INNER - 93)) | (1 << (languageParser.INTERSECT - 93)) | (1 << (languageParser.INTO - 93)) | (1 << (languageParser.IS - 93)) | (1 << (languageParser.JOIN - 93)) | (1 << (languageParser.LAST - 93)) | (1 << (languageParser.LEADING - 93)) | (1 << (languageParser.LEFT - 93)) | (1 << (languageParser.LIKE - 93)) | (1 << (languageParser.LIMIT - 93)) | (1 << (languageParser.LOCALIZED - 93)) | (1 << (languageParser.MANY - 93)) | (1 << (languageParser.MASKED - 93)) | (1 << (languageParser.MINUS - 93)) | (1 << (languageParser.MINUTE - 93)) | (1 << (languageParser.MIXIN - 93)) | (1 << (languageParser.MONTH - 93)) | (1 << (languageParser.NAMESPACE - 93)) | (1 << (languageParser.NULLS - 93)) | (1 << (languageParser.OFFSET - 93)) | (1 << (languageParser.ONE - 93)) | (1 << (languageParser.OR - 93)) | (1 << (languageParser.ORDER - 93)) | (1 << (languageParser.OUTER - 93)) | (1 << (languageParser.PARAMETERS - 93)) | (1 << (languageParser.PROJECTION - 93)) | (1 << (languageParser.REDIRECTED - 93)) | (1 << (languageParser.RETURNS - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.RIGHT - 125)) | (1 << (languageParser.SECOND - 125)) | (1 << (languageParser.SERVICE - 125)) | (1 << (languageParser.THEN - 125)) | (1 << (languageParser.TRAILING - 125)) | (1 << (languageParser.TO - 125)) | (1 << (languageParser.TYPE - 125)) | (1 << (languageParser.UNION - 125)) | (1 << (languageParser.USING - 125)) | (1 << (languageParser.VIEW - 125)) | (1 << (languageParser.YEAR - 125)) | (1 << (languageParser.Identifier - 125)))) !== 0)) {
                            this.state = 1923;
                            this.enumSymbolDef( localctx.art );
                            this.state = 1928;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1929;
                        this.match(languageParser.T__3);
                        this.state = 1930;
                        this.optionalSemi();
                        break;
                    case languageParser.T__0:
                    case languageParser.T__3:
                        this.state = 1931;
                        this.requiredSemi();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    break;
                case languageParser.T__0:
                case languageParser.T__3:
                case languageParser.T__7:
                case languageParser.ENUM:
                     this.docComment( localctx.annos ); 
                    this.state = 1938;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7) {
                        this.state = 1935;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 1940;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1953;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case languageParser.ENUM:
                        this.state = 1941;
                        this.match(languageParser.ENUM);
                        this.state = 1942;
                        this.match(languageParser.T__1);
                         localctx.art.enum = Object.create(null); 
                        this.state = 1947;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while(_la===languageParser.T__7 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DESC - 61)) | (1 << (languageParser.ELEMENT - 61)) | (1 << (languageParser.ELSE - 61)) | (1 << (languageParser.END - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.ENUM - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.ESCAPE - 61)) | (1 << (languageParser.EXACT - 61)) | (1 << (languageParser.EXCEPT - 61)) | (1 << (languageParser.EXCLUDING - 61)) | (1 << (languageParser.EXTEND - 61)) | (1 << (languageParser.FIRST - 61)) | (1 << (languageParser.FULL - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)) | (1 << (languageParser.INNER - 93)) | (1 << (languageParser.INTERSECT - 93)) | (1 << (languageParser.INTO - 93)) | (1 << (languageParser.IS - 93)) | (1 << (languageParser.JOIN - 93)) | (1 << (languageParser.LAST - 93)) | (1 << (languageParser.LEADING - 93)) | (1 << (languageParser.LEFT - 93)) | (1 << (languageParser.LIKE - 93)) | (1 << (languageParser.LIMIT - 93)) | (1 << (languageParser.LOCALIZED - 93)) | (1 << (languageParser.MANY - 93)) | (1 << (languageParser.MASKED - 93)) | (1 << (languageParser.MINUS - 93)) | (1 << (languageParser.MINUTE - 93)) | (1 << (languageParser.MIXIN - 93)) | (1 << (languageParser.MONTH - 93)) | (1 << (languageParser.NAMESPACE - 93)) | (1 << (languageParser.NULLS - 93)) | (1 << (languageParser.OFFSET - 93)) | (1 << (languageParser.ONE - 93)) | (1 << (languageParser.OR - 93)) | (1 << (languageParser.ORDER - 93)) | (1 << (languageParser.OUTER - 93)) | (1 << (languageParser.PARAMETERS - 93)) | (1 << (languageParser.PROJECTION - 93)) | (1 << (languageParser.REDIRECTED - 93)) | (1 << (languageParser.RETURNS - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.RIGHT - 125)) | (1 << (languageParser.SECOND - 125)) | (1 << (languageParser.SERVICE - 125)) | (1 << (languageParser.THEN - 125)) | (1 << (languageParser.TRAILING - 125)) | (1 << (languageParser.TO - 125)) | (1 << (languageParser.TYPE - 125)) | (1 << (languageParser.UNION - 125)) | (1 << (languageParser.USING - 125)) | (1 << (languageParser.VIEW - 125)) | (1 << (languageParser.YEAR - 125)) | (1 << (languageParser.Identifier - 125)))) !== 0)) {
                            this.state = 1944;
                            this.enumSymbolDef( localctx.art );
                            this.state = 1949;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1950;
                        this.match(languageParser.T__3);
                        this.state = 1951;
                        this.optionalSemi();
                        break;
                    case languageParser.T__0:
                    case languageParser.T__3:
                        this.state = 1952;
                        this.requiredSemi();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    break;
                case languageParser.T__1:
                case languageParser.T__2:
                     localctx.art.includes = [ localctx.art.type ]; delete localctx.art.type; 
                    this.state = 1961;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__2) {
                        this.state = 1956;
                        this.match(languageParser.T__2);
                         if (this.isStraightBefore('{')) break; 
                        this.state = 1958;
                        this.includeRef( localctx.art );
                        this.state = 1963;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1964;
                    this.typeStruct( localctx.art );
                    this.state = 1965;
                    this.optionalSemi();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 3 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeStructContext(parser, parent, invokingState, art, attachLoc) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeStruct;
    this.art = null
    this.attachLoc = false
    this.art = art || null;
    this.attachLoc = attachLoc || null;
    return this;
}

TypeStructContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeStructContext.prototype.constructor = TypeStructContext;

TypeStructContext.prototype.elementDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementDefContext);
    } else {
        return this.getTypedRuleContext(ElementDefContext,i);
    }
};




languageParser.TypeStructContext = TypeStructContext;

languageParser.prototype.typeStruct = function(art, attachLoc) {

    var localctx = new TypeStructContext(this, this._ctx, this.state, art, attachLoc);
    this.enterRule(localctx, 116, languageParser.RULE_typeStruct);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         localctx.art.elements = Object.create(null); 
        this.state = 1974;
        this.match(languageParser.T__1);
        this.state = 1978;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.BOTH - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.DAY - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENT - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.HOUR - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEADING - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MASKED - 80)) | (1 << (languageParser.MINUS - 80)) | (1 << (languageParser.MINUTE - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.MIXIN - 112)) | (1 << (languageParser.MONTH - 112)) | (1 << (languageParser.NAMESPACE - 112)) | (1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.SECOND - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TRAILING - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.YEAR - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
            this.state = 1975;
            this.elementDef( localctx.art );
            this.state = 1980;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1981;
        this.match(languageParser.T__3);
        this._ctx.stop = this._input.LT(-1);
         if (localctx.attachLoc) this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeCompoStructContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeCompoStruct;
    this.art = null
    this.art = art || null;
    return this;
}

TypeCompoStructContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeCompoStructContext.prototype.constructor = TypeCompoStructContext;

TypeCompoStructContext.prototype.COMPOSITIONofBRACE = function() {
    return this.getToken(languageParser.COMPOSITIONofBRACE, 0);
};

TypeCompoStructContext.prototype.elementDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementDefContext);
    } else {
        return this.getTypedRuleContext(ElementDefContext,i);
    }
};




languageParser.TypeCompoStructContext = TypeCompoStructContext;

languageParser.prototype.typeCompoStruct = function(art) {

    var localctx = new TypeCompoStructContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 118, languageParser.RULE_typeCompoStruct);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         localctx.art.elements = Object.create(null); 
        this.state = 1984;
        this.match(languageParser.COMPOSITIONofBRACE);
        this.state = 1988;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.BOTH - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.DAY - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENT - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.HOUR - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEADING - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MASKED - 80)) | (1 << (languageParser.MINUS - 80)) | (1 << (languageParser.MINUTE - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.MIXIN - 112)) | (1 << (languageParser.MONTH - 112)) | (1 << (languageParser.NAMESPACE - 112)) | (1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.SECOND - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TRAILING - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.YEAR - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
            this.state = 1985;
            this.elementDef( localctx.art );
            this.state = 1990;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1991;
        this.match(languageParser.T__3);
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeArrayContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeArray;
    this.art = null
    this.array = null; // Token
    this.of = null; // Token
    this.many = null; // Token
    this.art = art || null;
    return this;
}

TypeArrayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArrayContext.prototype.constructor = TypeArrayContext;

TypeArrayContext.prototype.typeStruct = function() {
    return this.getTypedRuleContext(TypeStructContext,0);
};

TypeArrayContext.prototype.typeTypeOf = function() {
    return this.getTypedRuleContext(TypeTypeOfContext,0);
};

TypeArrayContext.prototype.typeRefOptArgs = function() {
    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
};

TypeArrayContext.prototype.ARRAY = function() {
    return this.getToken(languageParser.ARRAY, 0);
};

TypeArrayContext.prototype.OF = function() {
    return this.getToken(languageParser.OF, 0);
};

TypeArrayContext.prototype.MANY = function() {
    return this.getToken(languageParser.MANY, 0);
};

TypeArrayContext.prototype.nullability = function() {
    return this.getTypedRuleContext(NullabilityContext,0);
};

TypeArrayContext.prototype.ENUM = function() {
    return this.getToken(languageParser.ENUM, 0);
};

TypeArrayContext.prototype.enumSymbolDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumSymbolDefContext);
    } else {
        return this.getTypedRuleContext(EnumSymbolDefContext,i);
    }
};




languageParser.TypeArrayContext = TypeArrayContext;

languageParser.prototype.typeArray = function(art) {

    var localctx = new TypeArrayContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 120, languageParser.RULE_typeArray);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1998;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.ARRAY:
            this.state = 1993;
            localctx.array = this.match(languageParser.ARRAY);
            this.state = 1994;
            localctx.of = this.match(languageParser.OF);
             localctx.art.items = { location: this.tokenLocation( localctx.array, localctx.of ) }; 
            break;
        case languageParser.MANY:
            this.state = 1996;
            localctx.many = this.match(languageParser.MANY);
             localctx.art.items = { location: this.tokenLocation( localctx.many ) };
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2024;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,271,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2000;
            this.typeStruct( localctx.art.items );
            this.state = 2002;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.NOT || _la===languageParser.NULL) {
                this.state = 2001;
                this.nullability( localctx.art.items );
            }

            break;

        case 2:
            this.state = 2004;
            this.typeTypeOf( localctx.art.items );
            this.state = 2006;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.NOT || _la===languageParser.NULL) {
                this.state = 2005;
                this.nullability( localctx.art.items );
            }

            break;

        case 3:
            this.state = 2008;
            this.typeRefOptArgs( localctx.art.items );
            this.state = 2010;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.NOT || _la===languageParser.NULL) {
                this.state = 2009;
                this.nullability( localctx.art.items );
            }

            this.state = 2022;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.ENUM) {
                this.state = 2012;
                this.match(languageParser.ENUM);
                this.state = 2013;
                this.match(languageParser.T__1);
                 localctx.art.items.enum = Object.create(null); 
                this.state = 2018;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DESC - 61)) | (1 << (languageParser.ELEMENT - 61)) | (1 << (languageParser.ELSE - 61)) | (1 << (languageParser.END - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.ENUM - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.ESCAPE - 61)) | (1 << (languageParser.EXACT - 61)) | (1 << (languageParser.EXCEPT - 61)) | (1 << (languageParser.EXCLUDING - 61)) | (1 << (languageParser.EXTEND - 61)) | (1 << (languageParser.FIRST - 61)) | (1 << (languageParser.FULL - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)) | (1 << (languageParser.INNER - 93)) | (1 << (languageParser.INTERSECT - 93)) | (1 << (languageParser.INTO - 93)) | (1 << (languageParser.IS - 93)) | (1 << (languageParser.JOIN - 93)) | (1 << (languageParser.LAST - 93)) | (1 << (languageParser.LEADING - 93)) | (1 << (languageParser.LEFT - 93)) | (1 << (languageParser.LIKE - 93)) | (1 << (languageParser.LIMIT - 93)) | (1 << (languageParser.LOCALIZED - 93)) | (1 << (languageParser.MANY - 93)) | (1 << (languageParser.MASKED - 93)) | (1 << (languageParser.MINUS - 93)) | (1 << (languageParser.MINUTE - 93)) | (1 << (languageParser.MIXIN - 93)) | (1 << (languageParser.MONTH - 93)) | (1 << (languageParser.NAMESPACE - 93)) | (1 << (languageParser.NULLS - 93)) | (1 << (languageParser.OFFSET - 93)) | (1 << (languageParser.ONE - 93)) | (1 << (languageParser.OR - 93)) | (1 << (languageParser.ORDER - 93)) | (1 << (languageParser.OUTER - 93)) | (1 << (languageParser.PARAMETERS - 93)) | (1 << (languageParser.PROJECTION - 93)) | (1 << (languageParser.REDIRECTED - 93)) | (1 << (languageParser.RETURNS - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.RIGHT - 125)) | (1 << (languageParser.SECOND - 125)) | (1 << (languageParser.SERVICE - 125)) | (1 << (languageParser.THEN - 125)) | (1 << (languageParser.TRAILING - 125)) | (1 << (languageParser.TO - 125)) | (1 << (languageParser.TYPE - 125)) | (1 << (languageParser.UNION - 125)) | (1 << (languageParser.USING - 125)) | (1 << (languageParser.VIEW - 125)) | (1 << (languageParser.YEAR - 125)) | (1 << (languageParser.Identifier - 125)))) !== 0)) {
                    this.state = 2015;
                    this.enumSymbolDef( localctx.art.items );
                    this.state = 2020;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2021;
                this.match(languageParser.T__3);
            }

            break;

        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeAssociationBaseContext(parser, parent, invokingState, art, handleTypeCompo) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeAssociationBase;
    this.art = null
    this.handleTypeCompo = null
    this.assoc = null; // Token
    this.compo = null; // Token
    this.art = art || null;
    this.handleTypeCompo = handleTypeCompo || null;
    return this;
}

TypeAssociationBaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeAssociationBaseContext.prototype.constructor = TypeAssociationBaseContext;

TypeAssociationBaseContext.prototype.TO = function() {
    return this.getToken(languageParser.TO, 0);
};

TypeAssociationBaseContext.prototype.OF = function() {
    return this.getToken(languageParser.OF, 0);
};

TypeAssociationBaseContext.prototype.ASSOCIATION = function() {
    return this.getToken(languageParser.ASSOCIATION, 0);
};

TypeAssociationBaseContext.prototype.COMPOSITION = function() {
    return this.getToken(languageParser.COMPOSITION, 0);
};

TypeAssociationBaseContext.prototype.cardinality = function() {
    return this.getTypedRuleContext(CardinalityContext,0);
};




languageParser.TypeAssociationBaseContext = TypeAssociationBaseContext;

languageParser.prototype.typeAssociationBase = function(art, handleTypeCompo) {

    var localctx = new TypeAssociationBaseContext(this, this._ctx, this.state, art, handleTypeCompo);
    this.enterRule(localctx, 122, languageParser.RULE_typeAssociationBase);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2038;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.ASSOCIATION:
            this.state = 2026;
            localctx.assoc = this.match(languageParser.ASSOCIATION);
            this.state = 2028;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__12) {
                this.state = 2027;
                this.cardinality(localctx.art);
            }

            this.state = 2030;
            this.match(languageParser.TO);
            {
                    let location = this.tokenLocation(localctx.assoc);
                    localctx.art.type = { path: [{ id: 'cds.Association', location }], scope: 'global', location };
                    this.handleComposition( localctx.art.cardinality, false );
                  }
            break;
        case languageParser.COMPOSITION:
            this.state = 2032;
            localctx.compo = this.match(languageParser.COMPOSITION);
            this.state = 2034;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__12) {
                this.state = 2033;
                this.cardinality(localctx.art);
            }

            this.state = 2036;
            this.match(languageParser.OF);
            {
                    let location = this.tokenLocation(localctx.compo);
                    localctx.art.type = { path: [{ id: 'cds.Composition', location }], scope: 'global', location };
                    this.handleComposition( localctx.art.cardinality, handleTypeCompo );
                  }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
         localctx.art.target = {}; 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeAssociationContContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeAssociationCont;
    this.art = null
    this.cond = null; // ConditionContext
    this.art = art || null;
    return this;
}

TypeAssociationContContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeAssociationContContext.prototype.constructor = TypeAssociationContContext;

TypeAssociationContContext.prototype.ON = function() {
    return this.getToken(languageParser.ON, 0);
};

TypeAssociationContContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

TypeAssociationContContext.prototype.foreignKey = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ForeignKeyContext);
    } else {
        return this.getTypedRuleContext(ForeignKeyContext,i);
    }
};




languageParser.TypeAssociationContContext = TypeAssociationContContext;

languageParser.prototype.typeAssociationCont = function(art) {

    var localctx = new TypeAssociationContContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 124, languageParser.RULE_typeAssociationCont);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2060;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.state = 2042;
            this.match(languageParser.T__1);
             this.addDef( localctx.art, 'foreignKeys' ); 
            this.state = 2053;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DESC - 61)) | (1 << (languageParser.ELEMENT - 61)) | (1 << (languageParser.ELSE - 61)) | (1 << (languageParser.END - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.ENUM - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.ESCAPE - 61)) | (1 << (languageParser.EXACT - 61)) | (1 << (languageParser.EXCEPT - 61)) | (1 << (languageParser.EXCLUDING - 61)) | (1 << (languageParser.EXTEND - 61)) | (1 << (languageParser.FIRST - 61)) | (1 << (languageParser.FULL - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)) | (1 << (languageParser.INNER - 93)) | (1 << (languageParser.INTERSECT - 93)) | (1 << (languageParser.INTO - 93)) | (1 << (languageParser.IS - 93)) | (1 << (languageParser.JOIN - 93)) | (1 << (languageParser.LAST - 93)) | (1 << (languageParser.LEADING - 93)) | (1 << (languageParser.LEFT - 93)) | (1 << (languageParser.LIKE - 93)) | (1 << (languageParser.LIMIT - 93)) | (1 << (languageParser.LOCALIZED - 93)) | (1 << (languageParser.MANY - 93)) | (1 << (languageParser.MASKED - 93)) | (1 << (languageParser.MINUS - 93)) | (1 << (languageParser.MINUTE - 93)) | (1 << (languageParser.MIXIN - 93)) | (1 << (languageParser.MONTH - 93)) | (1 << (languageParser.NAMESPACE - 93)) | (1 << (languageParser.NULLS - 93)) | (1 << (languageParser.OFFSET - 93)) | (1 << (languageParser.ONE - 93)) | (1 << (languageParser.OR - 93)) | (1 << (languageParser.ORDER - 93)) | (1 << (languageParser.OUTER - 93)) | (1 << (languageParser.PARAMETERS - 93)) | (1 << (languageParser.PROJECTION - 93)) | (1 << (languageParser.REDIRECTED - 93)) | (1 << (languageParser.RETURNS - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.RIGHT - 125)) | (1 << (languageParser.SECOND - 125)) | (1 << (languageParser.SERVICE - 125)) | (1 << (languageParser.THEN - 125)) | (1 << (languageParser.TRAILING - 125)) | (1 << (languageParser.TO - 125)) | (1 << (languageParser.TYPE - 125)) | (1 << (languageParser.UNION - 125)) | (1 << (languageParser.USING - 125)) | (1 << (languageParser.VIEW - 125)) | (1 << (languageParser.YEAR - 125)) | (1 << (languageParser.Identifier - 125)))) !== 0)) {
                this.state = 2044;
                this.foreignKey( localctx.art );
                this.state = 2050;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__2) {
                    this.state = 2045;
                    this.match(languageParser.T__2);
                     if (this.isStraightBefore("}")) break; 
                    this.state = 2047;
                    this.foreignKey( localctx.art );
                    this.state = 2052;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 2055;
            this.match(languageParser.T__3);
            break;
        case languageParser.ON:
            this.state = 2056;
            this.match(languageParser.ON);
            this.state = 2057;
            localctx.cond = this.condition();
             localctx.art.on=localctx.cond.cond; 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeAssociationElementContContext(parser, parent, invokingState, art, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeAssociationElementCont;
    this.art = null
    this.annos = null
    this.cond = null; // ConditionContext
    this.art = art || null;
    this.annos = annos || null;
    return this;
}

TypeAssociationElementContContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeAssociationElementContContext.prototype.constructor = TypeAssociationElementContContext;

TypeAssociationElementContContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

TypeAssociationElementContContext.prototype.ON = function() {
    return this.getToken(languageParser.ON, 0);
};

TypeAssociationElementContContext.prototype.nullability = function() {
    return this.getTypedRuleContext(NullabilityContext,0);
};

TypeAssociationElementContContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

TypeAssociationElementContContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

TypeAssociationElementContContext.prototype.foreignKey = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ForeignKeyContext);
    } else {
        return this.getTypedRuleContext(ForeignKeyContext,i);
    }
};




languageParser.TypeAssociationElementContContext = TypeAssociationElementContContext;

languageParser.prototype.typeAssociationElementCont = function(art, annos) {

    var localctx = new TypeAssociationElementContContext(this, this._ctx, this.state, art, annos);
    this.enterRule(localctx, 126, languageParser.RULE_typeAssociationElementCont);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2084;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case languageParser.T__1:
        	this.state = 2062;
        	this.match(languageParser.T__1);
        	 this.addDef( localctx.art, 'foreignKeys' ); 
        	this.state = 2073;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DESC - 61)) | (1 << (languageParser.ELEMENT - 61)) | (1 << (languageParser.ELSE - 61)) | (1 << (languageParser.END - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.ENUM - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.ESCAPE - 61)) | (1 << (languageParser.EXACT - 61)) | (1 << (languageParser.EXCEPT - 61)) | (1 << (languageParser.EXCLUDING - 61)) | (1 << (languageParser.EXTEND - 61)) | (1 << (languageParser.FIRST - 61)) | (1 << (languageParser.FULL - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)) | (1 << (languageParser.INNER - 93)) | (1 << (languageParser.INTERSECT - 93)) | (1 << (languageParser.INTO - 93)) | (1 << (languageParser.IS - 93)) | (1 << (languageParser.JOIN - 93)) | (1 << (languageParser.LAST - 93)) | (1 << (languageParser.LEADING - 93)) | (1 << (languageParser.LEFT - 93)) | (1 << (languageParser.LIKE - 93)) | (1 << (languageParser.LIMIT - 93)) | (1 << (languageParser.LOCALIZED - 93)) | (1 << (languageParser.MANY - 93)) | (1 << (languageParser.MASKED - 93)) | (1 << (languageParser.MINUS - 93)) | (1 << (languageParser.MINUTE - 93)) | (1 << (languageParser.MIXIN - 93)) | (1 << (languageParser.MONTH - 93)) | (1 << (languageParser.NAMESPACE - 93)) | (1 << (languageParser.NULLS - 93)) | (1 << (languageParser.OFFSET - 93)) | (1 << (languageParser.ONE - 93)) | (1 << (languageParser.OR - 93)) | (1 << (languageParser.ORDER - 93)) | (1 << (languageParser.OUTER - 93)) | (1 << (languageParser.PARAMETERS - 93)) | (1 << (languageParser.PROJECTION - 93)) | (1 << (languageParser.REDIRECTED - 93)) | (1 << (languageParser.RETURNS - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.RIGHT - 125)) | (1 << (languageParser.SECOND - 125)) | (1 << (languageParser.SERVICE - 125)) | (1 << (languageParser.THEN - 125)) | (1 << (languageParser.TRAILING - 125)) | (1 << (languageParser.TO - 125)) | (1 << (languageParser.TYPE - 125)) | (1 << (languageParser.UNION - 125)) | (1 << (languageParser.USING - 125)) | (1 << (languageParser.VIEW - 125)) | (1 << (languageParser.YEAR - 125)) | (1 << (languageParser.Identifier - 125)))) !== 0)) {
        	    this.state = 2064;
        	    this.foreignKey( localctx.art );
        	    this.state = 2070;
        	    this._errHandler.sync(this);
        	    _la = this._input.LA(1);
        	    while(_la===languageParser.T__2) {
        	        this.state = 2065;
        	        this.match(languageParser.T__2);
        	         if (this.isStraightBefore("}")) break; 
        	        this.state = 2067;
        	        this.foreignKey( localctx.art );
        	        this.state = 2072;
        	        this._errHandler.sync(this);
        	        _la = this._input.LA(1);
        	    }
        	}

        	this.state = 2075;
        	this.match(languageParser.T__3);
        	this.state = 2077;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(_la===languageParser.NOT || _la===languageParser.NULL) {
        	    this.state = 2076;
        	    this.nullability( localctx.art );
        	}

        	break;
        case languageParser.ON:
        	this.state = 2079;
        	this.match(languageParser.ON);
        	this.state = 2080;
        	localctx.cond = this.condition();
        	 localctx.art.on=localctx.cond.cond; 
        	break;
        case languageParser.NOT:
        case languageParser.NULL:
        	this.state = 2083;
        	this.nullability( localctx.art );
        	break;
        case languageParser.T__0:
        case languageParser.T__3:
        case languageParser.T__7:
        	break;
        default:
        	break;
        }
         this.docComment( localctx.annos ); 
        this.state = 2090;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 2087;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 2092;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2093;
        this.requiredSemi();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeToOneContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeToOne;
    this.art = null
    this.one = null; // Token
    this.art = art || null;
    return this;
}

TypeToOneContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeToOneContext.prototype.constructor = TypeToOneContext;

TypeToOneContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

TypeToOneContext.prototype.ONE = function() {
    return this.getToken(languageParser.ONE, 0);
};




languageParser.TypeToOneContext = TypeToOneContext;

languageParser.prototype.typeToOne = function(art) {

    var localctx = new TypeToOneContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 128, languageParser.RULE_typeToOne);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2095;
        localctx.one = this.match(languageParser.ONE);
         this.setMaxCardinality( localctx.art, localctx.one, this.numberLiteral( localctx.one, null, '1' ) ); 
        this.state = 2097;
        this.simplePath( localctx.art.target, 'artref' );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeToManyContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeToMany;
    this.art = null
    this.many = null; // Token
    this.art = art || null;
    return this;
}

TypeToManyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeToManyContext.prototype.constructor = TypeToManyContext;

TypeToManyContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

TypeToManyContext.prototype.MANY = function() {
    return this.getToken(languageParser.MANY, 0);
};




languageParser.TypeToManyContext = TypeToManyContext;

languageParser.prototype.typeToMany = function(art) {

    var localctx = new TypeToManyContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 130, languageParser.RULE_typeToMany);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2099;
        localctx.many = this.match(languageParser.MANY);
         this.setMaxCardinality( localctx.art, localctx.many, { literal: 'string', val: '*' } ); 
        this.state = 2101;
        this.simplePath( localctx.art.target, 'artref' );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CardinalityContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_cardinality;
    this.art = null
    this.card = {}
    this.lbrack = null; // Token
    this.srcMax = null; // Token
    this.srcMaxStar = null; // Token
    this.trgMin = null; // Token
    this.trgMax = null; // Token
    this.trgMaxStar = null; // Token
    this.art = art || null;
    return this;
}

CardinalityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CardinalityContext.prototype.constructor = CardinalityContext;

CardinalityContext.prototype.Number = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.Number);
    } else {
        return this.getToken(languageParser.Number, i);
    }
};





languageParser.CardinalityContext = CardinalityContext;

languageParser.prototype.cardinality = function(art) {

    var localctx = new CardinalityContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 132, languageParser.RULE_cardinality);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2103;
        localctx.lbrack = this.match(languageParser.T__12);
         localctx.card.targetMax = { literal: 'string', val: '*',
                                  location: this.tokenLocation(localctx.lbrack) }; 
        this.state = 2124;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__11 || _la===languageParser.Number) {
            this.state = 2111;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,283,this._ctx);
            if(la_===1) {
                this.state = 2105;
                localctx.srcMax = this.match(languageParser.Number);
                this.state = 2106;
                this.match(languageParser.T__2);
                 localctx.card.sourceMax = this.numberLiteral( localctx.srcMax ); 

            } else if(la_===2) {
                this.state = 2108;
                localctx.srcMaxStar = this.match(languageParser.T__11);
                this.state = 2109;
                this.match(languageParser.T__2);
                 localctx.card.sourceMax = { literal: 'string', val: '*',
                                              location: this.tokenLocation(localctx.srcMaxStar) }; 

            }
            this.state = 2116;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,284,this._ctx);
            if(la_===1) {
                this.state = 2113;
                localctx.trgMin = this.match(languageParser.Number);
                this.state = 2114;
                this.match(languageParser.T__13);
                 localctx.card.targetMin = this.numberLiteral( localctx.trgMin ); 

            }
            this.state = 2122;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.Number:
                this.state = 2118;
                localctx.trgMax = this.match(languageParser.Number);
                 localctx.card.targetMax = this.numberLiteral( localctx.trgMax ); 
                break;
            case languageParser.T__11:
                this.state = 2120;
                localctx.trgMaxStar = this.match(languageParser.T__11);
                 localctx.card.targetMax = { literal: 'string', val: '*',
                                              location: this.tokenLocation(localctx.trgMaxStar) }; 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
        }

        this.state = 2126;
        this.match(languageParser.T__14);
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 2 */ localctx.art.cardinality = this.attachLocation(localctx.card); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForeignKeyContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_foreignKey;
    this.outer = null
    this.art = {}
    this.elem = {}
    this.name = null; // IdentContext
    this.outer = outer || null;
    return this;
}

ForeignKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForeignKeyContext.prototype.constructor = ForeignKeyContext;

ForeignKeyContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ForeignKeyContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

ForeignKeyContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};




languageParser.ForeignKeyContext = ForeignKeyContext;

languageParser.prototype.foreignKey = function(outer) {

    var localctx = new ForeignKeyContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 134, languageParser.RULE_foreignKey);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2128;
        this.simplePath( localctx.elem, 'ref' );
        this.state = 2131;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.AS) {
            this.state = 2129;
            this.match(languageParser.AS);
            this.state = 2130;
            localctx.name = this.ident('Key');
        }

         localctx.art =  this.addDef( localctx.outer, 'foreignKeys', 'key', (localctx.name) ? localctx.name.id : localctx.elem.path,
                                  undefined, { targetElement: localctx.elem } ) 
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeTypeOfContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeTypeOf;
    this.art = null
    this._sync = 'nop'
    this.art = art || null;
    return this;
}

TypeTypeOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeTypeOfContext.prototype.constructor = TypeTypeOfContext;

TypeTypeOfContext.prototype.TYPE = function() {
    return this.getToken(languageParser.TYPE, 0);
};

TypeTypeOfContext.prototype.OF = function() {
    return this.getToken(languageParser.OF, 0);
};

TypeTypeOfContext.prototype.simplePath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SimplePathContext);
    } else {
        return this.getTypedRuleContext(SimplePathContext,i);
    }
};




languageParser.TypeTypeOfContext = TypeTypeOfContext;

languageParser.prototype.typeTypeOf = function(art) {

    var localctx = new TypeTypeOfContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 136, languageParser.RULE_typeTypeOf);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2135;
        this.match(languageParser.TYPE);
        this.state = 2136;
        this.match(languageParser.OF);
         localctx.art.type = { scope: 'typeOf' }; 
        this.state = 2138;
        this.simplePath( localctx.art.type, 'ref' );
        this.state = 2142;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__4) {
            this.state = 2139;
            this.match(languageParser.T__4);
             localctx.art.type.scope = localctx.art.type.path.length; 
            this.state = 2141;
            this.simplePath( localctx.art.type, 'ref');
        }

        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art.type); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeRefOptArgsContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeRefOptArgs;
    this.art = null
    this.head = null; // Token
    this.tail = null; // Token
    this.art = art || null;
    return this;
}

TypeRefOptArgsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeRefOptArgsContext.prototype.constructor = TypeRefOptArgsContext;

TypeRefOptArgsContext.prototype.simplePath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SimplePathContext);
    } else {
        return this.getTypedRuleContext(SimplePathContext,i);
    }
};

TypeRefOptArgsContext.prototype.Number = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.Number);
    } else {
        return this.getToken(languageParser.Number, i);
    }
};





languageParser.TypeRefOptArgsContext = TypeRefOptArgsContext;

languageParser.prototype.typeRefOptArgs = function(art) {

    var localctx = new TypeRefOptArgsContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 138, languageParser.RULE_typeRefOptArgs);
     localctx.art.type = {}; 
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2144;
        this.simplePath( localctx.art.type, 'artref' );
        this.state = 2161;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case languageParser.T__5:
        	this.state = 2145;
        	this.match(languageParser.T__5);
        	this.state = 2146;
        	localctx.head = this.match(languageParser.Number);
        	 localctx.art['$'+'typeArgs'] = [ this.numberLiteral( localctx.head ) ]; 
        	this.state = 2154;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	while(_la===languageParser.T__2) {
        	    this.state = 2148;
        	    this.match(languageParser.T__2);
        	     if (this.isStraightBefore(')')) break; 
        	    this.state = 2150;
        	    localctx.tail = this.match(languageParser.Number);
        	     localctx.art['$'+'typeArgs'].push( this.numberLiteral( localctx.tail ) ); 
        	    this.state = 2156;
        	    this._errHandler.sync(this);
        	    _la = this._input.LA(1);
        	}
        	this.state = 2157;
        	this.match(languageParser.T__6);
        	break;
        case languageParser.T__4:
        	this.state = 2158;
        	this.match(languageParser.T__4);
        	 localctx.art.type.scope = localctx.art.type.path.length; 
        	this.state = 2160;
        	this.simplePath( localctx.art.type, 'ref');
        	break;
        case languageParser.T__0:
        case languageParser.T__2:
        case languageParser.T__3:
        case languageParser.T__6:
        case languageParser.T__7:
        case languageParser.T__8:
        case languageParser.AS:
        case languageParser.FROM:
        case languageParser.NOT:
        case languageParser.NULL:
        case languageParser.DEFAULT:
        case languageParser.ENUM:
        	break;
        default:
        	break;
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_queryExpression;
    this.query = null
    this.qt1 = null; // QueryTermContext
    this.op = null; // Token
    this.q = null; // Token
    this.qt = null; // QueryTermContext
    this.ob = null; // OrderByClauseContext
    this.lc = null; // LimitClauseContext
    return this;
}

QueryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryExpressionContext.prototype.constructor = QueryExpressionContext;

QueryExpressionContext.prototype.queryTerm = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QueryTermContext);
    } else {
        return this.getTypedRuleContext(QueryTermContext,i);
    }
};

QueryExpressionContext.prototype.orderByClause = function() {
    return this.getTypedRuleContext(OrderByClauseContext,0);
};

QueryExpressionContext.prototype.limitClause = function() {
    return this.getTypedRuleContext(LimitClauseContext,0);
};

QueryExpressionContext.prototype.UNION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.UNION);
    } else {
        return this.getToken(languageParser.UNION, i);
    }
};


QueryExpressionContext.prototype.EXCEPT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.EXCEPT);
    } else {
        return this.getToken(languageParser.EXCEPT, i);
    }
};


QueryExpressionContext.prototype.MINUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.MINUS);
    } else {
        return this.getToken(languageParser.MINUS, i);
    }
};


QueryExpressionContext.prototype.DISTINCT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.DISTINCT);
    } else {
        return this.getToken(languageParser.DISTINCT, i);
    }
};


QueryExpressionContext.prototype.ALL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.ALL);
    } else {
        return this.getToken(languageParser.ALL, i);
    }
};





languageParser.QueryExpressionContext = QueryExpressionContext;

languageParser.prototype.queryExpression = function() {

    var localctx = new QueryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, languageParser.RULE_queryExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2163;
        localctx.qt1 = this.queryTerm();
         localctx.query =  localctx.qt1.query 
        this.state = 2184;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.EXCEPT || _la===languageParser.MINUS || _la===languageParser.UNION) {
            this.state = 2177;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.UNION:
                this.state = 2165;
                localctx.op = this.match(languageParser.UNION);
                this.state = 2167;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.ALL || _la===languageParser.DISTINCT) {
                    this.state = 2166;
                    localctx.q = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===languageParser.ALL || _la===languageParser.DISTINCT)) {
                        localctx.q = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                break;
            case languageParser.EXCEPT:
                this.state = 2169;
                localctx.op = this.match(languageParser.EXCEPT);
                this.state = 2171;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.DISTINCT) {
                    this.state = 2170;
                    localctx.q = this.match(languageParser.DISTINCT);
                }

                break;
            case languageParser.MINUS:
                this.state = 2173;
                localctx.op = this.match(languageParser.MINUS);
                this.state = 2175;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.DISTINCT) {
                    this.state = 2174;
                    localctx.q = this.match(languageParser.DISTINCT);
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2179;
            localctx.qt = this.queryTerm();
             localctx.query =  this.leftAssocBinaryOp( localctx.query, localctx.op, localctx.q, localctx.qt.query ); localctx.q = null; 
            this.state = 2186;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2190;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.ORDER) {
            this.state = 2187;
            localctx.ob = this.orderByClause( localctx.query );
             localctx.query =  localctx.ob.query 
        }

        this.state = 2195;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.LIMIT) {
            this.state = 2192;
            localctx.lc = this.limitClause( localctx.query );
             localctx.query =  localctx.lc.query 
        }

        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.query); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OrderByClauseContext(parser, parent, invokingState, inQuery) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_orderByClause;
    this.inQuery = null
    this.query = null
    this.ob1 = null; // OrderBySpecContext
    this.obn = null; // OrderBySpecContext
    this.inQuery = inQuery || null;
    return this;
}

OrderByClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderByClauseContext.prototype.constructor = OrderByClauseContext;

OrderByClauseContext.prototype.ORDER = function() {
    return this.getToken(languageParser.ORDER, 0);
};

OrderByClauseContext.prototype.BY = function() {
    return this.getToken(languageParser.BY, 0);
};

OrderByClauseContext.prototype.orderBySpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OrderBySpecContext);
    } else {
        return this.getTypedRuleContext(OrderBySpecContext,i);
    }
};




languageParser.OrderByClauseContext = OrderByClauseContext;

languageParser.prototype.orderByClause = function(inQuery) {

    var localctx = new OrderByClauseContext(this, this._ctx, this.state, inQuery);
    this.enterRule(localctx, 142, languageParser.RULE_orderByClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2197;
        this.match(languageParser.ORDER);
        this.state = 2198;
        this.match(languageParser.BY);
         localctx.query =  this.unaryOpForParens( localctx.inQuery, '$'+'query' ) 
        this.state = 2200;
        localctx.ob1 = this.orderBySpec();
         localctx.query.orderBy = [ localctx.ob1.ob ]; 
        this.state = 2208;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__2) {
            this.state = 2202;
            this.match(languageParser.T__2);
            this.state = 2203;
            localctx.obn = this.orderBySpec();
             localctx.query.orderBy.push( localctx.obn.ob ); 
            this.state = 2210;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LimitClauseContext(parser, parent, invokingState, inQuery) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_limitClause;
    this.inQuery = null
    this.query = null
    this.limkw = null; // Token
    this.lim = null; // Token
    this.limnull = null; // Token
    this.off = null; // Token
    this.inQuery = inQuery || null;
    return this;
}

LimitClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitClauseContext.prototype.constructor = LimitClauseContext;

LimitClauseContext.prototype.LIMIT = function() {
    return this.getToken(languageParser.LIMIT, 0);
};

LimitClauseContext.prototype.Number = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.Number);
    } else {
        return this.getToken(languageParser.Number, i);
    }
};


LimitClauseContext.prototype.NULL = function() {
    return this.getToken(languageParser.NULL, 0);
};

LimitClauseContext.prototype.OFFSET = function() {
    return this.getToken(languageParser.OFFSET, 0);
};




languageParser.LimitClauseContext = LimitClauseContext;

languageParser.prototype.limitClause = function(inQuery) {

    var localctx = new LimitClauseContext(this, this._ctx, this.state, inQuery);
    this.enterRule(localctx, 144, languageParser.RULE_limitClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2211;
        localctx.limkw = this.match(languageParser.LIMIT);
         localctx.query =  this.unaryOpForParens( localctx.inQuery, '$'+'query' ) 
        this.state = 2217;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.Number:
            this.state = 2213;
            localctx.lim = this.match(languageParser.Number);
             localctx.query.limit = { rows: this.numberLiteral( localctx.lim, '' ) }; 
            break;
        case languageParser.NULL:
            this.state = 2215;
            localctx.limnull = this.match(languageParser.NULL);
             localctx.query.limit = { rows: {
                    literal: 'null', val: null, location: this.tokenLocation(localctx.limnull) } }; 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2222;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.OFFSET) {
            this.state = 2219;
            this.match(languageParser.OFFSET);
            this.state = 2220;
            localctx.off = this.match(languageParser.Number);
             localctx.query.limit.offset = this.numberLiteral( localctx.off ); 
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OrderBySpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_orderBySpec;
    this.ob = null
    this.e = null; // ExpressionContext
    this.asc = null; // Token
    this.desc = null; // Token
    this.nb = null; // Token
    this.ne = null; // Token
    return this;
}

OrderBySpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderBySpecContext.prototype.constructor = OrderBySpecContext;

OrderBySpecContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

OrderBySpecContext.prototype.ASC = function() {
    return this.getToken(languageParser.ASC, 0);
};

OrderBySpecContext.prototype.DESC = function() {
    return this.getToken(languageParser.DESC, 0);
};

OrderBySpecContext.prototype.NULLS = function() {
    return this.getToken(languageParser.NULLS, 0);
};

OrderBySpecContext.prototype.FIRST = function() {
    return this.getToken(languageParser.FIRST, 0);
};

OrderBySpecContext.prototype.LAST = function() {
    return this.getToken(languageParser.LAST, 0);
};




languageParser.OrderBySpecContext = OrderBySpecContext;

languageParser.prototype.orderBySpec = function() {

    var localctx = new OrderBySpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, languageParser.RULE_orderBySpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2224;
        localctx.e = this.expression();
         localctx.ob =  localctx.e.expr 
        this.state = 2230;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case languageParser.ASC:
        	this.state = 2226;
        	localctx.asc = this.match(languageParser.ASC);
        	 localctx.ob.sort = this.tokenLocation( localctx.asc, undefined, 'asc' ); 
        	break;
        case languageParser.DESC:
        	this.state = 2228;
        	localctx.desc = this.match(languageParser.DESC);
        	 localctx.ob.sort = this.tokenLocation( localctx.desc, undefined, 'desc' ); 
        	break;
        case languageParser.EOF:
        case languageParser.T__0:
        case languageParser.T__2:
        case languageParser.T__3:
        case languageParser.T__6:
        case languageParser.T__7:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ASPECT:
        case languageParser.CONTEXT:
        case languageParser.DEFINE:
        case languageParser.ENTITY:
        case languageParser.EVENT:
        case languageParser.EXTEND:
        case languageParser.FUNCTION:
        case languageParser.LIMIT:
        case languageParser.NULLS:
        case languageParser.SERVICE:
        case languageParser.TYPE:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.HideAlternatives:
        	break;
        default:
        	break;
        }
        this.state = 2235;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.NULLS) {
            this.state = 2232;
            localctx.nb = this.match(languageParser.NULLS);
            this.state = 2233;
            localctx.ne = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===languageParser.FIRST || _la===languageParser.LAST)) {
                localctx.ne = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
             localctx.ob.nulls = this.tokenLocation( localctx.nb, localctx.ne, (localctx.ne===null ? null : localctx.ne.text).toLowerCase() ); 
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_queryTerm;
    this.query = null
    this.qt1 = null; // QueryPrimaryContext
    this.intersect = null; // Token
    this.quantifier = null; // Token
    this.qt = null; // QueryPrimaryContext
    return this;
}

QueryTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryTermContext.prototype.constructor = QueryTermContext;

QueryTermContext.prototype.queryPrimary = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QueryPrimaryContext);
    } else {
        return this.getTypedRuleContext(QueryPrimaryContext,i);
    }
};

QueryTermContext.prototype.INTERSECT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.INTERSECT);
    } else {
        return this.getToken(languageParser.INTERSECT, i);
    }
};


QueryTermContext.prototype.DISTINCT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.DISTINCT);
    } else {
        return this.getToken(languageParser.DISTINCT, i);
    }
};





languageParser.QueryTermContext = QueryTermContext;

languageParser.prototype.queryTerm = function() {

    var localctx = new QueryTermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, languageParser.RULE_queryTerm);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2237;
        localctx.qt1 = this.queryPrimary();
         localctx.query =  localctx.qt1.query 
        this.state = 2248;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.INTERSECT) {
            this.state = 2239;
            localctx.intersect = this.match(languageParser.INTERSECT);
            this.state = 2241;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.DISTINCT) {
                this.state = 2240;
                localctx.quantifier = this.match(languageParser.DISTINCT);
            }

            this.state = 2243;
            localctx.qt = this.queryPrimary();
             localctx.query =  this.leftAssocBinaryOp( localctx.query, localctx.intersect, localctx.quantifier, localctx.qt.query )
                    localctx.quantifier = null; 
            this.state = 2250;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.query); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryPrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_queryPrimary;
    this.query = {}
    this.open = null; // Token
    this.qe = null; // QueryExpressionContext
    this.close = null; // Token
    this.select = null; // Token
    this.mixin = null; // Token
    this.ad = null; // Token
    this.star = null; // Token
    this.cond = null; // ConditionContext
    this.e1 = null; // ExpressionContext
    this.en = null; // ExpressionContext
    this.having = null; // ConditionContext
    return this;
}

QueryPrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryPrimaryContext.prototype.constructor = QueryPrimaryContext;

QueryPrimaryContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

QueryPrimaryContext.prototype.SELECT = function() {
    return this.getToken(languageParser.SELECT, 0);
};

QueryPrimaryContext.prototype.FROM = function() {
    return this.getToken(languageParser.FROM, 0);
};

QueryPrimaryContext.prototype.querySource = function() {
    return this.getTypedRuleContext(QuerySourceContext,0);
};

QueryPrimaryContext.prototype.WHERE = function() {
    return this.getToken(languageParser.WHERE, 0);
};

QueryPrimaryContext.prototype.GROUP = function() {
    return this.getToken(languageParser.GROUP, 0);
};

QueryPrimaryContext.prototype.BY = function() {
    return this.getToken(languageParser.BY, 0);
};

QueryPrimaryContext.prototype.HAVING = function() {
    return this.getToken(languageParser.HAVING, 0);
};

QueryPrimaryContext.prototype.selectItemDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectItemDefContext);
    } else {
        return this.getTypedRuleContext(SelectItemDefContext,i);
    }
};

QueryPrimaryContext.prototype.condition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConditionContext);
    } else {
        return this.getTypedRuleContext(ConditionContext,i);
    }
};

QueryPrimaryContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

QueryPrimaryContext.prototype.INTO = function() {
    return this.getToken(languageParser.INTO, 0);
};

QueryPrimaryContext.prototype.bracedSelectItemListDef = function() {
    return this.getTypedRuleContext(BracedSelectItemListDefContext,0);
};

QueryPrimaryContext.prototype.EXCLUDING = function() {
    return this.getToken(languageParser.EXCLUDING, 0);
};

QueryPrimaryContext.prototype.projectionExclusion = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProjectionExclusionContext);
    } else {
        return this.getTypedRuleContext(ProjectionExclusionContext,i);
    }
};

QueryPrimaryContext.prototype.MIXIN = function() {
    return this.getToken(languageParser.MIXIN, 0);
};

QueryPrimaryContext.prototype.ALL = function() {
    return this.getToken(languageParser.ALL, 0);
};

QueryPrimaryContext.prototype.DISTINCT = function() {
    return this.getToken(languageParser.DISTINCT, 0);
};

QueryPrimaryContext.prototype.mixinElementDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MixinElementDefContext);
    } else {
        return this.getTypedRuleContext(MixinElementDefContext,i);
    }
};




languageParser.QueryPrimaryContext = QueryPrimaryContext;

languageParser.prototype.queryPrimary = function() {

    var localctx = new QueryPrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, languageParser.RULE_queryPrimary);
    var _la = 0; // Token type
    try {
        this.state = 2343;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__5:
            this.enterOuterAlt(localctx, 1);
            this.state = 2251;
            localctx.open = this.match(languageParser.T__5);
            this.state = 2252;
            localctx.qe = this.queryExpression();
            this.state = 2253;
            localctx.close = this.match(languageParser.T__6);
             localctx.query =  this.surroundByParens( localctx.qe.query, localctx.open, localctx.close ) 
            break;
        case languageParser.SELECT:
            this.enterOuterAlt(localctx, 2);
            this.state = 2256;
            localctx.select = this.match(languageParser.SELECT);
             localctx.query =  { op: this.tokenLocation( localctx.select, undefined, 'SELECT' ), location: this.startLocation() } 
            this.state = 2314;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.FROM:
                this.state = 2258;
                this.match(languageParser.FROM);
                this.state = 2259;
                this.querySource( localctx.query );
                this.state = 2270;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.MIXIN) {
                    this.state = 2260;
                    localctx.mixin = this.match(languageParser.MIXIN);
                    this.state = 2261;
                    this.match(languageParser.T__1);
                    this.state = 2265;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DESC - 61)) | (1 << (languageParser.ELEMENT - 61)) | (1 << (languageParser.ELSE - 61)) | (1 << (languageParser.END - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.ENUM - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.ESCAPE - 61)) | (1 << (languageParser.EXACT - 61)) | (1 << (languageParser.EXCEPT - 61)) | (1 << (languageParser.EXCLUDING - 61)) | (1 << (languageParser.EXTEND - 61)) | (1 << (languageParser.FIRST - 61)) | (1 << (languageParser.FULL - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)) | (1 << (languageParser.INNER - 93)) | (1 << (languageParser.INTERSECT - 93)) | (1 << (languageParser.INTO - 93)) | (1 << (languageParser.IS - 93)) | (1 << (languageParser.JOIN - 93)) | (1 << (languageParser.LAST - 93)) | (1 << (languageParser.LEADING - 93)) | (1 << (languageParser.LEFT - 93)) | (1 << (languageParser.LIKE - 93)) | (1 << (languageParser.LIMIT - 93)) | (1 << (languageParser.LOCALIZED - 93)) | (1 << (languageParser.MANY - 93)) | (1 << (languageParser.MASKED - 93)) | (1 << (languageParser.MINUS - 93)) | (1 << (languageParser.MINUTE - 93)) | (1 << (languageParser.MIXIN - 93)) | (1 << (languageParser.MONTH - 93)) | (1 << (languageParser.NAMESPACE - 93)) | (1 << (languageParser.NULLS - 93)) | (1 << (languageParser.OFFSET - 93)) | (1 << (languageParser.ONE - 93)) | (1 << (languageParser.OR - 93)) | (1 << (languageParser.ORDER - 93)) | (1 << (languageParser.OUTER - 93)) | (1 << (languageParser.PARAMETERS - 93)) | (1 << (languageParser.PROJECTION - 93)) | (1 << (languageParser.REDIRECTED - 93)) | (1 << (languageParser.RETURNS - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.RIGHT - 125)) | (1 << (languageParser.SECOND - 125)) | (1 << (languageParser.SERVICE - 125)) | (1 << (languageParser.THEN - 125)) | (1 << (languageParser.TRAILING - 125)) | (1 << (languageParser.TO - 125)) | (1 << (languageParser.TYPE - 125)) | (1 << (languageParser.UNION - 125)) | (1 << (languageParser.USING - 125)) | (1 << (languageParser.VIEW - 125)) | (1 << (languageParser.YEAR - 125)) | (1 << (languageParser.Identifier - 125)))) !== 0)) {
                        this.state = 2262;
                        this.mixinElementDef( localctx.query );
                        this.state = 2267;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2268;
                    this.match(languageParser.T__3);
                    this.state = 2269;
                    this.match(languageParser.INTO);
                }

                this.state = 2274;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.ALL || _la===languageParser.DISTINCT) {
                    this.state = 2272;
                    localctx.ad = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===languageParser.ALL || _la===languageParser.DISTINCT)) {
                        localctx.ad = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                     localctx.query.quantifier = this.tokenLocation( localctx.ad, undefined, (localctx.ad===null ? null : localctx.ad.text).toLowerCase() ); 
                }

                this.state = 2277;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.T__1) {
                    this.state = 2276;
                    this.bracedSelectItemListDef( localctx.query );
                }

                this.state = 2292;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.EXCLUDING) {
                    this.state = 2279;
                    this.match(languageParser.EXCLUDING);
                    this.state = 2280;
                    this.match(languageParser.T__1);
                    this.state = 2281;
                    this.projectionExclusion( localctx.query );
                    this.state = 2287;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__2) {
                        this.state = 2282;
                        this.match(languageParser.T__2);
                         if (this.isStraightBefore("}")) break; 
                        this.state = 2284;
                        this.projectionExclusion( localctx.query );
                        this.state = 2289;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2290;
                    this.match(languageParser.T__3);
                }

                break;
            case languageParser.T__1:
            case languageParser.T__4:
            case languageParser.T__5:
            case languageParser.T__7:
            case languageParser.T__9:
            case languageParser.T__10:
            case languageParser.T__11:
            case languageParser.T__16:
            case languageParser.T__26:
            case languageParser.String:
            case languageParser.QuotedLiteral:
            case languageParser.Boolean:
            case languageParser.ALL:
            case languageParser.CASE:
            case languageParser.CAST:
            case languageParser.DISTINCT:
            case languageParser.EXTRACT:
            case languageParser.KEY:
            case languageParser.NEW:
            case languageParser.NULL:
            case languageParser.TRIM:
            case languageParser.Number:
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.COMPOSITION:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DESC:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.ESCAPE:
            case languageParser.EXACT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FIRST:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.LAST:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MIXIN:
            case languageParser.MONTH:
            case languageParser.NAMESPACE:
            case languageParser.NULLS:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OUTER:
            case languageParser.PARAMETERS:
            case languageParser.PROJECTION:
            case languageParser.REDIRECTED:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.SECOND:
            case languageParser.SERVICE:
            case languageParser.THEN:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.YEAR:
            case languageParser.Identifier:
            case languageParser.VIRTUAL:
            case languageParser.HideAlternatives:
                this.state = 2296;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.ALL || _la===languageParser.DISTINCT) {
                    this.state = 2294;
                    localctx.ad = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===languageParser.ALL || _la===languageParser.DISTINCT)) {
                        localctx.ad = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                     localctx.query.quantifier = this.tokenLocation( localctx.ad, undefined, (localctx.ad===null ? null : localctx.ad.text).toLowerCase() ); 
                }

                 localctx.query.columns = []; 
                this.state = 2302;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.T__11:
                    this.state = 2299;
                    localctx.star = this.match(languageParser.T__11);

                              localctx.query.columns = [ this.tokenLocation( localctx.star, undefined, '*' ) ];
                            
                    break;
                case languageParser.T__1:
                case languageParser.T__4:
                case languageParser.T__5:
                case languageParser.T__7:
                case languageParser.T__9:
                case languageParser.T__10:
                case languageParser.T__16:
                case languageParser.T__26:
                case languageParser.String:
                case languageParser.QuotedLiteral:
                case languageParser.Boolean:
                case languageParser.CASE:
                case languageParser.CAST:
                case languageParser.EXTRACT:
                case languageParser.KEY:
                case languageParser.NEW:
                case languageParser.NULL:
                case languageParser.TRIM:
                case languageParser.Number:
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.BOTH:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.DAY:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.HOUR:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEADING:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MINUTE:
                case languageParser.MIXIN:
                case languageParser.MONTH:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.SECOND:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TRAILING:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.USING:
                case languageParser.VIEW:
                case languageParser.YEAR:
                case languageParser.Identifier:
                case languageParser.VIRTUAL:
                case languageParser.HideAlternatives:
                    this.state = 2301;
                    this.selectItemDef( localctx.query.columns );
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 2309;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__2) {
                    this.state = 2304;
                    this.match(languageParser.T__2);
                     if (this.isStraightBefore("}")) break; 
                    this.state = 2306;
                    this.selectItemDef( localctx.query.columns );
                    this.state = 2311;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2312;
                this.match(languageParser.FROM);
                this.state = 2313;
                this.querySource( localctx.query );
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2320;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.WHERE) {
                this.state = 2316;
                this.match(languageParser.WHERE);
                this.state = 2317;
                localctx.cond = this.condition();
                 localctx.query.where = localctx.cond.cond; 
            }

            this.state = 2335;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.GROUP) {
                this.state = 2322;
                this.match(languageParser.GROUP);
                this.state = 2323;
                this.match(languageParser.BY);
                this.state = 2324;
                localctx.e1 = this.expression();
                 localctx.query.groupBy = [ localctx.e1.expr ]; 
                this.state = 2332;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__2) {
                    this.state = 2326;
                    this.match(languageParser.T__2);
                    this.state = 2327;
                    localctx.en = this.expression();
                     localctx.query.groupBy.push( localctx.en.expr ); 
                    this.state = 2334;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 2341;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.HAVING) {
                this.state = 2337;
                this.match(languageParser.HAVING);
                this.state = 2338;
                localctx.having = this.condition();
                 localctx.query.having = localctx.having.cond; 
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.query); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QuerySourceContext(parser, parent, invokingState, query) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_querySource;
    this.query = null
    this.t1 = null; // TableExpressionContext
    this.tn = null; // TableExpressionContext
    this.query = query || null;
    return this;
}

QuerySourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuerySourceContext.prototype.constructor = QuerySourceContext;

QuerySourceContext.prototype.tableExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableExpressionContext);
    } else {
        return this.getTypedRuleContext(TableExpressionContext,i);
    }
};




languageParser.QuerySourceContext = QuerySourceContext;

languageParser.prototype.querySource = function(query) {

    var localctx = new QuerySourceContext(this, this._ctx, this.state, query);
    this.enterRule(localctx, 152, languageParser.RULE_querySource);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2345;
        localctx.t1 = this.tableExpression();
         localctx.query.from = localctx.t1.table; 
        this.state = 2356;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__2) {
             const location = this.tokenLocation( this.getCurrentToken() );
                    localctx.query.from = { op: { val: 'join', location },
                                    join: { val: 'cross', location },
                                    args: [localctx.t1.table] }; 
            this.state = 2352; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2348;
                this.match(languageParser.T__2);
                this.state = 2349;
                localctx.tn = this.tableExpression();
                 if (localctx.tn.table) localctx.query.from.args.push( localctx.tn.table ); 
                this.state = 2354; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===languageParser.T__2);
        }

        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.query.from); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_tableExpression;
    this.table = null
    this.qt = null; // TableTermContext
    this.join = null; // JoinOpContext
    this.te = null; // TableExpressionContext
    this.cond = null; // ConditionContext
    this.crj = null; // Token
    this.jn = null; // Token
    this.tt = null; // TableTermContext
    return this;
}

TableExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableExpressionContext.prototype.constructor = TableExpressionContext;

TableExpressionContext.prototype.tableTerm = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableTermContext);
    } else {
        return this.getTypedRuleContext(TableTermContext,i);
    }
};

TableExpressionContext.prototype.ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.ON);
    } else {
        return this.getToken(languageParser.ON, i);
    }
};


TableExpressionContext.prototype.joinOp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JoinOpContext);
    } else {
        return this.getTypedRuleContext(JoinOpContext,i);
    }
};

TableExpressionContext.prototype.tableExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableExpressionContext);
    } else {
        return this.getTypedRuleContext(TableExpressionContext,i);
    }
};

TableExpressionContext.prototype.condition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConditionContext);
    } else {
        return this.getTypedRuleContext(ConditionContext,i);
    }
};

TableExpressionContext.prototype.CROSS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.CROSS);
    } else {
        return this.getToken(languageParser.CROSS, i);
    }
};


TableExpressionContext.prototype.JOIN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.JOIN);
    } else {
        return this.getToken(languageParser.JOIN, i);
    }
};





languageParser.TableExpressionContext = TableExpressionContext;

languageParser.prototype.tableExpression = function() {

    var localctx = new TableExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, languageParser.RULE_tableExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2358;
        localctx.qt = this.tableTerm();
         localctx.table =  localctx.qt.table 
        this.state = 2375;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (languageParser.CROSS - 75)) | (1 << (languageParser.FULL - 75)) | (1 << (languageParser.INNER - 75)) | (1 << (languageParser.JOIN - 75)) | (1 << (languageParser.LEFT - 75)))) !== 0) || _la===languageParser.RIGHT) {
            this.state = 2373;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.FULL:
            case languageParser.INNER:
            case languageParser.JOIN:
            case languageParser.LEFT:
            case languageParser.RIGHT:
                this.state = 2360;
                localctx.join = this.joinOp( localctx.table );
                 localctx.table =  localctx.join.table 
                this.state = 2362;
                localctx.te = this.tableExpression();
                 if (!localctx.table) { localctx.table =  {} } else if (localctx.te.table) localctx.table.args.push( localctx.te.table ); 
                this.state = 2364;
                this.match(languageParser.ON);
                this.state = 2365;
                localctx.cond = this.condition();
                 localctx.table.on = localctx.cond.cond; 
                break;
            case languageParser.CROSS:
                this.state = 2368;
                localctx.crj = this.match(languageParser.CROSS);
                this.state = 2369;
                localctx.jn = this.match(languageParser.JOIN);
                this.state = 2370;
                localctx.tt = this.tableTerm();
                 localctx.table =  this.leftAssocBinaryOp( localctx.table, localctx.jn, localctx.crj, localctx.tt.table, 'join' ) 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2377;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.table); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinOpContext(parser, parent, invokingState, left) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_joinOp;
    this.left = null
    this.table = null
    this.join = null
    this.op = null; // Token
    this.t1 = null; // Token
    this.c = null; // JoinCardinalityContext
    this.t2 = null; // Token
    this.left = left || null;
    return this;
}

JoinOpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinOpContext.prototype.constructor = JoinOpContext;

JoinOpContext.prototype.JOIN = function() {
    return this.getToken(languageParser.JOIN, 0);
};

JoinOpContext.prototype.INNER = function() {
    return this.getToken(languageParser.INNER, 0);
};

JoinOpContext.prototype.LEFT = function() {
    return this.getToken(languageParser.LEFT, 0);
};

JoinOpContext.prototype.RIGHT = function() {
    return this.getToken(languageParser.RIGHT, 0);
};

JoinOpContext.prototype.FULL = function() {
    return this.getToken(languageParser.FULL, 0);
};

JoinOpContext.prototype.joinCardinality = function() {
    return this.getTypedRuleContext(JoinCardinalityContext,0);
};

JoinOpContext.prototype.OUTER = function() {
    return this.getToken(languageParser.OUTER, 0);
};




languageParser.JoinOpContext = JoinOpContext;

languageParser.prototype.joinOp = function(left) {

    var localctx = new JoinOpContext(this, this._ctx, this.state, left);
    this.enterRule(localctx, 156, languageParser.RULE_joinOp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2413;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.JOIN:
            this.state = 2378;
            localctx.op = this.match(languageParser.JOIN);
             localctx.join =  'inner' 
            break;
        case languageParser.INNER:
            this.state = 2380;
            localctx.t1 = this.match(languageParser.INNER);
            this.state = 2382;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (languageParser.EXACT - 87)) | (1 << (languageParser.MANY - 87)) | (1 << (languageParser.ONE - 87)))) !== 0)) {
                this.state = 2381;
                localctx.c = this.joinCardinality();
            }

            this.state = 2384;
            localctx.op = this.match(languageParser.JOIN);
             localctx.join = 'inner' 
            break;
        case languageParser.LEFT:
            this.state = 2386;
            localctx.t1 = this.match(languageParser.LEFT);
            this.state = 2388;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.OUTER) {
                this.state = 2387;
                localctx.t2 = this.match(languageParser.OUTER);
            }

            this.state = 2391;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (languageParser.EXACT - 87)) | (1 << (languageParser.MANY - 87)) | (1 << (languageParser.ONE - 87)))) !== 0)) {
                this.state = 2390;
                localctx.c = this.joinCardinality();
            }

            this.state = 2393;
            localctx.op = this.match(languageParser.JOIN);
             localctx.join = 'left' 
            break;
        case languageParser.RIGHT:
            this.state = 2395;
            localctx.t1 = this.match(languageParser.RIGHT);
            this.state = 2397;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.OUTER) {
                this.state = 2396;
                localctx.t2 = this.match(languageParser.OUTER);
            }

            this.state = 2400;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (languageParser.EXACT - 87)) | (1 << (languageParser.MANY - 87)) | (1 << (languageParser.ONE - 87)))) !== 0)) {
                this.state = 2399;
                localctx.c = this.joinCardinality();
            }

            this.state = 2402;
            localctx.op = this.match(languageParser.JOIN);
             localctx.join = 'right' 
            break;
        case languageParser.FULL:
            this.state = 2404;
            localctx.t1 = this.match(languageParser.FULL);
            this.state = 2406;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.OUTER) {
                this.state = 2405;
                localctx.t2 = this.match(languageParser.OUTER);
            }

            this.state = 2409;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (languageParser.EXACT - 87)) | (1 << (languageParser.MANY - 87)) | (1 << (languageParser.ONE - 87)))) !== 0)) {
                this.state = 2408;
                localctx.c = this.joinCardinality();
            }

            this.state = 2411;
            localctx.op = this.match(languageParser.JOIN);
             localctx.join = 'full' 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
         localctx.table =  { op: this.tokenLocation( localctx.op, undefined, 'join' ),
                         join: this.tokenLocation( localctx.t1 || localctx.op, localctx.t2, localctx.join ),
                         args: (localctx.left ? [localctx.left] : []),
                         location: localctx.left && localctx.left.location }
              if (localctx.c) localctx.table.cardinality = localctx.c.joinCard; 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinCardinalityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_joinCardinality;
    this.joinCard = null
    this.srcExact = null; // Token
    this.srcMaxOne = null; // Token
    this.srcMaxMany = null; // Token
    this.tgtExact = null; // Token
    this.tgtMaxOne = null; // Token
    this.tgtMaxMany = null; // Token
    return this;
}

JoinCardinalityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinCardinalityContext.prototype.constructor = JoinCardinalityContext;

JoinCardinalityContext.prototype.TO = function() {
    return this.getToken(languageParser.TO, 0);
};

JoinCardinalityContext.prototype.ONE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.ONE);
    } else {
        return this.getToken(languageParser.ONE, i);
    }
};


JoinCardinalityContext.prototype.MANY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.MANY);
    } else {
        return this.getToken(languageParser.MANY, i);
    }
};


JoinCardinalityContext.prototype.EXACT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.EXACT);
    } else {
        return this.getToken(languageParser.EXACT, i);
    }
};





languageParser.JoinCardinalityContext = JoinCardinalityContext;

languageParser.prototype.joinCardinality = function() {

    var localctx = new JoinCardinalityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, languageParser.RULE_joinCardinality);
     localctx.joinCard =  {} 
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2424;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.EXACT:
        case languageParser.ONE:
            this.state = 2418;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.EXACT) {
                this.state = 2417;
                localctx.srcExact = this.match(languageParser.EXACT);
            }

            this.state = 2420;
            localctx.srcMaxOne = this.match(languageParser.ONE);
             if(localctx.srcExact)
                      localctx.joinCard.sourceMin = { literal: 'number', val: 1,
                                              location: this.tokenLocation(localctx.srcExact) };
                    localctx.joinCard.sourceMax = { literal: 'number', val: 1,
                                              location: this.tokenLocation(localctx.srcMaxOne) }; 
            break;
        case languageParser.MANY:
            this.state = 2422;
            localctx.srcMaxMany = this.match(languageParser.MANY);
             localctx.joinCard.sourceMax = { literal: 'string', val: '*',
                                               location: this.tokenLocation(localctx.srcMaxMany) }; 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2426;
        this.match(languageParser.TO);
        this.state = 2434;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.EXACT:
        case languageParser.ONE:
            this.state = 2428;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.EXACT) {
                this.state = 2427;
                localctx.tgtExact = this.match(languageParser.EXACT);
            }

            this.state = 2430;
            localctx.tgtMaxOne = this.match(languageParser.ONE);
             if(localctx.tgtExact)
                      localctx.joinCard.targetMin = { literal: 'number', val: 1,
                                              location: this.tokenLocation(localctx.tgtExact) };
                    localctx.joinCard.targetMax = { literal: 'number', val: 1,
                                          location: this.tokenLocation(localctx.tgtMaxOne) }; 
            break;
        case languageParser.MANY:
            this.state = 2432;
            localctx.tgtMaxMany = this.match(languageParser.MANY);
             localctx.joinCard.targetMax = { literal: 'string', val: '*',
                                            location: this.tokenLocation(localctx.tgtMaxMany) }; 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.joinCard); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_tableTerm;
    this.table = null
    this.n1 = null; // IdentContext
    this.n2 = null; // IdentNoKeywordContext
    this.open = null; // Token
    this.qe = null; // QueryExpressionContext
    this.close = null; // Token
    this.a1 = null; // IdentContext
    this.a2 = null; // IdentNoKeywordContext
    this.te = null; // TableExpressionContext
    return this;
}

TableTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableTermContext.prototype.constructor = TableTermContext;

TableTermContext.prototype.fromPath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FromPathContext);
    } else {
        return this.getTypedRuleContext(FromPathContext,i);
    }
};

TableTermContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

TableTermContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

TableTermContext.prototype.identNoKeyword = function() {
    return this.getTypedRuleContext(IdentNoKeywordContext,0);
};

TableTermContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

TableTermContext.prototype.tableExpression = function() {
    return this.getTypedRuleContext(TableExpressionContext,0);
};




languageParser.TableTermContext = TableTermContext;

languageParser.prototype.tableTerm = function() {

    var localctx = new TableTermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, languageParser.RULE_tableTerm);
    var _la = 0; // Token type
    try {
        this.state = 2471;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
            this.enterOuterAlt(localctx, 1);
             localctx.table =  { path: [], scope: 0 } 
            this.state = 2437;
            this.fromPath( localctx.table, 'artref');
            this.state = 2441;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__4) {
                this.state = 2438;
                this.match(languageParser.T__4);
                 localctx.table.scope = localctx.table.path.length; 
                this.state = 2440;
                this.fromPath( localctx.table, 'ref');
            }

            this.state = 2450;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case languageParser.AS:
            	this.state = 2443;
            	this.match(languageParser.AS);
            	this.state = 2444;
            	localctx.n1 = this.ident('FromAlias');
            	 localctx.table.name = localctx.n1.id 
            	break;
            case languageParser.Identifier:
            	this.state = 2447;
            	localctx.n2 = this.identNoKeyword('FromAlias');
            	 this.fragileAlias( localctx.n2.id );; localctx.table.name = localctx.n2.id; 
            	break;
            case languageParser.EOF:
            case languageParser.T__0:
            case languageParser.T__1:
            case languageParser.T__2:
            case languageParser.T__3:
            case languageParser.T__6:
            case languageParser.ALL:
            case languageParser.DISTINCT:
            case languageParser.ON:
            case languageParser.WHERE:
            case languageParser.ACTIONS:
            case languageParser.CROSS:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.FULL:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.JOIN:
            case languageParser.LEFT:
            case languageParser.LIMIT:
            case languageParser.MINUS:
            case languageParser.MIXIN:
            case languageParser.ORDER:
            case languageParser.RIGHT:
            case languageParser.UNION:
            	break;
            default:
            	break;
            }
            break;
        case languageParser.T__5:
            this.enterOuterAlt(localctx, 2);
            this.state = 2452;
            localctx.open = this.match(languageParser.T__5);
            this.state = 2469;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,339,this._ctx);
            switch(la_) {
            case 1:
                this.state = 2453;
                localctx.qe = this.queryExpression();
                this.state = 2454;
                localctx.close = this.match(languageParser.T__6);
                 localctx.table =  { query: this.unaryOpForParens( localctx.qe.query ) } 
                this.state = 2463;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.AS:
                    this.state = 2456;
                    this.match(languageParser.AS);
                    this.state = 2457;
                    localctx.a1 = this.ident('FromAlias');
                     localctx.table.name = localctx.a1.id 
                    break;
                case languageParser.Identifier:
                    this.state = 2460;
                    localctx.a2 = this.identNoKeyword('FromAlias');
                     this.fragileAlias( localctx.a2.id, true );; localctx.table.name = localctx.a2.id; 
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;

            case 2:
                this.state = 2465;
                localctx.te = this.tableExpression();
                this.state = 2466;
                localctx.close = this.match(languageParser.T__6);
                 localctx.table =  this.surroundByParens( localctx.te.table, localctx.open, localctx.close ) 
                break;

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ this.attachLocation(localctx.table); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FromPathContext(parser, parent, invokingState, qp, idkind) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_fromPath;
    this.qp = null
    this.idkind = null
    this.id = null; // IdentContext
    this.qp = qp || null;
    this.idkind = idkind || null;
    return this;
}

FromPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromPathContext.prototype.constructor = FromPathContext;

FromPathContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};

FromPathContext.prototype.fromArguments = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FromArgumentsContext);
    } else {
        return this.getTypedRuleContext(FromArgumentsContext,i);
    }
};

FromPathContext.prototype.cardinalityAndFilter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CardinalityAndFilterContext);
    } else {
        return this.getTypedRuleContext(CardinalityAndFilterContext,i);
    }
};




languageParser.FromPathContext = FromPathContext;

languageParser.prototype.fromPath = function(qp, idkind) {

    var localctx = new FromPathContext(this, this._ctx, this.state, qp, idkind);
    this.enterRule(localctx, 162, languageParser.RULE_fromPath);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2473;
        localctx.id = this.ident(localctx.idkind);
         this.pushIdent( localctx.qp.path, localctx.id.id ); 
        this.state = 2480;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case languageParser.T__5:
        	this.state = 2475;
        	this.fromArguments( localctx.id.id );
        	this.state = 2477;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(_la===languageParser.T__12) {
        	    this.state = 2476;
        	    this.cardinalityAndFilter( localctx.id.id );
        	}

        	break;
        case languageParser.T__12:
        	this.state = 2479;
        	this.cardinalityAndFilter( localctx.id.id );
        	break;
        case languageParser.EOF:
        case languageParser.T__0:
        case languageParser.T__1:
        case languageParser.T__2:
        case languageParser.T__3:
        case languageParser.T__4:
        case languageParser.T__6:
        case languageParser.T__7:
        case languageParser.T__15:
        case languageParser.ALL:
        case languageParser.AS:
        case languageParser.DISTINCT:
        case languageParser.ON:
        case languageParser.WHERE:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ASPECT:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DEFINE:
        case languageParser.ENTITY:
        case languageParser.EVENT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.JOIN:
        case languageParser.LEFT:
        case languageParser.LIMIT:
        case languageParser.MINUS:
        case languageParser.MIXIN:
        case languageParser.ORDER:
        case languageParser.RIGHT:
        case languageParser.SERVICE:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.Identifier:
        case languageParser.HideAlternatives:
        	break;
        default:
        	break;
        }
        this.state = 2494;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__15) {
            this.state = 2482;
            this.match(languageParser.T__15);
            this.state = 2483;
            localctx.id = this.ident(localctx.idkind);
             this.pushIdent( localctx.qp.path, localctx.id.id ); 
            this.state = 2490;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case languageParser.T__5:
            	this.state = 2485;
            	this.fromArguments( localctx.id.id );
            	this.state = 2487;
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	if(_la===languageParser.T__12) {
            	    this.state = 2486;
            	    this.cardinalityAndFilter( localctx.id.id );
            	}

            	break;
            case languageParser.T__12:
            	this.state = 2489;
            	this.cardinalityAndFilter( localctx.id.id );
            	break;
            case languageParser.EOF:
            case languageParser.T__0:
            case languageParser.T__1:
            case languageParser.T__2:
            case languageParser.T__3:
            case languageParser.T__4:
            case languageParser.T__6:
            case languageParser.T__7:
            case languageParser.T__15:
            case languageParser.ALL:
            case languageParser.AS:
            case languageParser.DISTINCT:
            case languageParser.ON:
            case languageParser.WHERE:
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ASPECT:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DEFINE:
            case languageParser.ENTITY:
            case languageParser.EVENT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.JOIN:
            case languageParser.LEFT:
            case languageParser.LIMIT:
            case languageParser.MINUS:
            case languageParser.MIXIN:
            case languageParser.ORDER:
            case languageParser.RIGHT:
            case languageParser.SERVICE:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.Identifier:
            case languageParser.HideAlternatives:
            	break;
            default:
            	break;
            }
            this.state = 2496;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.qp); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_condition;
    this.cond = null
    this.args = []
    this.orl = []
    this.c1 = null; // ConditionAndContext
    this.or = null; // Token
    this.c2 = null; // ConditionAndContext
    return this;
}

ConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionContext.prototype.constructor = ConditionContext;

ConditionContext.prototype.conditionAnd = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConditionAndContext);
    } else {
        return this.getTypedRuleContext(ConditionAndContext,i);
    }
};

ConditionContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.OR);
    } else {
        return this.getToken(languageParser.OR, i);
    }
};





languageParser.ConditionContext = ConditionContext;

languageParser.prototype.condition = function() {

    var localctx = new ConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, languageParser.RULE_condition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2497;
        localctx.c1 = this.conditionAnd();
         localctx.args.push(localctx.c1.cond); 
        this.state = 2505;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.OR) {
            this.state = 2499;
            localctx.or = this.match(languageParser.OR);
            this.state = 2500;
            localctx.c2 = this.conditionAnd();
             localctx.args.push(localctx.c2.cond); localctx.orl.push(this.tokenLocation( localctx.or, undefined, 'or' ))
            this.state = 2507;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);

          localctx.cond =  (localctx.args.length == 1)
            ? localctx.args[0]
            : this.attachLocation({ op: localctx.orl[0], args: localctx.args })

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConditionAndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_conditionAnd;
    this.cond = null
    this.args = []
    this.andl = []
    this.c1 = null; // ConditionTermContext
    this.and = null; // Token
    this.c2 = null; // ConditionTermContext
    return this;
}

ConditionAndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionAndContext.prototype.constructor = ConditionAndContext;

ConditionAndContext.prototype.conditionTerm = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConditionTermContext);
    } else {
        return this.getTypedRuleContext(ConditionTermContext,i);
    }
};

ConditionAndContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.AND);
    } else {
        return this.getToken(languageParser.AND, i);
    }
};





languageParser.ConditionAndContext = ConditionAndContext;

languageParser.prototype.conditionAnd = function() {

    var localctx = new ConditionAndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, languageParser.RULE_conditionAnd);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2508;
        localctx.c1 = this.conditionTerm();
         localctx.args.push(localctx.c1.cond); 
        this.state = 2516;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.AND) {
            this.state = 2510;
            localctx.and = this.match(languageParser.AND);
            this.state = 2511;
            localctx.c2 = this.conditionTerm();
             localctx.args.push(localctx.c2.cond); localctx.andl.push(this.tokenLocation( localctx.and, undefined, 'and' )) 
            this.state = 2518;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);

          localctx.cond =  (localctx.args.length == 1)
            ? localctx.args[0]
            : this.attachLocation({ op: localctx.andl[0], args: localctx.args })

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConditionTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_conditionTerm;
    this.cond = null
    this.nt = null; // Token
    this.ct = null; // ConditionTermContext
    this.ex = null; // Token
    this.open = null; // Token
    this.qe = null; // QueryExpressionContext
    this.close = null; // Token
    this.qm = null; // Token
    this.ep = null; // ValuePathContext
    this.expr = null; // ExpressionContext
    this.rel = null; // Token
    this.asa = null; // Token
    this.e2 = null; // ExpressionContext
    this.inn = null; // Token
    this.innu = null; // Token
    return this;
}

ConditionTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionTermContext.prototype.constructor = ConditionTermContext;

ConditionTermContext.prototype.NOT = function() {
    return this.getToken(languageParser.NOT, 0);
};

ConditionTermContext.prototype.conditionTerm = function() {
    return this.getTypedRuleContext(ConditionTermContext,0);
};

ConditionTermContext.prototype.EXISTS = function() {
    return this.getToken(languageParser.EXISTS, 0);
};

ConditionTermContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

ConditionTermContext.prototype.valuePath = function() {
    return this.getTypedRuleContext(ValuePathContext,0);
};

ConditionTermContext.prototype.HideAlternatives = function() {
    return this.getToken(languageParser.HideAlternatives, 0);
};

ConditionTermContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ConditionTermContext.prototype.IS = function() {
    return this.getToken(languageParser.IS, 0);
};

ConditionTermContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

ConditionTermContext.prototype.NULL = function() {
    return this.getToken(languageParser.NULL, 0);
};

ConditionTermContext.prototype.ANY = function() {
    return this.getToken(languageParser.ANY, 0);
};

ConditionTermContext.prototype.SOME = function() {
    return this.getToken(languageParser.SOME, 0);
};

ConditionTermContext.prototype.ALL = function() {
    return this.getToken(languageParser.ALL, 0);
};




languageParser.ConditionTermContext = ConditionTermContext;

languageParser.prototype.conditionTerm = function() {

    var localctx = new ConditionTermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, languageParser.RULE_conditionTerm);
    var _la = 0; // Token type
    try {
        this.state = 2560;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.NOT:
            this.enterOuterAlt(localctx, 1);
            this.state = 2519;
            localctx.nt = this.match(languageParser.NOT);
            this.state = 2520;
            localctx.ct = this.conditionTerm();
             localctx.cond =  { op: this.tokenLocation( localctx.nt, undefined, 'not' ), args: [ localctx.ct.cond ] } 
            break;
        case languageParser.EXISTS:
            this.enterOuterAlt(localctx, 2);
            this.state = 2523;
            localctx.ex = this.match(languageParser.EXISTS);
            this.state = 2534;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.T__5:
                this.state = 2524;
                localctx.open = this.match(languageParser.T__5);
                this.state = 2525;
                localctx.qe = this.queryExpression();
                this.state = 2526;
                localctx.close = this.match(languageParser.T__6);
                 localctx.cond =  { op: this.tokenLocation( localctx.ex, undefined, 'exists' ),
                                  args: [ { query: localctx.qe.query, location: this.tokenLocation( localctx.open, localctx.close ) } ] } 
                break;
            case languageParser.T__16:
            case languageParser.HideAlternatives:
                this.state = 2529;
                localctx.qm = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===languageParser.T__16 || _la===languageParser.HideAlternatives)) {
                    localctx.qm = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                 localctx.cond =  { op: this.tokenLocation( localctx.ex, undefined, 'exists' ), args: [
                          { param: this.tokenLocation( localctx.qm, undefined, '?' ), scope: 'param' }
                        ] }
                        this.csnParseOnly( 'Dynamic parameter "?" is not supported', localctx.qm );
                      
                break;
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.COMPOSITION:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DESC:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.ESCAPE:
            case languageParser.EXACT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FIRST:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.LAST:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MIXIN:
            case languageParser.MONTH:
            case languageParser.NAMESPACE:
            case languageParser.NULLS:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OUTER:
            case languageParser.PARAMETERS:
            case languageParser.PROJECTION:
            case languageParser.REDIRECTED:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.SECOND:
            case languageParser.SERVICE:
            case languageParser.THEN:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.YEAR:
            case languageParser.Identifier:
                this.state = 2531;
                localctx.ep = this.valuePath( 'ref' );
                 localctx.ep.qp['$'+'expected'] = 'exists';
                        localctx.cond =  { op: this.tokenLocation( localctx.ex, undefined, 'exists' ), args: [ localctx.ep.qp ] }
                      
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case languageParser.T__4:
        case languageParser.T__5:
        case languageParser.T__9:
        case languageParser.T__10:
        case languageParser.T__16:
        case languageParser.T__26:
        case languageParser.String:
        case languageParser.QuotedLiteral:
        case languageParser.Boolean:
        case languageParser.CASE:
        case languageParser.CAST:
        case languageParser.EXTRACT:
        case languageParser.NEW:
        case languageParser.NULL:
        case languageParser.TRIM:
        case languageParser.Number:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
        case languageParser.HideAlternatives:
            this.enterOuterAlt(localctx, 3);
            this.state = 2536;
            localctx.expr = this.expression();
            this.state = 2558;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case languageParser.T__8:
            case languageParser.T__17:
            case languageParser.T__18:
            case languageParser.T__19:
            case languageParser.T__20:
            case languageParser.T__21:
            case languageParser.T__22:
            	this.state = 2537;
            	localctx.rel = this._input.LT(1);
            	_la = this._input.LA(1);
            	if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__8) | (1 << languageParser.T__17) | (1 << languageParser.T__18) | (1 << languageParser.T__19) | (1 << languageParser.T__20) | (1 << languageParser.T__21) | (1 << languageParser.T__22))) !== 0))) {
            	    localctx.rel = this._errHandler.recoverInline(this);
            	}
            	else {
            		this._errHandler.reportMatch(this);
            	    this.consume();
            	}
            	 localctx.cond =  { op: this.tokenLocation( localctx.rel, undefined, (localctx.rel===null ? null : localctx.rel.text)), args: [ localctx.expr.expr ] } 
            	this.state = 2541;
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	if(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (languageParser.ALL - 37)) | (1 << (languageParser.ANY - 37)) | (1 << (languageParser.SOME - 37)))) !== 0)) {
            	    this.state = 2539;
            	    localctx.asa = this._input.LT(1);
            	    _la = this._input.LA(1);
            	    if(!(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (languageParser.ALL - 37)) | (1 << (languageParser.ANY - 37)) | (1 << (languageParser.SOME - 37)))) !== 0))) {
            	        localctx.asa = this._errHandler.recoverInline(this);
            	    }
            	    else {
            	    	this._errHandler.reportMatch(this);
            	        this.consume();
            	    }
            	     localctx.cond.quantifier = this.tokenLocation(localctx.asa, undefined, (localctx.asa===null ? null : localctx.asa.text).toLowerCase()); 
            	}

            	this.state = 2543;
            	localctx.e2 = this.expression();
            	 localctx.cond.args.push(localctx.e2.expr); 
            	break;
            case languageParser.IS:
            	this.state = 2546;
            	this.match(languageParser.IS);
            	this.state = 2550;
            	this._errHandler.sync(this);
            	switch(this._input.LA(1)) {
            	case languageParser.NOT:
            	    this.state = 2547;
            	    localctx.inn = this.match(languageParser.NOT);
            	    this.state = 2548;
            	    this.match(languageParser.NULL);
            	    break;
            	case languageParser.NULL:
            	    this.state = 2549;
            	    localctx.innu = this.match(languageParser.NULL);
            	    break;
            	default:
            	    throw new antlr4.error.NoViableAltException(this);
            	}
            	 localctx.cond =  { op: localctx.inn ? this.tokenLocation( localctx.inn, undefined, 'isNotNull' ) : this.tokenLocation( localctx.innu, undefined, 'isNull' ), args: [ localctx.expr.expr ] } 
            	break;
            case languageParser.NOT:
            	 localctx.cond =  { args: [ localctx.expr.expr ] } 
            	this.state = 2554;
            	this.match(languageParser.NOT);
            	this.state = 2555;
            	this.predicate( localctx.cond, true );
            	break;
            case languageParser.IN:
            case languageParser.BETWEEN:
            case languageParser.LIKE:
            	 localctx.cond =  { args: [ localctx.expr.expr ] } 
            	this.state = 2557;
            	this.predicate( localctx.cond, false );
            	break;
            case languageParser.EOF:
            case languageParser.T__0:
            case languageParser.T__1:
            case languageParser.T__2:
            case languageParser.T__3:
            case languageParser.T__6:
            case languageParser.T__7:
            case languageParser.T__14:
            case languageParser.ALL:
            case languageParser.DISTINCT:
            case languageParser.FROM:
            case languageParser.ON:
            case languageParser.WHERE:
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ASPECT:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DEFINE:
            case languageParser.ENTITY:
            case languageParser.EVENT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.JOIN:
            case languageParser.LEFT:
            case languageParser.LIMIT:
            case languageParser.MINUS:
            case languageParser.MIXIN:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.RIGHT:
            case languageParser.SERVICE:
            case languageParser.THEN:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.HideAlternatives:
            	break;
            default:
            	break;
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);

          if (localctx.cond) { this.attachLocation(localctx.cond); } else { localctx.cond =  localctx.expr.expr }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PredicateContext(parser, parent, invokingState, cond, negated) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_predicate;
    this.cond = null
    this.negated = null
    this.ino = null; // Token
    this.e1 = null; // ExpressionContext
    this.bw = null; // Token
    this.e2 = null; // ExpressionContext
    this.e3 = null; // ExpressionContext
    this.lk = null; // Token
    this.e4 = null; // ExpressionContext
    this.e5 = null; // ExpressionContext
    this.cond = cond || null;
    this.negated = negated || null;
    return this;
}

PredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateContext.prototype.constructor = PredicateContext;

PredicateContext.prototype.IN = function() {
    return this.getToken(languageParser.IN, 0);
};

PredicateContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PredicateContext.prototype.AND = function() {
    return this.getToken(languageParser.AND, 0);
};

PredicateContext.prototype.BETWEEN = function() {
    return this.getToken(languageParser.BETWEEN, 0);
};

PredicateContext.prototype.LIKE = function() {
    return this.getToken(languageParser.LIKE, 0);
};

PredicateContext.prototype.ESCAPE = function() {
    return this.getToken(languageParser.ESCAPE, 0);
};




languageParser.PredicateContext = PredicateContext;

languageParser.prototype.predicate = function(cond, negated) {

    var localctx = new PredicateContext(this, this._ctx, this.state, cond, negated);
    this.enterRule(localctx, 170, languageParser.RULE_predicate);
    var _la = 0; // Token type
    try {
        this.state = 2582;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.IN:
            this.enterOuterAlt(localctx, 1);
            this.state = 2562;
            localctx.ino = this.match(languageParser.IN);
            this.state = 2563;
            localctx.e1 = this.expression();
             localctx.cond.op = this.tokenLocation( localctx.ino, undefined, (negated) ? 'notIn' : 'in'); localctx.cond.args.push( localctx.e1.expr ); 
            break;
        case languageParser.BETWEEN:
            this.enterOuterAlt(localctx, 2);
            this.state = 2566;
            localctx.bw = this.match(languageParser.BETWEEN);
            this.state = 2567;
            localctx.e2 = this.expression();
             localctx.cond.op = this.tokenLocation( localctx.bw, undefined, (negated) ? 'notBetween' : 'between' ); localctx.cond.args.push( localctx.e2.expr ); 
            this.state = 2569;
            this.match(languageParser.AND);
            this.state = 2570;
            localctx.e3 = this.expression();
             localctx.cond.args.push( localctx.e3.expr ); 
            break;
        case languageParser.LIKE:
            this.enterOuterAlt(localctx, 3);
            this.state = 2573;
            localctx.lk = this.match(languageParser.LIKE);
            this.state = 2574;
            localctx.e4 = this.expression();
             localctx.cond.op = this.tokenLocation( localctx.lk, undefined, (negated) ? 'notLike' : 'like' ); localctx.cond.args.push( localctx.e4.expr ); 
            this.state = 2580;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.ESCAPE) {
                this.state = 2576;
                this.match(languageParser.ESCAPE);
                this.state = 2577;
                localctx.e5 = this.expression();
                 localctx.cond.args.push( localctx.e5.expr ); 
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_expression;
    this.expr = null
    this.e1 = null; // ExpressionSumContext
    this.or = null; // Token
    this.e2 = null; // ExpressionSumContext
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.expressionSum = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionSumContext);
    } else {
        return this.getTypedRuleContext(ExpressionSumContext,i);
    }
};




languageParser.ExpressionContext = ExpressionContext;

languageParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, languageParser.RULE_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2584;
        localctx.e1 = this.expressionSum();
         localctx.expr =  localctx.e1.expr 
        this.state = 2592;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__23) {
            this.state = 2586;
            localctx.or = this.match(languageParser.T__23);
            this.state = 2587;
            localctx.e2 = this.expressionSum();

                    localctx.expr =  {
                      op: this.tokenLocation( localctx.or, undefined, '||' ), args: [localctx.expr, localctx.e2.expr],
                      location: this.combinedLocation( localctx.expr, localctx.e2.expr ) }
                  
            this.state = 2594;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         if (localctx.expr) { this.attachLocation(localctx.expr); } else { localctx.expr =  this.attachLocation({})} 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionSumContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_expressionSum;
    this.expr = null
    this.e1 = null; // ExpressionFactorContext
    this.op = null; // Token
    this.e2 = null; // ExpressionFactorContext
    return this;
}

ExpressionSumContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionSumContext.prototype.constructor = ExpressionSumContext;

ExpressionSumContext.prototype.expressionFactor = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionFactorContext);
    } else {
        return this.getTypedRuleContext(ExpressionFactorContext,i);
    }
};




languageParser.ExpressionSumContext = ExpressionSumContext;

languageParser.prototype.expressionSum = function() {

    var localctx = new ExpressionSumContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, languageParser.RULE_expressionSum);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2595;
        localctx.e1 = this.expressionFactor();
         localctx.expr =  localctx.e1.expr 
        this.state = 2603;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9 || _la===languageParser.T__10) {
            this.state = 2597;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===languageParser.T__9 || _la===languageParser.T__10)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2598;
            localctx.e2 = this.expressionFactor();

                    localctx.expr =  {
                      op: this.tokenLocation(localctx.op, undefined, (localctx.op===null ? null : localctx.op.text)), args: [localctx.expr, localctx.e2.expr],
                      location: this.combinedLocation( localctx.expr, localctx.e2.expr ) }
                  
            this.state = 2605;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         if (localctx.expr) this.attachLocation(localctx.expr); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionFactorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_expressionFactor;
    this.expr = null
    this.e1 = null; // ExpressionTermContext
    this.op = null; // Token
    this.e2 = null; // ExpressionTermContext
    return this;
}

ExpressionFactorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionFactorContext.prototype.constructor = ExpressionFactorContext;

ExpressionFactorContext.prototype.expressionTerm = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionTermContext);
    } else {
        return this.getTypedRuleContext(ExpressionTermContext,i);
    }
};




languageParser.ExpressionFactorContext = ExpressionFactorContext;

languageParser.prototype.expressionFactor = function() {

    var localctx = new ExpressionFactorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, languageParser.RULE_expressionFactor);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2606;
        localctx.e1 = this.expressionTerm();
         localctx.expr =  localctx.e1.expr 
        this.state = 2614;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__11 || _la===languageParser.T__24) {
            this.state = 2608;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===languageParser.T__11 || _la===languageParser.T__24)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2609;
            localctx.e2 = this.expressionTerm();

                    localctx.expr =  {
                      op: this.tokenLocation(localctx.op, undefined, (localctx.op===null ? null : localctx.op.text)), args: [localctx.expr, localctx.e2.expr],
                      location: this.combinedLocation( localctx.expr, localctx.e2.expr ) }
                  
            this.state = 2616;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         if (localctx.expr) this.attachLocation(localctx.expr); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_expressionTerm;
    this.expr = null
    this.op = null
    this.args = []
    this.unary = null; // Token
    this.e1 = null; // ExpressionTermContext
    this.val = null; // LiteralValueContext
    this.sf = null; // SpecialFunctionContext
    this.ca = null; // Token
    this.e2 = null; // ExpressionContext
    this.ow = null; // Token
    this.ew = null; // ExpressionContext
    this.e3 = null; // ExpressionContext
    this.c = null; // ConditionContext
    this.el = null; // Token
    this.e4 = null; // ExpressionContext
    this.ne = null; // Token
    this.nqp = null; // ValuePathContext
    this.vp = null; // ValuePathContext
    this.pp = null; // Token
    this.qm = null; // Token
    this.open = null; // Token
    this.qe = null; // QueryExpressionContext
    this.close = null; // Token
    this.c1 = null; // ConditionContext
    this.cn = null; // ExpressionContext
    return this;
}

ExpressionTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionTermContext.prototype.constructor = ExpressionTermContext;

ExpressionTermContext.prototype.expressionTerm = function() {
    return this.getTypedRuleContext(ExpressionTermContext,0);
};

ExpressionTermContext.prototype.END = function() {
    return this.getToken(languageParser.END, 0);
};

ExpressionTermContext.prototype.literalValue = function() {
    return this.getTypedRuleContext(LiteralValueContext,0);
};

ExpressionTermContext.prototype.specialFunction = function() {
    return this.getTypedRuleContext(SpecialFunctionContext,0);
};

ExpressionTermContext.prototype.CASE = function() {
    return this.getToken(languageParser.CASE, 0);
};

ExpressionTermContext.prototype.NEW = function() {
    return this.getToken(languageParser.NEW, 0);
};

ExpressionTermContext.prototype.valuePath = function() {
    return this.getTypedRuleContext(ValuePathContext,0);
};

ExpressionTermContext.prototype.HideAlternatives = function() {
    return this.getToken(languageParser.HideAlternatives, 0);
};

ExpressionTermContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionTermContext.prototype.Number = function() {
    return this.getToken(languageParser.Number, 0);
};

ExpressionTermContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

ExpressionTermContext.prototype.condition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConditionContext);
    } else {
        return this.getTypedRuleContext(ConditionContext,i);
    }
};

ExpressionTermContext.prototype.ELSE = function() {
    return this.getToken(languageParser.ELSE, 0);
};

ExpressionTermContext.prototype.THEN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.THEN);
    } else {
        return this.getToken(languageParser.THEN, i);
    }
};


ExpressionTermContext.prototype.WHEN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.WHEN);
    } else {
        return this.getToken(languageParser.WHEN, i);
    }
};





languageParser.ExpressionTermContext = ExpressionTermContext;

languageParser.prototype.expressionTerm = function() {

    var localctx = new ExpressionTermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, languageParser.RULE_expressionTerm);
    var _la = 0; // Token type
    try {
        this.state = 2702;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__9:
        case languageParser.T__10:
            this.enterOuterAlt(localctx, 1);
            this.state = 2617;
            localctx.unary = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===languageParser.T__9 || _la===languageParser.T__10)) {
                localctx.unary = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2618;
            localctx.e1 = this.expressionTerm();
             localctx.expr =  this.signedExpression( localctx.unary, localctx.e1.expr ) 
            break;
        case languageParser.T__4:
        case languageParser.T__5:
        case languageParser.T__16:
        case languageParser.T__26:
        case languageParser.String:
        case languageParser.QuotedLiteral:
        case languageParser.Boolean:
        case languageParser.CASE:
        case languageParser.CAST:
        case languageParser.EXTRACT:
        case languageParser.NEW:
        case languageParser.NULL:
        case languageParser.TRIM:
        case languageParser.Number:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
        case languageParser.HideAlternatives:
            this.enterOuterAlt(localctx, 2);
            this.state = 2700;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.T__26:
            case languageParser.String:
            case languageParser.QuotedLiteral:
            case languageParser.Boolean:
            case languageParser.NULL:
            case languageParser.Number:
                this.state = 2621;
                localctx.val = this.literalValue();
                 localctx.expr =  localctx.val.val 
                break;
            case languageParser.CAST:
            case languageParser.EXTRACT:
            case languageParser.TRIM:
                this.state = 2624;
                localctx.sf = this.specialFunction();
                 localctx.expr =  localctx.sf.ret 
                break;
            case languageParser.CASE:
                this.state = 2627;
                localctx.ca = this.match(languageParser.CASE);
                 localctx.expr =  { op : this.tokenLocation( localctx.ca, undefined, 'case' ), args: [] } 
                this.state = 2651;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.T__4:
                case languageParser.T__5:
                case languageParser.T__9:
                case languageParser.T__10:
                case languageParser.T__16:
                case languageParser.T__26:
                case languageParser.String:
                case languageParser.QuotedLiteral:
                case languageParser.Boolean:
                case languageParser.CASE:
                case languageParser.CAST:
                case languageParser.EXTRACT:
                case languageParser.NEW:
                case languageParser.NULL:
                case languageParser.TRIM:
                case languageParser.Number:
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.BOTH:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.DAY:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.HOUR:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEADING:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MINUTE:
                case languageParser.MIXIN:
                case languageParser.MONTH:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.SECOND:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TRAILING:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.USING:
                case languageParser.VIEW:
                case languageParser.YEAR:
                case languageParser.Identifier:
                case languageParser.HideAlternatives:
                    this.state = 2629;
                    localctx.e2 = this.expression();
                     localctx.expr.args.push(localctx.e2.expr); 
                    this.state = 2637; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 2631;
                        localctx.ow = this.match(languageParser.WHEN);
                        this.state = 2632;
                        localctx.ew = this.expression();
                        this.state = 2633;
                        this.match(languageParser.THEN);
                        this.state = 2634;
                        localctx.e3 = this.expression();
                         localctx.expr.args.push( this.createPrefixOp( localctx.ow, [ localctx.ew.expr, localctx.e3.expr ] ) ); 
                        this.state = 2639; 
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while(_la===languageParser.WHEN);
                    break;
                case languageParser.WHEN:
                    this.state = 2647; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 2641;
                        localctx.ow = this.match(languageParser.WHEN);
                        this.state = 2642;
                        localctx.c = this.condition();
                        this.state = 2643;
                        this.match(languageParser.THEN);
                        this.state = 2644;
                        localctx.e3 = this.expression();
                         localctx.expr.args.push( this.createPrefixOp( localctx.ow, [ localctx.c.cond, localctx.e3.expr ] ) ); 
                        this.state = 2649; 
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while(_la===languageParser.WHEN);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 2657;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.ELSE) {
                    this.state = 2653;
                    localctx.el = this.match(languageParser.ELSE);
                    this.state = 2654;
                    localctx.e4 = this.expression();
                     localctx.expr.args.push( this.createPrefixOp( localctx.el, [ localctx.e4.expr ] ) ); 
                }

                this.state = 2659;
                this.match(languageParser.END);
                break;
            case languageParser.NEW:
                this.state = 2661;
                localctx.ne = this.match(languageParser.NEW);
                this.state = 2662;
                localctx.nqp = this.valuePath( 'ref', null);
                 localctx.expr =  { op: this.tokenLocation( localctx.ne, undefined, 'new' ), args: [] }
                        this.notSupportedYet( localctx.ne ); 
                break;
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.COMPOSITION:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DESC:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.ESCAPE:
            case languageParser.EXACT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FIRST:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.LAST:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MIXIN:
            case languageParser.MONTH:
            case languageParser.NAMESPACE:
            case languageParser.NULLS:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OUTER:
            case languageParser.PARAMETERS:
            case languageParser.PROJECTION:
            case languageParser.REDIRECTED:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.SECOND:
            case languageParser.SERVICE:
            case languageParser.THEN:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.YEAR:
            case languageParser.Identifier:
                this.state = 2665;
                localctx.vp = this.valuePath( 'ref', null );
                 localctx.expr =  this.valuePathAst( localctx.vp.qp ) 
                break;
            case languageParser.T__4:
                this.state = 2668;
                this.match(languageParser.T__4);
                this.state = 2674;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.BOTH:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.DAY:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.HOUR:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEADING:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MINUTE:
                case languageParser.MIXIN:
                case languageParser.MONTH:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.SECOND:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TRAILING:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.USING:
                case languageParser.VIEW:
                case languageParser.YEAR:
                case languageParser.Identifier:
                    this.state = 2669;
                    localctx.vp = this.valuePath( 'paramref', this.startLocation() );
                     localctx.expr =  localctx.vp.qp; localctx.expr.scope = 'param'; 
                    break;
                case languageParser.Number:
                    this.state = 2672;
                    localctx.pp = this.match(languageParser.Number);
                     localctx.expr =  { param: this.numberLiteral( localctx.pp ), scope: 'param' }
                              this.csnParseOnly( 'Positional parameter ":' + (localctx.pp===null ? null : localctx.pp.text) + '" is not supported', localctx.pp );
                            
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;
            case languageParser.T__16:
            case languageParser.HideAlternatives:
                this.state = 2676;
                localctx.qm = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===languageParser.T__16 || _la===languageParser.HideAlternatives)) {
                    localctx.qm = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                 localctx.expr =  { param: this.tokenLocation( localctx.qm, undefined, '?' ), scope: 'param' }
                        this.csnParseOnly( 'Dynamic parameter "?" is not supported', localctx.qm );
                      
                break;
            case languageParser.T__5:
                this.state = 2678;
                localctx.open = this.match(languageParser.T__5);
                this.state = 2698;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,364,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 2679;
                    localctx.qe = this.queryExpression();
                    this.state = 2680;
                    localctx.close = this.match(languageParser.T__6);
                     localctx.expr =  { query: localctx.qe.query } 
                    break;

                case 2:
                    this.state = 2683;
                    localctx.c1 = this.condition();
                     localctx.expr =  [ localctx.c1.cond ] 
                    this.state = 2692;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__2) {
                        this.state = 2685;
                        this.match(languageParser.T__2);
                         if (localctx.expr.length > 1 && this.isStraightBefore(')')) break; 
                        this.state = 2687;
                        localctx.cn = this.expression();
                         if (localctx.cn.expr) localctx.expr.push(localctx.cn.expr); 
                        this.state = 2694;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2695;
                    localctx.close = this.match(languageParser.T__6);

                              if (localctx.expr.length > 1)
                                localctx.expr =  { op: this.tokenLocation( localctx.open, undefined, ',' ), args: localctx.expr }
                              else if (localctx.expr[0]) // can be `null` if condition failed to parse
                                localctx.expr =  this.surroundByParens( localctx.expr[0], localctx.open, localctx.close )
                            
                    break;

                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ this.attachLocation(localctx.expr); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SpecialFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_specialFunction;
    this.ret = { }
    this.art = {}
    this.fun = null; // Token
    this.open = null; // Token
    this.t = null; // Token
    this.e = null; // ExpressionContext
    this.f = null; // Token
    this.ca = null; // Token
    return this;
}

SpecialFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecialFunctionContext.prototype.constructor = SpecialFunctionContext;

SpecialFunctionContext.prototype.TRIM = function() {
    return this.getToken(languageParser.TRIM, 0);
};

SpecialFunctionContext.prototype.FROM = function() {
    return this.getToken(languageParser.FROM, 0);
};

SpecialFunctionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SpecialFunctionContext.prototype.LEADING = function() {
    return this.getToken(languageParser.LEADING, 0);
};

SpecialFunctionContext.prototype.TRAILING = function() {
    return this.getToken(languageParser.TRAILING, 0);
};

SpecialFunctionContext.prototype.BOTH = function() {
    return this.getToken(languageParser.BOTH, 0);
};

SpecialFunctionContext.prototype.EXTRACT = function() {
    return this.getToken(languageParser.EXTRACT, 0);
};

SpecialFunctionContext.prototype.YEAR = function() {
    return this.getToken(languageParser.YEAR, 0);
};

SpecialFunctionContext.prototype.MONTH = function() {
    return this.getToken(languageParser.MONTH, 0);
};

SpecialFunctionContext.prototype.DAY = function() {
    return this.getToken(languageParser.DAY, 0);
};

SpecialFunctionContext.prototype.HOUR = function() {
    return this.getToken(languageParser.HOUR, 0);
};

SpecialFunctionContext.prototype.MINUTE = function() {
    return this.getToken(languageParser.MINUTE, 0);
};

SpecialFunctionContext.prototype.SECOND = function() {
    return this.getToken(languageParser.SECOND, 0);
};

SpecialFunctionContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

SpecialFunctionContext.prototype.typeRefOptArgs = function() {
    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
};

SpecialFunctionContext.prototype.CAST = function() {
    return this.getToken(languageParser.CAST, 0);
};




languageParser.SpecialFunctionContext = SpecialFunctionContext;

languageParser.prototype.specialFunction = function() {

    var localctx = new SpecialFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, languageParser.RULE_specialFunction);
    var _la = 0; // Token type
    try {
        this.state = 2749;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.TRIM:
            this.enterOuterAlt(localctx, 1);
            this.state = 2704;
            localctx.fun = this.match(languageParser.TRIM);
            this.state = 2705;
            localctx.open = this.match(languageParser.T__5);
             localctx.ret =  this.functionAst( localctx.fun, localctx.open ) 
            this.state = 2727;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,369,this._ctx);
            switch(la_) {
            case 1:
                this.state = 2707;
                localctx.t = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===languageParser.BOTH || _la===languageParser.LEADING || _la===languageParser.TRAILING)) {
                    localctx.t = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                 localctx.ret.args[0].args.push( (localctx.t===null ? null : localctx.t.text) ); 
                this.state = 2712;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__4) | (1 << languageParser.T__5) | (1 << languageParser.T__9) | (1 << languageParser.T__10) | (1 << languageParser.T__16) | (1 << languageParser.T__26))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (languageParser.String - 32)) | (1 << (languageParser.QuotedLiteral - 32)) | (1 << (languageParser.Boolean - 32)) | (1 << (languageParser.CASE - 32)) | (1 << (languageParser.CAST - 32)) | (1 << (languageParser.EXTRACT - 32)) | (1 << (languageParser.NEW - 32)) | (1 << (languageParser.NULL - 32)) | (1 << (languageParser.TRIM - 32)) | (1 << (languageParser.Number - 32)) | (1 << (languageParser.ABSTRACT - 32)) | (1 << (languageParser.ACTION - 32)) | (1 << (languageParser.ACTIONS - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (languageParser.AND - 64)) | (1 << (languageParser.ANNOTATE - 64)) | (1 << (languageParser.ANNOTATION - 64)) | (1 << (languageParser.ARRAY - 64)) | (1 << (languageParser.ASC - 64)) | (1 << (languageParser.ASPECT - 64)) | (1 << (languageParser.ASSOCIATION - 64)) | (1 << (languageParser.BETWEEN - 64)) | (1 << (languageParser.BOTH - 64)) | (1 << (languageParser.COMPOSITION - 64)) | (1 << (languageParser.CONTEXT - 64)) | (1 << (languageParser.CROSS - 64)) | (1 << (languageParser.DAY - 64)) | (1 << (languageParser.DEFAULT - 64)) | (1 << (languageParser.DEFINE - 64)) | (1 << (languageParser.DESC - 64)) | (1 << (languageParser.ELEMENT - 64)) | (1 << (languageParser.ELSE - 64)) | (1 << (languageParser.END - 64)) | (1 << (languageParser.ENTITY - 64)) | (1 << (languageParser.ENUM - 64)) | (1 << (languageParser.EVENT - 64)) | (1 << (languageParser.ESCAPE - 64)) | (1 << (languageParser.EXACT - 64)) | (1 << (languageParser.EXCEPT - 64)) | (1 << (languageParser.EXCLUDING - 64)) | (1 << (languageParser.EXTEND - 64)) | (1 << (languageParser.FIRST - 64)) | (1 << (languageParser.FULL - 64)) | (1 << (languageParser.FUNCTION - 64)) | (1 << (languageParser.GROUP - 64)) | (1 << (languageParser.HAVING - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (languageParser.HOUR - 96)) | (1 << (languageParser.INNER - 96)) | (1 << (languageParser.INTERSECT - 96)) | (1 << (languageParser.INTO - 96)) | (1 << (languageParser.IS - 96)) | (1 << (languageParser.JOIN - 96)) | (1 << (languageParser.LAST - 96)) | (1 << (languageParser.LEADING - 96)) | (1 << (languageParser.LEFT - 96)) | (1 << (languageParser.LIKE - 96)) | (1 << (languageParser.LIMIT - 96)) | (1 << (languageParser.LOCALIZED - 96)) | (1 << (languageParser.MANY - 96)) | (1 << (languageParser.MASKED - 96)) | (1 << (languageParser.MINUS - 96)) | (1 << (languageParser.MINUTE - 96)) | (1 << (languageParser.MIXIN - 96)) | (1 << (languageParser.MONTH - 96)) | (1 << (languageParser.NAMESPACE - 96)) | (1 << (languageParser.NULLS - 96)) | (1 << (languageParser.OFFSET - 96)) | (1 << (languageParser.ONE - 96)) | (1 << (languageParser.OR - 96)) | (1 << (languageParser.ORDER - 96)) | (1 << (languageParser.OUTER - 96)) | (1 << (languageParser.PARAMETERS - 96)) | (1 << (languageParser.PROJECTION - 96)) | (1 << (languageParser.REDIRECTED - 96)) | (1 << (languageParser.RETURNS - 96)) | (1 << (languageParser.RIGHT - 96)) | (1 << (languageParser.SECOND - 96)) | (1 << (languageParser.SERVICE - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (languageParser.THEN - 128)) | (1 << (languageParser.TRAILING - 128)) | (1 << (languageParser.TO - 128)) | (1 << (languageParser.TYPE - 128)) | (1 << (languageParser.UNION - 128)) | (1 << (languageParser.USING - 128)) | (1 << (languageParser.VIEW - 128)) | (1 << (languageParser.YEAR - 128)) | (1 << (languageParser.Identifier - 128)) | (1 << (languageParser.HideAlternatives - 128)))) !== 0)) {
                    this.state = 2709;
                    localctx.e = this.expression();
                     localctx.ret.args[0].args.push( localctx.e.expr ); 
                }

                this.state = 2714;
                localctx.t = this.match(languageParser.FROM);
                this.state = 2715;
                localctx.e = this.expression();
                 localctx.ret.args[0].args.push( (localctx.t===null ? null : localctx.t.text), localctx.e.expr ); 
                break;

            case 2:
                this.state = 2718;
                localctx.e = this.expression();
                this.state = 2725;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.FROM:
                     localctx.ret.args[0].args.push( localctx.e.expr ); 
                    this.state = 2720;
                    localctx.t = this.match(languageParser.FROM);
                    this.state = 2721;
                    localctx.e = this.expression();
                     localctx.ret.args[0].args.push( (localctx.t===null ? null : localctx.t.text), localctx.e.expr ); 
                    break;
                case languageParser.T__6:
                     localctx.ret.args[0] = localctx.e.expr; 
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;

            }
            this.state = 2729;
            this.match(languageParser.T__6);
            break;
        case languageParser.EXTRACT:
            this.enterOuterAlt(localctx, 2);
            this.state = 2731;
            localctx.fun = this.match(languageParser.EXTRACT);
            this.state = 2732;
            localctx.open = this.match(languageParser.T__5);
             localctx.ret =  this.functionAst( localctx.fun, localctx.open ) 
            this.state = 2734;
            localctx.t = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===languageParser.DAY || _la===languageParser.HOUR || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (languageParser.MINUTE - 111)) | (1 << (languageParser.MONTH - 111)) | (1 << (languageParser.SECOND - 111)) | (1 << (languageParser.YEAR - 111)))) !== 0))) {
                localctx.t = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2735;
            localctx.f = this.match(languageParser.FROM);
            this.state = 2736;
            localctx.e = this.expression();
             localctx.ret.args[0].args.push( (localctx.t===null ? null : localctx.t.text), (localctx.f===null ? null : localctx.f.text), localctx.e.expr ); 
            this.state = 2738;
            this.match(languageParser.T__6);
            break;
        case languageParser.CAST:
            this.enterOuterAlt(localctx, 3);
            this.state = 2740;
            localctx.ca = this.match(languageParser.CAST);
            this.state = 2741;
            localctx.open = this.match(languageParser.T__5);

                  localctx.ret =  {
                    op: this.tokenLocation( localctx.ca, undefined, 'cast' ),
                    args: [ ],
                    location: this.tokenLocation( localctx.ca )
                  }
                
            this.state = 2743;
            localctx.e = this.expression();
            this.state = 2744;
            this.match(languageParser.AS);
            this.state = 2745;
            this.typeRefOptArgs( localctx.ret );

                  localctx.ret.args.push( localctx.e.expr );
                
            this.state = 2747;
            this.match(languageParser.T__6);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValuePathContext(parser, parent, invokingState, category, location) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_valuePath;
    this.category = null
    this.location = null
    this.qp = { path: [] }
    this._sync = 'nop'
    this.id = null; // IdentContext
    this.category = category || null;
    this.location = location || null;
    return this;
}

ValuePathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValuePathContext.prototype.constructor = ValuePathContext;

ValuePathContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};

ValuePathContext.prototype.pathArguments = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PathArgumentsContext);
    } else {
        return this.getTypedRuleContext(PathArgumentsContext,i);
    }
};

ValuePathContext.prototype.cardinalityAndFilter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CardinalityAndFilterContext);
    } else {
        return this.getTypedRuleContext(CardinalityAndFilterContext,i);
    }
};




languageParser.ValuePathContext = ValuePathContext;

languageParser.prototype.valuePath = function(category, location) {

    var localctx = new ValuePathContext(this, this._ctx, this.state, category, location);
    this.enterRule(localctx, 182, languageParser.RULE_valuePath);
     localctx.qp.location = location || this.startLocation(); 
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2751;
        localctx.id = this.ident( localctx.category );
         this.pushIdent( localctx.qp.path, localctx.id.id ); 
        this.state = 2758;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case languageParser.T__5:
        	this.state = 2753;
        	this.pathArguments( localctx.id.id, localctx.id.id );
        	this.state = 2755;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(_la===languageParser.T__12) {
        	    this.state = 2754;
        	    this.cardinalityAndFilter( localctx.id.id );
        	}

        	break;
        case languageParser.T__12:
        	this.state = 2757;
        	this.cardinalityAndFilter( localctx.id.id );
        	break;
        case languageParser.EOF:
        case languageParser.T__0:
        case languageParser.T__1:
        case languageParser.T__2:
        case languageParser.T__3:
        case languageParser.T__4:
        case languageParser.T__6:
        case languageParser.T__7:
        case languageParser.T__8:
        case languageParser.T__9:
        case languageParser.T__10:
        case languageParser.T__11:
        case languageParser.T__14:
        case languageParser.T__15:
        case languageParser.T__17:
        case languageParser.T__18:
        case languageParser.T__19:
        case languageParser.T__20:
        case languageParser.T__21:
        case languageParser.T__22:
        case languageParser.T__23:
        case languageParser.T__24:
        case languageParser.ALL:
        case languageParser.AS:
        case languageParser.DISTINCT:
        case languageParser.FROM:
        case languageParser.IN:
        case languageParser.NOT:
        case languageParser.NULL:
        case languageParser.ON:
        case languageParser.WHEN:
        case languageParser.WHERE:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
        case languageParser.HideAlternatives:
        case languageParser.DOTbeforeBRACE:
        	break;
        default:
        	break;
        }
        this.state = 2772;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__15) {
            this.state = 2760;
            this.match(languageParser.T__15);
            this.state = 2761;
            localctx.id = this.ident('ref');
             this.pushIdent( localctx.qp.path, localctx.id.id ); 
            this.state = 2768;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case languageParser.T__5:
            	this.state = 2763;
            	this.pathArguments( localctx.id.id );
            	this.state = 2765;
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	if(_la===languageParser.T__12) {
            	    this.state = 2764;
            	    this.cardinalityAndFilter( localctx.id.id );
            	}

            	break;
            case languageParser.T__12:
            	this.state = 2767;
            	this.cardinalityAndFilter( localctx.id.id );
            	break;
            case languageParser.EOF:
            case languageParser.T__0:
            case languageParser.T__1:
            case languageParser.T__2:
            case languageParser.T__3:
            case languageParser.T__4:
            case languageParser.T__6:
            case languageParser.T__7:
            case languageParser.T__8:
            case languageParser.T__9:
            case languageParser.T__10:
            case languageParser.T__11:
            case languageParser.T__14:
            case languageParser.T__15:
            case languageParser.T__17:
            case languageParser.T__18:
            case languageParser.T__19:
            case languageParser.T__20:
            case languageParser.T__21:
            case languageParser.T__22:
            case languageParser.T__23:
            case languageParser.T__24:
            case languageParser.ALL:
            case languageParser.AS:
            case languageParser.DISTINCT:
            case languageParser.FROM:
            case languageParser.IN:
            case languageParser.NOT:
            case languageParser.NULL:
            case languageParser.ON:
            case languageParser.WHEN:
            case languageParser.WHERE:
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.COMPOSITION:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DESC:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.ESCAPE:
            case languageParser.EXACT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FIRST:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.LAST:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MIXIN:
            case languageParser.MONTH:
            case languageParser.NAMESPACE:
            case languageParser.NULLS:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OUTER:
            case languageParser.PARAMETERS:
            case languageParser.PROJECTION:
            case languageParser.REDIRECTED:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.SECOND:
            case languageParser.SERVICE:
            case languageParser.THEN:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.YEAR:
            case languageParser.Identifier:
            case languageParser.HideAlternatives:
            case languageParser.DOTbeforeBRACE:
            	break;
            default:
            	break;
            }
            this.state = 2774;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.qp); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FromArgumentsContext(parser, parent, invokingState, pathStep) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_fromArguments;
    this.pathStep = null
    this.paren = null; // Token
    this.pathStep = pathStep || null;
    return this;
}

FromArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromArgumentsContext.prototype.constructor = FromArgumentsContext;

FromArgumentsContext.prototype.namedExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedExpressionContext);
    } else {
        return this.getTypedRuleContext(NamedExpressionContext,i);
    }
};




languageParser.FromArgumentsContext = FromArgumentsContext;

languageParser.prototype.fromArguments = function(pathStep) {

    var localctx = new FromArgumentsContext(this, this._ctx, this.state, pathStep);
    this.enterRule(localctx, 184, languageParser.RULE_fromArguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2775;
        localctx.paren = this.match(languageParser.T__5);
        this.state = 2776;
        this.namedExpression( localctx.pathStep );
        this.state = 2782;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__2) {
            this.state = 2777;
            this.match(languageParser.T__2);
             if (this.isStraightBefore(')')) break; 
            this.state = 2779;
            this.namedExpression( localctx.pathStep );
            this.state = 2784;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2785;
        this.match(languageParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PathArgumentsContext(parser, parent, invokingState, pathStep, considerSpecial) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_pathArguments;
    this.pathStep = null
    this.considerSpecial = null
    this.paren = null; // Token
    this.a = null; // Token
    this.e1 = null; // ExpressionContext
    this.d = null; // Token
    this.e2 = null; // ExpressionContext
    this.star = null; // Token
    this.pathStep = pathStep || null;
    this.considerSpecial = considerSpecial || null;
    return this;
}

PathArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathArgumentsContext.prototype.constructor = PathArgumentsContext;

PathArgumentsContext.prototype.namedExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedExpressionContext);
    } else {
        return this.getTypedRuleContext(NamedExpressionContext,i);
    }
};

PathArgumentsContext.prototype.arrowedExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArrowedExpressionContext);
    } else {
        return this.getTypedRuleContext(ArrowedExpressionContext,i);
    }
};

PathArgumentsContext.prototype.funcExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FuncExpressionContext);
    } else {
        return this.getTypedRuleContext(FuncExpressionContext,i);
    }
};

PathArgumentsContext.prototype.ALL = function() {
    return this.getToken(languageParser.ALL, 0);
};

PathArgumentsContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PathArgumentsContext.prototype.DISTINCT = function() {
    return this.getToken(languageParser.DISTINCT, 0);
};




languageParser.PathArgumentsContext = PathArgumentsContext;

languageParser.prototype.pathArguments = function(pathStep, considerSpecial) {

    var localctx = new PathArgumentsContext(this, this._ctx, this.state, pathStep, considerSpecial);
    this.enterRule(localctx, 186, languageParser.RULE_pathArguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2787;
        localctx.paren = this.match(languageParser.T__5);
         this.prepareGenericKeywords( localctx.considerSpecial ); 
        this.state = 2839;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,381,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2789;
            this.namedExpression( localctx.pathStep );
            this.state = 2795;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 2790;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore(')')) break; 
                this.state = 2792;
                this.namedExpression( localctx.pathStep );
                this.state = 2797;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
             localctx.pathStep.args = Object.create(null); 
            this.state = 2799;
            this.arrowedExpression( localctx.pathStep );
            this.state = 2805;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 2800;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore(')')) break; 
                this.state = 2802;
                this.arrowedExpression( localctx.pathStep );
                this.state = 2807;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 3:
             localctx.pathStep.args = []; 
            this.state = 2809;
            this.funcExpression( localctx.pathStep, localctx.considerSpecial );
            this.state = 2815;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 2810;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore(')')) break; 
                this.state = 2812;
                this.funcExpression( localctx.pathStep, localctx.considerSpecial );
                this.state = 2817;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 4:
            this.state = 2818;
            localctx.a = this.match(languageParser.ALL);
             localctx.pathStep.quantifier = this.tokenLocation( localctx.a, undefined, 'all' ); 
            this.state = 2820;
            localctx.e1 = this.expression();
             localctx.pathStep.args = [ localctx.e1.expr ]; 
            break;

        case 5:
            this.state = 2823;
            localctx.d = this.match(languageParser.DISTINCT);
             localctx.pathStep.quantifier = this.tokenLocation( localctx.d, undefined, 'distinct' ); 
            this.state = 2825;
            localctx.e1 = this.expression();
             localctx.pathStep.args = [ localctx.e1.expr ]; 
            this.state = 2833;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 2827;
                this.match(languageParser.T__2);
                this.state = 2828;
                localctx.e2 = this.expression();
                 localctx.pathStep.args.push( localctx.e2.expr ); 
                this.state = 2835;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 6:
            this.state = 2836;
            localctx.star = this.match(languageParser.T__11);
             localctx.pathStep.args = [ { location: this.tokenLocation(localctx.star), val: '*', literal: 'token' } ]; 
            break;

        case 7:
             localctx.pathStep.args = []; 
            break;

        }
        this.state = 2841;
        this.match(languageParser.T__6);
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedExpressionContext(parser, parent, invokingState, pathStep) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_namedExpression;
    this.pathStep = null
    this.name = null; // IdentContext
    this.elem = null; // ExpressionContext
    this.pathStep = pathStep || null;
    return this;
}

NamedExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedExpressionContext.prototype.constructor = NamedExpressionContext;

NamedExpressionContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

NamedExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};




languageParser.NamedExpressionContext = NamedExpressionContext;

languageParser.prototype.namedExpression = function(pathStep) {

    var localctx = new NamedExpressionContext(this, this._ctx, this.state, pathStep);
    this.enterRule(localctx, 188, languageParser.RULE_namedExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2843;
        localctx.name = this.ident('paramname');
        this.state = 2844;
        this.match(languageParser.T__4);
        this.state = 2845;
        localctx.elem = this.expression();
         if (localctx.pathStep && localctx.name.id) {
                this.addDef( localctx.pathStep, 'args', 0, localctx.name.id, true,
                             (localctx.elem) ? localctx.elem.expr : { location: localctx.name.id.location } );
                localctx.pathStep['$'+'syntax'] = ':';
              }
            
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrowedExpressionContext(parser, parent, invokingState, pathStep) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_arrowedExpression;
    this.pathStep = null
    this.name = null; // IdentContext
    this.a = null; // Token
    this.elem = null; // ExpressionContext
    this.pathStep = pathStep || null;
    return this;
}

ArrowedExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrowedExpressionContext.prototype.constructor = ArrowedExpressionContext;

ArrowedExpressionContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

ArrowedExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};




languageParser.ArrowedExpressionContext = ArrowedExpressionContext;

languageParser.prototype.arrowedExpression = function(pathStep) {

    var localctx = new ArrowedExpressionContext(this, this._ctx, this.state, pathStep);
    this.enterRule(localctx, 190, languageParser.RULE_arrowedExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2848;
        localctx.name = this.ident('paramname');
        this.state = 2849;
        localctx.a = this.match(languageParser.T__25);
        this.state = 2850;
        localctx.elem = this.expression();
         if (localctx.name.id) this.addDef( localctx.pathStep, 'args', 0, localctx.name.id, true,
                                         (localctx.elem) ? localctx.elem.expr : { location: localctx.name.id.location } ); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FuncExpressionContext(parser, parent, invokingState, pathStep, considerSpecial) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_funcExpression;
    this.pathStep = null
    this.considerSpecial = null
    this.only = null; // Token
    this.expr = null; // ExpressionContext
    this.pathStep = pathStep || null;
    this.considerSpecial = considerSpecial || null;
    return this;
}

FuncExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FuncExpressionContext.prototype.constructor = FuncExpressionContext;

FuncExpressionContext.prototype.GenericArgFull = function() {
    return this.getToken(languageParser.GenericArgFull, 0);
};

FuncExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};




languageParser.FuncExpressionContext = FuncExpressionContext;

languageParser.prototype.funcExpression = function(pathStep, considerSpecial) {

    var localctx = new FuncExpressionContext(this, this._ctx, this.state, pathStep, considerSpecial);
    this.enterRule(localctx, 192, languageParser.RULE_funcExpression);
     this.prepareGenericKeywords( localctx.considerSpecial ); 
    try {
        this.state = 2858;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.GenericArgFull:
            this.enterOuterAlt(localctx, 1);
            this.state = 2853;
            localctx.only = this.match(languageParser.GenericArgFull);
             localctx.pathStep.args.push( { location: this.tokenLocation(localctx.only), val: (localctx.only===null ? null : localctx.only.text), literal: 'token' } ); 
            break;
        case languageParser.T__4:
        case languageParser.T__5:
        case languageParser.T__9:
        case languageParser.T__10:
        case languageParser.T__16:
        case languageParser.T__26:
        case languageParser.String:
        case languageParser.QuotedLiteral:
        case languageParser.Boolean:
        case languageParser.CASE:
        case languageParser.CAST:
        case languageParser.EXTRACT:
        case languageParser.NEW:
        case languageParser.NULL:
        case languageParser.TRIM:
        case languageParser.Number:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
        case languageParser.HideAlternatives:
            this.enterOuterAlt(localctx, 2);
            this.state = 2855;
            localctx.expr = this.expression();
             localctx.pathStep.args.push( localctx.expr.expr ); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CardinalityAndFilterContext(parser, parent, invokingState, pathStep) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_cardinalityAndFilter;
    this.pathStep = null
    this._sync = 'nop'
    this.co = null; // ConditionContext
    this.pathStep = pathStep || null;
    return this;
}

CardinalityAndFilterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CardinalityAndFilterContext.prototype.constructor = CardinalityAndFilterContext;

CardinalityAndFilterContext.prototype.optionalWhereForFilter = function() {
    return this.getTypedRuleContext(OptionalWhereForFilterContext,0);
};

CardinalityAndFilterContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

CardinalityAndFilterContext.prototype.optionalCardinality = function() {
    return this.getTypedRuleContext(OptionalCardinalityContext,0);
};




languageParser.CardinalityAndFilterContext = CardinalityAndFilterContext;

languageParser.prototype.cardinalityAndFilter = function(pathStep) {

    var localctx = new CardinalityAndFilterContext(this, this._ctx, this.state, pathStep);
    this.enterRule(localctx, 194, languageParser.RULE_cardinalityAndFilter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2860;
        this.match(languageParser.T__12);
        this.state = 2862;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.Number) {
            this.state = 2861;
            this.optionalCardinality( pathStep );
        }

        this.state = 2864;
        this.optionalWhereForFilter();
        this.state = 2865;
        localctx.co = this.condition();
         if (localctx.pathStep) localctx.pathStep.where = localctx.co.cond; 
        this.state = 2867;
        this.match(languageParser.T__14);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionalCardinalityContext(parser, parent, invokingState, pathStep) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_optionalCardinality;
    this.pathStep = null
    this.trgMax = null; // Token
    this.pathStep = pathStep || null;
    return this;
}

OptionalCardinalityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalCardinalityContext.prototype.constructor = OptionalCardinalityContext;

OptionalCardinalityContext.prototype.Number = function() {
    return this.getToken(languageParser.Number, 0);
};




languageParser.OptionalCardinalityContext = OptionalCardinalityContext;

languageParser.prototype.optionalCardinality = function(pathStep) {

    var localctx = new OptionalCardinalityContext(this, this._ctx, this.state, pathStep);
    this.enterRule(localctx, 196, languageParser.RULE_optionalCardinality);
    try {
        this.enterOuterAlt(localctx, 1);
         if (this._input.LT(2).text !== ':') return localctx; 

        this.state = 2870;
        localctx.trgMax = this.match(languageParser.Number);
        this.state = 2871;
        this.match(languageParser.T__4);
         if (localctx.pathStep) localctx.pathStep.cardinality = { targetMax: this.numberLiteral( localctx.trgMax ) } 
        this._ctx.stop = this._input.LT(-1);
         if (localctx.pathStep && localctx.pathStep.cardinality) this.attachLocation(localctx.pathStep.cardinality); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionalWhereForFilterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_optionalWhereForFilter;
    return this;
}

OptionalWhereForFilterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalWhereForFilterContext.prototype.constructor = OptionalWhereForFilterContext;

OptionalWhereForFilterContext.prototype.WHERE = function() {
    return this.getToken(languageParser.WHERE, 0);
};




languageParser.OptionalWhereForFilterContext = OptionalWhereForFilterContext;

languageParser.prototype.optionalWhereForFilter = function() {

    var localctx = new OptionalWhereForFilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, languageParser.RULE_optionalWhereForFilter);
    try {
        this.enterOuterAlt(localctx, 1);

              var text = this.getCurrentToken().text.toUpperCase();
              if (!['WHERE','GROUP','ORDER','LIMIT'].includes( text )) return;
              // TODO: should we somehow add those keywords to $(EXPECTED)?
            
        this.state = 2875;
        this.match(languageParser.WHERE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectItemInlineListContext(parser, parent, invokingState, art, clause) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_selectItemInlineList;
    this.art = null
    this.clause = null
    this.star = null; // Token
    this.art = art || null;
    this.clause = clause || null;
    return this;
}

SelectItemInlineListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectItemInlineListContext.prototype.constructor = SelectItemInlineListContext;

SelectItemInlineListContext.prototype.selectItemInlineDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectItemInlineDefContext);
    } else {
        return this.getTypedRuleContext(SelectItemInlineDefContext,i);
    }
};




languageParser.SelectItemInlineListContext = SelectItemInlineListContext;

languageParser.prototype.selectItemInlineList = function(art, clause) {

    var localctx = new SelectItemInlineListContext(this, this._ctx, this.state, art, clause);
    this.enterRule(localctx, 200, languageParser.RULE_selectItemInlineList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2877;
        this.match(languageParser.T__1);
         localctx.art[localctx.clause] = []; 
        this.state = 2892;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__1) | (1 << languageParser.T__7) | (1 << languageParser.T__11))) !== 0) || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DESC - 61)) | (1 << (languageParser.ELEMENT - 61)) | (1 << (languageParser.ELSE - 61)) | (1 << (languageParser.END - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.ENUM - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.ESCAPE - 61)) | (1 << (languageParser.EXACT - 61)) | (1 << (languageParser.EXCEPT - 61)) | (1 << (languageParser.EXCLUDING - 61)) | (1 << (languageParser.EXTEND - 61)) | (1 << (languageParser.FIRST - 61)) | (1 << (languageParser.FULL - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)) | (1 << (languageParser.INNER - 93)) | (1 << (languageParser.INTERSECT - 93)) | (1 << (languageParser.INTO - 93)) | (1 << (languageParser.IS - 93)) | (1 << (languageParser.JOIN - 93)) | (1 << (languageParser.LAST - 93)) | (1 << (languageParser.LEADING - 93)) | (1 << (languageParser.LEFT - 93)) | (1 << (languageParser.LIKE - 93)) | (1 << (languageParser.LIMIT - 93)) | (1 << (languageParser.LOCALIZED - 93)) | (1 << (languageParser.MANY - 93)) | (1 << (languageParser.MASKED - 93)) | (1 << (languageParser.MINUS - 93)) | (1 << (languageParser.MINUTE - 93)) | (1 << (languageParser.MIXIN - 93)) | (1 << (languageParser.MONTH - 93)) | (1 << (languageParser.NAMESPACE - 93)) | (1 << (languageParser.NULLS - 93)) | (1 << (languageParser.OFFSET - 93)) | (1 << (languageParser.ONE - 93)) | (1 << (languageParser.OR - 93)) | (1 << (languageParser.ORDER - 93)) | (1 << (languageParser.OUTER - 93)) | (1 << (languageParser.PARAMETERS - 93)) | (1 << (languageParser.PROJECTION - 93)) | (1 << (languageParser.REDIRECTED - 93)) | (1 << (languageParser.RETURNS - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.RIGHT - 125)) | (1 << (languageParser.SECOND - 125)) | (1 << (languageParser.SERVICE - 125)) | (1 << (languageParser.THEN - 125)) | (1 << (languageParser.TRAILING - 125)) | (1 << (languageParser.TO - 125)) | (1 << (languageParser.TYPE - 125)) | (1 << (languageParser.UNION - 125)) | (1 << (languageParser.USING - 125)) | (1 << (languageParser.VIEW - 125)) | (1 << (languageParser.YEAR - 125)) | (1 << (languageParser.Identifier - 125)))) !== 0)) {
            this.state = 2882;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.T__11:
                this.state = 2879;
                localctx.star = this.match(languageParser.T__11);
                 localctx.art[localctx.clause].push( this.tokenLocation( localctx.star, undefined, '*' ) ); 
                break;
            case languageParser.T__1:
            case languageParser.T__7:
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.COMPOSITION:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DESC:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.ESCAPE:
            case languageParser.EXACT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FIRST:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.LAST:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MIXIN:
            case languageParser.MONTH:
            case languageParser.NAMESPACE:
            case languageParser.NULLS:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OUTER:
            case languageParser.PARAMETERS:
            case languageParser.PROJECTION:
            case languageParser.REDIRECTED:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.SECOND:
            case languageParser.SERVICE:
            case languageParser.THEN:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.YEAR:
            case languageParser.Identifier:
                this.state = 2881;
                this.selectItemInlineDef( localctx.art[localctx.clause] );
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2889;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 2884;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore("}")) break; 
                this.state = 2886;
                this.selectItemInlineDef( localctx.art[localctx.clause] );
                this.state = 2891;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 2894;
        this.match(languageParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectItemInlineDefContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_selectItemInlineDef;
    this.outer = null
    this.art = {}
    this.alias = null
    this.annos = []
    this.vp = null; // ValuePathContext
    this.n1 = null; // IdentContext
    this.n2 = null; // IdentContext
    this.outer = outer || null;
    return this;
}

SelectItemInlineDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectItemInlineDefContext.prototype.constructor = SelectItemInlineDefContext;

SelectItemInlineDefContext.prototype.selectItemInlineList = function() {
    return this.getTypedRuleContext(SelectItemInlineListContext,0);
};

SelectItemInlineDefContext.prototype.annotationAssignment_atn = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_atnContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_atnContext,i);
    }
};

SelectItemInlineDefContext.prototype.valuePath = function() {
    return this.getTypedRuleContext(ValuePathContext,0);
};

SelectItemInlineDefContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

SelectItemInlineDefContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

SelectItemInlineDefContext.prototype.DOTbeforeBRACE = function() {
    return this.getToken(languageParser.DOTbeforeBRACE, 0);
};

SelectItemInlineDefContext.prototype.selectItemInlineSpec = function() {
    return this.getTypedRuleContext(SelectItemInlineSpecContext,0);
};

SelectItemInlineDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};




languageParser.SelectItemInlineDefContext = SelectItemInlineDefContext;

languageParser.prototype.selectItemInlineDef = function(outer) {

    var localctx = new SelectItemInlineDefContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 202, languageParser.RULE_selectItemInlineDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.docComment( localctx.annos ); 
        this.state = 2900;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 2897;
            this.annotationAssignment_atn( localctx.annos );
            this.state = 2902;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2938;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
            this.state = 2903;
            localctx.vp = this.valuePath( 'ref', null );
             localctx.art =  this.addItem( localctx.outer, null, null, localctx.annos, { value: this.valuePathAst( localctx.vp.qp ) }) 
            this.state = 2913;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.AS:
                this.state = 2905;
                this.match(languageParser.AS);
                this.state = 2906;
                localctx.n1 = this.ident('Item');
                 localctx.art.name = localctx.n1.id 
                break;
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.COMPOSITION:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DESC:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.ESCAPE:
            case languageParser.EXACT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FIRST:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.LAST:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MIXIN:
            case languageParser.MONTH:
            case languageParser.NAMESPACE:
            case languageParser.NULLS:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OUTER:
            case languageParser.PARAMETERS:
            case languageParser.PROJECTION:
            case languageParser.REDIRECTED:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.SECOND:
            case languageParser.SERVICE:
            case languageParser.THEN:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.YEAR:
            case languageParser.Identifier:
                this.state = 2909;
                localctx.n2 = this.ident('Item');
                 this.fragileAlias( localctx.n2.id, true );; localctx.art.name = localctx.n2.id 
                break;
            case languageParser.T__1:
            case languageParser.T__2:
            case languageParser.T__3:
            case languageParser.T__7:
            case languageParser.DOTbeforeBRACE:
                 this.classifyImplicitName( 'Item', localctx.vp.qp ); 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2918;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case languageParser.T__1:
            	this.state = 2915;
            	this.selectItemInlineList( localctx.art, 'expand' );
            	break;
            case languageParser.DOTbeforeBRACE:
            	this.state = 2916;
            	this.match(languageParser.DOTbeforeBRACE);
            	this.state = 2917;
            	this.selectItemInlineSpec( localctx.art );
            	break;
            case languageParser.T__2:
            case languageParser.T__3:
            case languageParser.T__7:
            	break;
            default:
            	break;
            }
             this.docComment( localctx.annos ); 
            this.state = 2924;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7) {
                this.state = 2921;
                this.annotationAssignment_fix( localctx.annos );
                this.state = 2926;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case languageParser.T__1:

                    localctx.art =  this.addItem( localctx.outer, null, null, localctx.annos, {} )
                  
            this.state = 2928;
            this.selectItemInlineList( localctx.art, 'expand' );
            this.state = 2936;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.AS:
                this.state = 2929;
                this.match(languageParser.AS);
                this.state = 2930;
                localctx.n1 = this.ident('Item');
                 localctx.art.name = localctx.n1.id 
                break;
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.COMPOSITION:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DESC:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.ESCAPE:
            case languageParser.EXACT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FIRST:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.LAST:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MIXIN:
            case languageParser.MONTH:
            case languageParser.NAMESPACE:
            case languageParser.NULLS:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OUTER:
            case languageParser.PARAMETERS:
            case languageParser.PROJECTION:
            case languageParser.REDIRECTED:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.SECOND:
            case languageParser.SERVICE:
            case languageParser.THEN:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.YEAR:
            case languageParser.Identifier:
                this.state = 2933;
                localctx.n2 = this.ident('Item');
                 this.fragileAlias( localctx.n2.id, true );; localctx.art.name = localctx.n2.id 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectItemInlineSpecContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_selectItemInlineSpec;
    this.outer = null
    this.star = null; // Token
    this.outer = outer || null;
    return this;
}

SelectItemInlineSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectItemInlineSpecContext.prototype.constructor = SelectItemInlineSpecContext;

SelectItemInlineSpecContext.prototype.selectItemInlineList = function() {
    return this.getTypedRuleContext(SelectItemInlineListContext,0);
};




languageParser.SelectItemInlineSpecContext = SelectItemInlineSpecContext;

languageParser.prototype.selectItemInlineSpec = function(outer) {

    var localctx = new SelectItemInlineSpecContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 204, languageParser.RULE_selectItemInlineSpec);
    try {
        this.state = 2943;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2940;
            this.selectItemInlineList( localctx.outer, 'inline' );
            break;
        case languageParser.T__11:
            this.enterOuterAlt(localctx, 2);
            this.state = 2941;
            localctx.star = this.match(languageParser.T__11);
             localctx.outer.inline = [ this.tokenLocation( localctx.star, undefined, '*' ) ]; 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnoValueBaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annoValueBase;
    this.val = null
    this.head = null; // ArrayValueContext
    this.tail = null; // ArrayValueContext
    this.v1 = null; // LiteralValueContext
    this.plus = null; // Token
    this.min = null; // Token
    this.num = null; // Token
    return this;
}

AnnoValueBaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnoValueBaseContext.prototype.constructor = AnnoValueBaseContext;

AnnoValueBaseContext.prototype.namedValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedValueContext);
    } else {
        return this.getTypedRuleContext(NamedValueContext,i);
    }
};

AnnoValueBaseContext.prototype.arrayValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArrayValueContext);
    } else {
        return this.getTypedRuleContext(ArrayValueContext,i);
    }
};

AnnoValueBaseContext.prototype.literalValue = function() {
    return this.getTypedRuleContext(LiteralValueContext,0);
};

AnnoValueBaseContext.prototype.Number = function() {
    return this.getToken(languageParser.Number, 0);
};




languageParser.AnnoValueBaseContext = AnnoValueBaseContext;

languageParser.prototype.annoValueBase = function() {

    var localctx = new AnnoValueBaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, languageParser.RULE_annoValueBase);
    var _la = 0; // Token type
    try {
        this.state = 2985;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.enterOuterAlt(localctx, 1);
             localctx.val =  { literal: 'struct', location: this.startLocation() } 
            this.state = 2946;
            this.match(languageParser.T__1);
             this.meltKeywordToIdentifier(); 
            this.state = 2948;
            this.namedValue( localctx.val );
            this.state = 2954;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 2949;
                this.match(languageParser.T__2);

                        this.meltKeywordToIdentifier();
                        if (this.isStraightBefore("}")) break; // allow ',' before ')'
                      
                this.state = 2951;
                this.namedValue( localctx.val );
                this.state = 2956;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2957;
            this.match(languageParser.T__3);
            break;
        case languageParser.T__12:
            this.enterOuterAlt(localctx, 2);
             localctx.val =  { literal: 'array', location: this.startLocation(), val: [] } 
            this.state = 2960;
            this.match(languageParser.T__12);
            this.state = 2973;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__1) | (1 << languageParser.T__7) | (1 << languageParser.T__9) | (1 << languageParser.T__10) | (1 << languageParser.T__12) | (1 << languageParser.T__26))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (languageParser.String - 32)) | (1 << (languageParser.QuotedLiteral - 32)) | (1 << (languageParser.Boolean - 32)) | (1 << (languageParser.NULL - 32)) | (1 << (languageParser.Number - 32)) | (1 << (languageParser.ABSTRACT - 32)) | (1 << (languageParser.ACTION - 32)) | (1 << (languageParser.ACTIONS - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (languageParser.AND - 64)) | (1 << (languageParser.ANNOTATE - 64)) | (1 << (languageParser.ANNOTATION - 64)) | (1 << (languageParser.ARRAY - 64)) | (1 << (languageParser.ASC - 64)) | (1 << (languageParser.ASPECT - 64)) | (1 << (languageParser.ASSOCIATION - 64)) | (1 << (languageParser.BETWEEN - 64)) | (1 << (languageParser.BOTH - 64)) | (1 << (languageParser.COMPOSITION - 64)) | (1 << (languageParser.CONTEXT - 64)) | (1 << (languageParser.CROSS - 64)) | (1 << (languageParser.DAY - 64)) | (1 << (languageParser.DEFAULT - 64)) | (1 << (languageParser.DEFINE - 64)) | (1 << (languageParser.DESC - 64)) | (1 << (languageParser.ELEMENT - 64)) | (1 << (languageParser.ELSE - 64)) | (1 << (languageParser.END - 64)) | (1 << (languageParser.ENTITY - 64)) | (1 << (languageParser.ENUM - 64)) | (1 << (languageParser.EVENT - 64)) | (1 << (languageParser.ESCAPE - 64)) | (1 << (languageParser.EXACT - 64)) | (1 << (languageParser.EXCEPT - 64)) | (1 << (languageParser.EXCLUDING - 64)) | (1 << (languageParser.EXTEND - 64)) | (1 << (languageParser.FIRST - 64)) | (1 << (languageParser.FULL - 64)) | (1 << (languageParser.FUNCTION - 64)) | (1 << (languageParser.GROUP - 64)) | (1 << (languageParser.HAVING - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (languageParser.HOUR - 96)) | (1 << (languageParser.INNER - 96)) | (1 << (languageParser.INTERSECT - 96)) | (1 << (languageParser.INTO - 96)) | (1 << (languageParser.IS - 96)) | (1 << (languageParser.JOIN - 96)) | (1 << (languageParser.LAST - 96)) | (1 << (languageParser.LEADING - 96)) | (1 << (languageParser.LEFT - 96)) | (1 << (languageParser.LIKE - 96)) | (1 << (languageParser.LIMIT - 96)) | (1 << (languageParser.LOCALIZED - 96)) | (1 << (languageParser.MANY - 96)) | (1 << (languageParser.MASKED - 96)) | (1 << (languageParser.MINUS - 96)) | (1 << (languageParser.MINUTE - 96)) | (1 << (languageParser.MIXIN - 96)) | (1 << (languageParser.MONTH - 96)) | (1 << (languageParser.NAMESPACE - 96)) | (1 << (languageParser.NULLS - 96)) | (1 << (languageParser.OFFSET - 96)) | (1 << (languageParser.ONE - 96)) | (1 << (languageParser.OR - 96)) | (1 << (languageParser.ORDER - 96)) | (1 << (languageParser.OUTER - 96)) | (1 << (languageParser.PARAMETERS - 96)) | (1 << (languageParser.PROJECTION - 96)) | (1 << (languageParser.REDIRECTED - 96)) | (1 << (languageParser.RETURNS - 96)) | (1 << (languageParser.RIGHT - 96)) | (1 << (languageParser.SECOND - 96)) | (1 << (languageParser.SERVICE - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (languageParser.THEN - 128)) | (1 << (languageParser.TRAILING - 128)) | (1 << (languageParser.TO - 128)) | (1 << (languageParser.TYPE - 128)) | (1 << (languageParser.UNION - 128)) | (1 << (languageParser.USING - 128)) | (1 << (languageParser.VIEW - 128)) | (1 << (languageParser.YEAR - 128)) | (1 << (languageParser.Identifier - 128)))) !== 0)) {
                this.state = 2961;
                localctx.head = this.arrayValue();
                 localctx.val.val.push( localctx.head.val ); 
                this.state = 2970;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__2) {
                    this.state = 2963;
                    this.match(languageParser.T__2);
                     if (this.isStraightBefore(']')) break; 
                    this.state = 2965;
                    localctx.tail = this.arrayValue();
                     localctx.val.val.push( localctx.tail.val ); 
                    this.state = 2972;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 2975;
            this.match(languageParser.T__14);
            break;
        case languageParser.T__26:
        case languageParser.String:
        case languageParser.QuotedLiteral:
        case languageParser.Boolean:
        case languageParser.NULL:
        case languageParser.Number:
            this.enterOuterAlt(localctx, 3);
            this.state = 2976;
            localctx.v1 = this.literalValue();
             localctx.val =  localctx.v1.val 
            break;
        case languageParser.T__9:
        case languageParser.T__10:
            this.enterOuterAlt(localctx, 4);
            this.state = 2981;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.T__9:
                this.state = 2979;
                localctx.plus = this.match(languageParser.T__9);
                break;
            case languageParser.T__10:
                this.state = 2980;
                localctx.min = this.match(languageParser.T__10);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2983;
            localctx.num = this.match(languageParser.Number);
             localctx.val =  this.numberLiteral( localctx.num, localctx.plus||localctx.min ) 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.val); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnoValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annoValue;
    this.val = null
    this.base = null; // AnnoValueBaseContext
    this.at = null; // Token
    return this;
}

AnnoValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnoValueContext.prototype.constructor = AnnoValueContext;

AnnoValueContext.prototype.annoValueBase = function() {
    return this.getTypedRuleContext(AnnoValueBaseContext,0);
};

AnnoValueContext.prototype.annotationPath = function() {
    return this.getTypedRuleContext(AnnotationPathContext,0);
};

AnnoValueContext.prototype.annotationPathVariant = function() {
    return this.getTypedRuleContext(AnnotationPathVariantContext,0);
};




languageParser.AnnoValueContext = AnnoValueContext;

languageParser.prototype.annoValue = function() {

    var localctx = new AnnoValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, languageParser.RULE_annoValue);
    var _la = 0; // Token type
    try {
        this.state = 2998;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
        case languageParser.T__9:
        case languageParser.T__10:
        case languageParser.T__12:
        case languageParser.T__26:
        case languageParser.String:
        case languageParser.QuotedLiteral:
        case languageParser.Boolean:
        case languageParser.NULL:
        case languageParser.Number:
            this.enterOuterAlt(localctx, 1);
            this.state = 2987;
            localctx.base = this.annoValueBase();
             localctx.val = localctx.base.val 
            break;
        case languageParser.T__7:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
            this.enterOuterAlt(localctx, 2);
             localctx.val =  {} 
            this.state = 2992;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__7) {
                this.state = 2991;
                localctx.at = this.match(languageParser.T__7);
            }

            this.state = 2994;
            this.annotationPath( localctx.val, 'ref', localctx.at );
            this.state = 2996;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__26) {
                this.state = 2995;
                this.annotationPathVariant( localctx.val );
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedValueContext(parser, parent, invokingState, struct) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_namedValue;
    this.struct = null
    this.namedVal = { name: {} }
    this.at = null; // Token
    this.variant = null; // IdentContext
    this.elem = null; // AnnoValueContext
    this.struct = struct || null;
    return this;
}

NamedValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedValueContext.prototype.constructor = NamedValueContext;

NamedValueContext.prototype.annotationPath = function() {
    return this.getTypedRuleContext(AnnotationPathContext,0);
};

NamedValueContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

NamedValueContext.prototype.annoValue = function() {
    return this.getTypedRuleContext(AnnoValueContext,0);
};




languageParser.NamedValueContext = NamedValueContext;

languageParser.prototype.namedValue = function(struct) {

    var localctx = new NamedValueContext(this, this._ctx, this.state, struct);
    this.enterRule(localctx, 210, languageParser.RULE_namedValue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3001;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__7) {
            this.state = 3000;
            localctx.at = this.match(languageParser.T__7);
        }

        this.state = 3003;
        this.annotationPath( localctx.namedVal.name, 'name', localctx.at );
        this.state = 3009;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__26) {
            this.state = 3004;
            this.match(languageParser.T__26);
             this.meltKeywordToIdentifier(); 
            this.state = 3006;
            localctx.variant = this.ident('variant');
             localctx.namedVal.name.variant = localctx.variant.id; 
        }

        this.state = 3014;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__4) {
            this.state = 3011;
            this.match(languageParser.T__4);
             this.meltKeywordToIdentifier(true); 
            this.state = 3013;
            localctx.elem = this.annoValue();
        }

         this.addItem( localctx.struct, '_struct', null, true, // TODO: re-check _struct
                            (localctx.elem) ? Object.assign(localctx.namedVal, localctx.elem.val) : localctx.namedVal ); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_arrayValue;
    this.val = null
    this.head = null; // ArrayValueContext
    this.tail = null; // ArrayValueContext
    this.v1 = null; // LiteralValueContext
    this.plus = null; // Token
    this.min = null; // Token
    this.num = null; // Token
    this.at = null; // Token
    this.variant = null; // IdentContext
    return this;
}

ArrayValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayValueContext.prototype.constructor = ArrayValueContext;

ArrayValueContext.prototype.namedValueInArray = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedValueInArrayContext);
    } else {
        return this.getTypedRuleContext(NamedValueInArrayContext,i);
    }
};

ArrayValueContext.prototype.arrayValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArrayValueContext);
    } else {
        return this.getTypedRuleContext(ArrayValueContext,i);
    }
};

ArrayValueContext.prototype.literalValue = function() {
    return this.getTypedRuleContext(LiteralValueContext,0);
};

ArrayValueContext.prototype.Number = function() {
    return this.getToken(languageParser.Number, 0);
};

ArrayValueContext.prototype.annotationPath = function() {
    return this.getTypedRuleContext(AnnotationPathContext,0);
};

ArrayValueContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};




languageParser.ArrayValueContext = ArrayValueContext;

languageParser.prototype.arrayValue = function() {

    var localctx = new ArrayValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, languageParser.RULE_arrayValue);
    var _la = 0; // Token type
    try {
        this.state = 3070;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.enterOuterAlt(localctx, 1);
             localctx.val =  { literal: 'struct', location: this.startLocation() } 
            this.state = 3019;
            this.match(languageParser.T__1);
             this.meltKeywordToIdentifier(); 
            this.state = 3021;
            this.namedValueInArray( localctx.val );
            this.state = 3027;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 3022;
                this.match(languageParser.T__2);

                        this.meltKeywordToIdentifier();
                        if (this.isStraightBefore("}")) break; // allow ',' before '}'
                      
                this.state = 3024;
                this.namedValueInArray( localctx.val );
                this.state = 3029;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3030;
            this.match(languageParser.T__3);
            break;
        case languageParser.T__12:
            this.enterOuterAlt(localctx, 2);
             localctx.val =  { literal: 'array', location: this.startLocation(), val: [] } 
            this.state = 3033;
            this.match(languageParser.T__12);
            this.state = 3046;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__1) | (1 << languageParser.T__7) | (1 << languageParser.T__9) | (1 << languageParser.T__10) | (1 << languageParser.T__12) | (1 << languageParser.T__26))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (languageParser.String - 32)) | (1 << (languageParser.QuotedLiteral - 32)) | (1 << (languageParser.Boolean - 32)) | (1 << (languageParser.NULL - 32)) | (1 << (languageParser.Number - 32)) | (1 << (languageParser.ABSTRACT - 32)) | (1 << (languageParser.ACTION - 32)) | (1 << (languageParser.ACTIONS - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (languageParser.AND - 64)) | (1 << (languageParser.ANNOTATE - 64)) | (1 << (languageParser.ANNOTATION - 64)) | (1 << (languageParser.ARRAY - 64)) | (1 << (languageParser.ASC - 64)) | (1 << (languageParser.ASPECT - 64)) | (1 << (languageParser.ASSOCIATION - 64)) | (1 << (languageParser.BETWEEN - 64)) | (1 << (languageParser.BOTH - 64)) | (1 << (languageParser.COMPOSITION - 64)) | (1 << (languageParser.CONTEXT - 64)) | (1 << (languageParser.CROSS - 64)) | (1 << (languageParser.DAY - 64)) | (1 << (languageParser.DEFAULT - 64)) | (1 << (languageParser.DEFINE - 64)) | (1 << (languageParser.DESC - 64)) | (1 << (languageParser.ELEMENT - 64)) | (1 << (languageParser.ELSE - 64)) | (1 << (languageParser.END - 64)) | (1 << (languageParser.ENTITY - 64)) | (1 << (languageParser.ENUM - 64)) | (1 << (languageParser.EVENT - 64)) | (1 << (languageParser.ESCAPE - 64)) | (1 << (languageParser.EXACT - 64)) | (1 << (languageParser.EXCEPT - 64)) | (1 << (languageParser.EXCLUDING - 64)) | (1 << (languageParser.EXTEND - 64)) | (1 << (languageParser.FIRST - 64)) | (1 << (languageParser.FULL - 64)) | (1 << (languageParser.FUNCTION - 64)) | (1 << (languageParser.GROUP - 64)) | (1 << (languageParser.HAVING - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (languageParser.HOUR - 96)) | (1 << (languageParser.INNER - 96)) | (1 << (languageParser.INTERSECT - 96)) | (1 << (languageParser.INTO - 96)) | (1 << (languageParser.IS - 96)) | (1 << (languageParser.JOIN - 96)) | (1 << (languageParser.LAST - 96)) | (1 << (languageParser.LEADING - 96)) | (1 << (languageParser.LEFT - 96)) | (1 << (languageParser.LIKE - 96)) | (1 << (languageParser.LIMIT - 96)) | (1 << (languageParser.LOCALIZED - 96)) | (1 << (languageParser.MANY - 96)) | (1 << (languageParser.MASKED - 96)) | (1 << (languageParser.MINUS - 96)) | (1 << (languageParser.MINUTE - 96)) | (1 << (languageParser.MIXIN - 96)) | (1 << (languageParser.MONTH - 96)) | (1 << (languageParser.NAMESPACE - 96)) | (1 << (languageParser.NULLS - 96)) | (1 << (languageParser.OFFSET - 96)) | (1 << (languageParser.ONE - 96)) | (1 << (languageParser.OR - 96)) | (1 << (languageParser.ORDER - 96)) | (1 << (languageParser.OUTER - 96)) | (1 << (languageParser.PARAMETERS - 96)) | (1 << (languageParser.PROJECTION - 96)) | (1 << (languageParser.REDIRECTED - 96)) | (1 << (languageParser.RETURNS - 96)) | (1 << (languageParser.RIGHT - 96)) | (1 << (languageParser.SECOND - 96)) | (1 << (languageParser.SERVICE - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (languageParser.THEN - 128)) | (1 << (languageParser.TRAILING - 128)) | (1 << (languageParser.TO - 128)) | (1 << (languageParser.TYPE - 128)) | (1 << (languageParser.UNION - 128)) | (1 << (languageParser.USING - 128)) | (1 << (languageParser.VIEW - 128)) | (1 << (languageParser.YEAR - 128)) | (1 << (languageParser.Identifier - 128)))) !== 0)) {
                this.state = 3034;
                localctx.head = this.arrayValue();
                 localctx.val.val.push( localctx.head.val ); 
                this.state = 3043;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__2) {
                    this.state = 3036;
                    this.match(languageParser.T__2);
                     if (this.isStraightBefore(']')) break; 
                    this.state = 3038;
                    localctx.tail = this.arrayValue();
                     localctx.val.val.push( localctx.tail.val ); 
                    this.state = 3045;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 3048;
            this.match(languageParser.T__14);
            break;
        case languageParser.T__26:
        case languageParser.String:
        case languageParser.QuotedLiteral:
        case languageParser.Boolean:
        case languageParser.NULL:
        case languageParser.Number:
            this.enterOuterAlt(localctx, 3);
            this.state = 3049;
            localctx.v1 = this.literalValue();
             localctx.val =  localctx.v1.val 
            break;
        case languageParser.T__9:
        case languageParser.T__10:
            this.enterOuterAlt(localctx, 4);
            this.state = 3054;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.T__9:
                this.state = 3052;
                localctx.plus = this.match(languageParser.T__9);
                break;
            case languageParser.T__10:
                this.state = 3053;
                localctx.min = this.match(languageParser.T__10);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 3056;
            localctx.num = this.match(languageParser.Number);
             localctx.val =  this.numberLiteral( localctx.num, localctx.plus||localctx.min ) 
            break;
        case languageParser.T__7:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
            this.enterOuterAlt(localctx, 5);
             localctx.val =  {} 
            this.state = 3060;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__7) {
                this.state = 3059;
                localctx.at = this.match(languageParser.T__7);
            }

            this.state = 3062;
            this.annotationPath( localctx.val, 'ref', localctx.at );
            this.state = 3068;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__26) {
                this.state = 3063;
                this.match(languageParser.T__26);
                 this.meltKeywordToIdentifier(); 
                this.state = 3065;
                localctx.variant = this.ident('variant');
                 localctx.val.variant = localctx.variant.id; 
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.val); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedValueInArrayContext(parser, parent, invokingState, struct) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_namedValueInArray;
    this.struct = null
    this.name = {}
    this.at = null; // Token
    this.elem = null; // ArrayValueContext
    this.struct = struct || null;
    return this;
}

NamedValueInArrayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedValueInArrayContext.prototype.constructor = NamedValueInArrayContext;

NamedValueInArrayContext.prototype.annotationPath = function() {
    return this.getTypedRuleContext(AnnotationPathContext,0);
};

NamedValueInArrayContext.prototype.arrayValue = function() {
    return this.getTypedRuleContext(ArrayValueContext,0);
};




languageParser.NamedValueInArrayContext = NamedValueInArrayContext;

languageParser.prototype.namedValueInArray = function(struct) {

    var localctx = new NamedValueInArrayContext(this, this._ctx, this.state, struct);
    this.enterRule(localctx, 214, languageParser.RULE_namedValueInArray);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3073;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__7) {
            this.state = 3072;
            localctx.at = this.match(languageParser.T__7);
        }

        this.state = 3075;
        this.annotationPath( localctx.name, 'name', localctx.at );
        this.state = 3078;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__4) {
            this.state = 3076;
            this.match(languageParser.T__4);
            this.state = 3077;
            localctx.elem = this.arrayValue();
        }

         this.addDef( localctx.struct, 'struct', null, localctx.name, true,
                           (localctx.elem) ? localctx.elem.val : { location: localctx.name.location } ); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_literalValue;
    this.val = null
    this.tok = null
    this.name = null; // IdentContext
    return this;
}

LiteralValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralValueContext.prototype.constructor = LiteralValueContext;

LiteralValueContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

LiteralValueContext.prototype.NULL = function() {
    return this.getToken(languageParser.NULL, 0);
};

LiteralValueContext.prototype.Boolean = function() {
    return this.getToken(languageParser.Boolean, 0);
};

LiteralValueContext.prototype.Number = function() {
    return this.getToken(languageParser.Number, 0);
};

LiteralValueContext.prototype.String = function() {
    return this.getToken(languageParser.String, 0);
};

LiteralValueContext.prototype.QuotedLiteral = function() {
    return this.getToken(languageParser.QuotedLiteral, 0);
};




languageParser.LiteralValueContext = LiteralValueContext;

languageParser.prototype.literalValue = function() {

    var localctx = new LiteralValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, languageParser.RULE_literalValue);
     localctx.tok =  this.getCurrentToken() 
    try {
        this.state = 3096;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__26:
            this.enterOuterAlt(localctx, 1);
            this.state = 3082;
            this.match(languageParser.T__26);
            this.state = 3083;
            localctx.name = this.ident('enumref');
             localctx.val = { literal: 'enum', sym: localctx.name.id } 
            break;
        case languageParser.NULL:
            this.enterOuterAlt(localctx, 2);
            this.state = 3086;
            this.match(languageParser.NULL);
             localctx.val =  { literal: 'null', val: null } 
            break;
        case languageParser.Boolean:
            this.enterOuterAlt(localctx, 3);
            this.state = 3088;
            this.match(languageParser.Boolean);
             localctx.val =  { literal: 'boolean', val: localctx.tok.text.toLowerCase() != 'false' } 
            break;
        case languageParser.Number:
            this.enterOuterAlt(localctx, 4);
            this.state = 3090;
            this.match(languageParser.Number);
             localctx.val =  this.numberLiteral( localctx.tok, '' ) 
            break;
        case languageParser.String:
            this.enterOuterAlt(localctx, 5);
            this.state = 3092;
            this.match(languageParser.String);
             localctx.val =  this.quotedLiteral( localctx.tok, 'string' ) 
            break;
        case languageParser.QuotedLiteral:
            this.enterOuterAlt(localctx, 6);
            this.state = 3094;
            this.match(languageParser.QuotedLiteral);
             localctx.val =  this.quotedLiteral( localctx.tok ) 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.val); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimplePathContext(parser, parent, invokingState, art, category) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_simplePath;
    this.art = null
    this.category = null
    this._sync = 'nop'
    this.head = null; // IdentContext
    this.tail = null; // IdentContext
    this.art = art || null;
    this.category = category || null;
    return this;
}

SimplePathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimplePathContext.prototype.constructor = SimplePathContext;

SimplePathContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};




languageParser.SimplePathContext = SimplePathContext;

languageParser.prototype.simplePath = function(art, category) {

    var localctx = new SimplePathContext(this, this._ctx, this.state, art, category);
    this.enterRule(localctx, 218, languageParser.RULE_simplePath);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3098;
        localctx.head = this.ident( localctx.category );
         if (!localctx.art.path) localctx.art.path = []; this.pushIdent( localctx.art.path, localctx.head.id );
              if (localctx.category === 'artref') localctx.art.scope = 0;
            
        this.state = 3106;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__15) {
            this.state = 3100;
            this.match(languageParser.T__15);
            this.state = 3101;
            localctx.tail = this.ident( localctx.category );
             this.pushIdent( localctx.art.path, localctx.tail.id ); 
            this.state = 3108;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotationPathContext(parser, parent, invokingState, art, category, headat) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotationPath;
    this.art = null
    this.category = null
    this.headat = null
    this._sync = 'nop'
    this.head = null; // IdentContext
    this.at = null; // Token
    this.tail = null; // IdentContext
    this.art = art || null;
    this.category = category || null;
    this.headat = headat || null;
    return this;
}

AnnotationPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationPathContext.prototype.constructor = AnnotationPathContext;

AnnotationPathContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};




languageParser.AnnotationPathContext = AnnotationPathContext;

languageParser.prototype.annotationPath = function(art, category, headat) {

    var localctx = new AnnotationPathContext(this, this._ctx, this.state, art, category, headat);
    this.enterRule(localctx, 220, languageParser.RULE_annotationPath);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3109;
        localctx.head = this.ident( localctx.category );
         localctx.art.path = []; this.pushIdent( localctx.art.path, localctx.head.id, localctx.headat );
              if (localctx.category === 'artref') localctx.art.scope = 0;
            
        this.state = 3120;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__15) {
            this.state = 3111;
            this.match(languageParser.T__15);
            this.state = 3113;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__7) {
                this.state = 3112;
                localctx.at = this.match(languageParser.T__7);
            }

            this.state = 3115;
            localctx.tail = this.ident( localctx.category );
             this.pushIdent( localctx.art.path, localctx.tail.id, localctx.at );
                    // Otherwise, localctx.at may continue to be set after one `.@anno` segment.
                    localctx.at = null;
                  
            this.state = 3122;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotationPathVariantContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotationPathVariant;
    this.art = null
    this.variant = null; // IdentContext
    this.art = art || null;
    return this;
}

AnnotationPathVariantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationPathVariantContext.prototype.constructor = AnnotationPathVariantContext;

AnnotationPathVariantContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};




languageParser.AnnotationPathVariantContext = AnnotationPathVariantContext;

languageParser.prototype.annotationPathVariant = function(art) {

    var localctx = new AnnotationPathVariantContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 222, languageParser.RULE_annotationPathVariant);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3123;
        this.match(languageParser.T__26);
         this.meltKeywordToIdentifier(); 
        this.state = 3125;
        localctx.variant = this.ident('variant');
         localctx.art.variant = localctx.variant.id; 
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentNoKeywordContext(parser, parent, invokingState, category) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_identNoKeyword;
    this.category = null
    this.id = null
    this.category = category || null;
    return this;
}

IdentNoKeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentNoKeywordContext.prototype.constructor = IdentNoKeywordContext;

IdentNoKeywordContext.prototype.Identifier = function() {
    return this.getToken(languageParser.Identifier, 0);
};




languageParser.IdentNoKeywordContext = IdentNoKeywordContext;

languageParser.prototype.identNoKeyword = function(category) {

    var localctx = new IdentNoKeywordContext(this, this._ctx, this.state, category);
    this.enterRule(localctx, 224, languageParser.RULE_identNoKeyword);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3128;
        this.match(languageParser.Identifier);
        this._ctx.stop = this._input.LT(-1);
         localctx.id =  this.identAst( localctx.stop, localctx.category ) 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentContext(parser, parent, invokingState, category) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_ident;
    this.category = null
    this.id = null
    this.category = category || null;
    return this;
}

IdentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentContext.prototype.constructor = IdentContext;

IdentContext.prototype.Identifier = function() {
    return this.getToken(languageParser.Identifier, 0);
};

IdentContext.prototype.ABSTRACT = function() {
    return this.getToken(languageParser.ABSTRACT, 0);
};

IdentContext.prototype.ACTION = function() {
    return this.getToken(languageParser.ACTION, 0);
};

IdentContext.prototype.ACTIONS = function() {
    return this.getToken(languageParser.ACTIONS, 0);
};

IdentContext.prototype.AND = function() {
    return this.getToken(languageParser.AND, 0);
};

IdentContext.prototype.ANNOTATE = function() {
    return this.getToken(languageParser.ANNOTATE, 0);
};

IdentContext.prototype.ANNOTATION = function() {
    return this.getToken(languageParser.ANNOTATION, 0);
};

IdentContext.prototype.ARRAY = function() {
    return this.getToken(languageParser.ARRAY, 0);
};

IdentContext.prototype.ASC = function() {
    return this.getToken(languageParser.ASC, 0);
};

IdentContext.prototype.ASPECT = function() {
    return this.getToken(languageParser.ASPECT, 0);
};

IdentContext.prototype.ASSOCIATION = function() {
    return this.getToken(languageParser.ASSOCIATION, 0);
};

IdentContext.prototype.BETWEEN = function() {
    return this.getToken(languageParser.BETWEEN, 0);
};

IdentContext.prototype.BOTH = function() {
    return this.getToken(languageParser.BOTH, 0);
};

IdentContext.prototype.COMPOSITION = function() {
    return this.getToken(languageParser.COMPOSITION, 0);
};

IdentContext.prototype.CONTEXT = function() {
    return this.getToken(languageParser.CONTEXT, 0);
};

IdentContext.prototype.CROSS = function() {
    return this.getToken(languageParser.CROSS, 0);
};

IdentContext.prototype.DAY = function() {
    return this.getToken(languageParser.DAY, 0);
};

IdentContext.prototype.DEFAULT = function() {
    return this.getToken(languageParser.DEFAULT, 0);
};

IdentContext.prototype.DEFINE = function() {
    return this.getToken(languageParser.DEFINE, 0);
};

IdentContext.prototype.DESC = function() {
    return this.getToken(languageParser.DESC, 0);
};

IdentContext.prototype.ELEMENT = function() {
    return this.getToken(languageParser.ELEMENT, 0);
};

IdentContext.prototype.ELSE = function() {
    return this.getToken(languageParser.ELSE, 0);
};

IdentContext.prototype.END = function() {
    return this.getToken(languageParser.END, 0);
};

IdentContext.prototype.ENTITY = function() {
    return this.getToken(languageParser.ENTITY, 0);
};

IdentContext.prototype.ENUM = function() {
    return this.getToken(languageParser.ENUM, 0);
};

IdentContext.prototype.ESCAPE = function() {
    return this.getToken(languageParser.ESCAPE, 0);
};

IdentContext.prototype.EVENT = function() {
    return this.getToken(languageParser.EVENT, 0);
};

IdentContext.prototype.EXACT = function() {
    return this.getToken(languageParser.EXACT, 0);
};

IdentContext.prototype.EXCEPT = function() {
    return this.getToken(languageParser.EXCEPT, 0);
};

IdentContext.prototype.EXCLUDING = function() {
    return this.getToken(languageParser.EXCLUDING, 0);
};

IdentContext.prototype.EXTEND = function() {
    return this.getToken(languageParser.EXTEND, 0);
};

IdentContext.prototype.FIRST = function() {
    return this.getToken(languageParser.FIRST, 0);
};

IdentContext.prototype.FULL = function() {
    return this.getToken(languageParser.FULL, 0);
};

IdentContext.prototype.FUNCTION = function() {
    return this.getToken(languageParser.FUNCTION, 0);
};

IdentContext.prototype.GROUP = function() {
    return this.getToken(languageParser.GROUP, 0);
};

IdentContext.prototype.HAVING = function() {
    return this.getToken(languageParser.HAVING, 0);
};

IdentContext.prototype.HOUR = function() {
    return this.getToken(languageParser.HOUR, 0);
};

IdentContext.prototype.INNER = function() {
    return this.getToken(languageParser.INNER, 0);
};

IdentContext.prototype.INTERSECT = function() {
    return this.getToken(languageParser.INTERSECT, 0);
};

IdentContext.prototype.INTO = function() {
    return this.getToken(languageParser.INTO, 0);
};

IdentContext.prototype.IS = function() {
    return this.getToken(languageParser.IS, 0);
};

IdentContext.prototype.JOIN = function() {
    return this.getToken(languageParser.JOIN, 0);
};

IdentContext.prototype.LAST = function() {
    return this.getToken(languageParser.LAST, 0);
};

IdentContext.prototype.LEADING = function() {
    return this.getToken(languageParser.LEADING, 0);
};

IdentContext.prototype.LEFT = function() {
    return this.getToken(languageParser.LEFT, 0);
};

IdentContext.prototype.LIKE = function() {
    return this.getToken(languageParser.LIKE, 0);
};

IdentContext.prototype.LIMIT = function() {
    return this.getToken(languageParser.LIMIT, 0);
};

IdentContext.prototype.LOCALIZED = function() {
    return this.getToken(languageParser.LOCALIZED, 0);
};

IdentContext.prototype.MANY = function() {
    return this.getToken(languageParser.MANY, 0);
};

IdentContext.prototype.MASKED = function() {
    return this.getToken(languageParser.MASKED, 0);
};

IdentContext.prototype.MINUS = function() {
    return this.getToken(languageParser.MINUS, 0);
};

IdentContext.prototype.MINUTE = function() {
    return this.getToken(languageParser.MINUTE, 0);
};

IdentContext.prototype.MIXIN = function() {
    return this.getToken(languageParser.MIXIN, 0);
};

IdentContext.prototype.MONTH = function() {
    return this.getToken(languageParser.MONTH, 0);
};

IdentContext.prototype.NAMESPACE = function() {
    return this.getToken(languageParser.NAMESPACE, 0);
};

IdentContext.prototype.NULLS = function() {
    return this.getToken(languageParser.NULLS, 0);
};

IdentContext.prototype.OFFSET = function() {
    return this.getToken(languageParser.OFFSET, 0);
};

IdentContext.prototype.ONE = function() {
    return this.getToken(languageParser.ONE, 0);
};

IdentContext.prototype.OR = function() {
    return this.getToken(languageParser.OR, 0);
};

IdentContext.prototype.ORDER = function() {
    return this.getToken(languageParser.ORDER, 0);
};

IdentContext.prototype.OUTER = function() {
    return this.getToken(languageParser.OUTER, 0);
};

IdentContext.prototype.PARAMETERS = function() {
    return this.getToken(languageParser.PARAMETERS, 0);
};

IdentContext.prototype.PROJECTION = function() {
    return this.getToken(languageParser.PROJECTION, 0);
};

IdentContext.prototype.REDIRECTED = function() {
    return this.getToken(languageParser.REDIRECTED, 0);
};

IdentContext.prototype.RETURNS = function() {
    return this.getToken(languageParser.RETURNS, 0);
};

IdentContext.prototype.RIGHT = function() {
    return this.getToken(languageParser.RIGHT, 0);
};

IdentContext.prototype.SECOND = function() {
    return this.getToken(languageParser.SECOND, 0);
};

IdentContext.prototype.SERVICE = function() {
    return this.getToken(languageParser.SERVICE, 0);
};

IdentContext.prototype.THEN = function() {
    return this.getToken(languageParser.THEN, 0);
};

IdentContext.prototype.TRAILING = function() {
    return this.getToken(languageParser.TRAILING, 0);
};

IdentContext.prototype.UNION = function() {
    return this.getToken(languageParser.UNION, 0);
};

IdentContext.prototype.TO = function() {
    return this.getToken(languageParser.TO, 0);
};

IdentContext.prototype.TYPE = function() {
    return this.getToken(languageParser.TYPE, 0);
};

IdentContext.prototype.USING = function() {
    return this.getToken(languageParser.USING, 0);
};

IdentContext.prototype.VIEW = function() {
    return this.getToken(languageParser.VIEW, 0);
};

IdentContext.prototype.YEAR = function() {
    return this.getToken(languageParser.YEAR, 0);
};




languageParser.IdentContext = IdentContext;

languageParser.prototype.ident = function(category) {

    var localctx = new IdentContext(this, this._ctx, this.state, category);
    this.enterRule(localctx, 226, languageParser.RULE_ident);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3130;
        _la = this._input.LA(1);
        if(!(((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DESC - 61)) | (1 << (languageParser.ELEMENT - 61)) | (1 << (languageParser.ELSE - 61)) | (1 << (languageParser.END - 61)) | (1 << (languageParser.ENTITY - 61)) | (1 << (languageParser.ENUM - 61)) | (1 << (languageParser.EVENT - 61)) | (1 << (languageParser.ESCAPE - 61)) | (1 << (languageParser.EXACT - 61)) | (1 << (languageParser.EXCEPT - 61)) | (1 << (languageParser.EXCLUDING - 61)) | (1 << (languageParser.EXTEND - 61)) | (1 << (languageParser.FIRST - 61)) | (1 << (languageParser.FULL - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)) | (1 << (languageParser.INNER - 93)) | (1 << (languageParser.INTERSECT - 93)) | (1 << (languageParser.INTO - 93)) | (1 << (languageParser.IS - 93)) | (1 << (languageParser.JOIN - 93)) | (1 << (languageParser.LAST - 93)) | (1 << (languageParser.LEADING - 93)) | (1 << (languageParser.LEFT - 93)) | (1 << (languageParser.LIKE - 93)) | (1 << (languageParser.LIMIT - 93)) | (1 << (languageParser.LOCALIZED - 93)) | (1 << (languageParser.MANY - 93)) | (1 << (languageParser.MASKED - 93)) | (1 << (languageParser.MINUS - 93)) | (1 << (languageParser.MINUTE - 93)) | (1 << (languageParser.MIXIN - 93)) | (1 << (languageParser.MONTH - 93)) | (1 << (languageParser.NAMESPACE - 93)) | (1 << (languageParser.NULLS - 93)) | (1 << (languageParser.OFFSET - 93)) | (1 << (languageParser.ONE - 93)) | (1 << (languageParser.OR - 93)) | (1 << (languageParser.ORDER - 93)) | (1 << (languageParser.OUTER - 93)) | (1 << (languageParser.PARAMETERS - 93)) | (1 << (languageParser.PROJECTION - 93)) | (1 << (languageParser.REDIRECTED - 93)) | (1 << (languageParser.RETURNS - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.RIGHT - 125)) | (1 << (languageParser.SECOND - 125)) | (1 << (languageParser.SERVICE - 125)) | (1 << (languageParser.THEN - 125)) | (1 << (languageParser.TRAILING - 125)) | (1 << (languageParser.TO - 125)) | (1 << (languageParser.TYPE - 125)) | (1 << (languageParser.UNION - 125)) | (1 << (languageParser.USING - 125)) | (1 << (languageParser.VIEW - 125)) | (1 << (languageParser.YEAR - 125)) | (1 << (languageParser.Identifier - 125)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this._ctx.stop = this._input.LT(-1);
         localctx.id =  this.identAst( localctx.stop, localctx.category ) 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.languageParser = languageParser;
